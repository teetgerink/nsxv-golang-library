openapi: 3.0.0
info:
  title: NSX-V
  version: 1.0.0
servers:
  - url: https://{{nsxmanager}}
tags:
  - name: appliance-management
  - name: cli
  - name: directory
  - name: eventcontrol
  - name: identity
  - name: syslog
  - name: alarms
  - name: application
  - name: applicationgroup
  - name: auditlog
  - name: capacity
  - name: config
  - name: controller
  - name: deploy
  - name: endpointsecurity
  - name: hardwaregateways
  - name: inventory
  - name: ipset
  - name: job
  - name: macset
  - name: network-features
  - name: nwfabric
  - name: policy
  - name: pools
  - name: securitygroup
  - name: securitytags
  - name: si
  - name: snmp
  - name: scopes
  - name: ssoconfig
  - name: switches
  - name: systemalarms
  - name: systemevent
  - name: traceflow
  - name: truststore
  - name: universalsync
  - name: usermgmt
  - name: vcconfig
  - name: virtualwires
  - name: excludelist
  - name: flow
  - name: ai
  - name: edges
  - name: edgePublish
  - name: firewall
  - name: spoofguard
paths:
  /api/1.0/appliance-management/global/info:
    get:
      tags:
        - appliance-management
      summary: globalInfoRead
      description: |+
        Retrieve global information containing version information as well as
        current logged in user.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/summary/system:
    get:
      tags:
        - appliance-management
      summary: summaryInfoRead
      description: |+
        Retrieve system summary info such as address, dns name, version, CPU,
        memory and storage.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/summary/components:
    get:
      tags:
        - appliance-management
      summary: componentInfoRead
      description: |+
        Retrieve summary of all available components and their status info.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/restart:
    post:
      tags:
        - appliance-management
      summary: systemRebootExecute
      description: |+
        Reboot the NSX Manager appliance.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/cpuinfo:
    get:
      tags:
        - appliance-management
      summary: systemCPUInfoRead
      description: |+
        Retrieve NSX Manager CPU information.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/uptime:
    get:
      tags:
        - appliance-management
      summary: systemUptimeRead
      description: |+
        Retrieve NSX Manager uptime information.

        **Example response:**
        ```
        25 days, 22 hours, 11 minutes
        ```


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/meminfo:
    get:
      tags:
        - appliance-management
      summary: systemMemoryInfoRead
      description: |+
        Retrieve NSX Manager memory information.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/storageinfo:
    get:
      tags:
        - appliance-management
      summary: systemStorageInfoRead
      description: |+
        Retrieve NSX Manager storage information.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/network:
    get:
      tags:
        - appliance-management
      summary: networkSettingsRead
      description: >+
        Retrieve network information for the NSX Manager appliance. i.e. host
        name, IP address, DNS settings



        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - appliance-management
      summary: networkSettingsUpdate
      description: |+
        Update network information for the NSX Manager appliance.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <network>
                  <hostName>nsxmgr-01a</hostName>
                  <networkIPv4AddressDto>
                    <ipv4Address>192.168.110.15</ipv4Address>
                    <ipv4NetMask>255.255.255.0</ipv4NetMask>
                    <ipv4Gateway>192.168.110.1</ipv4Gateway>
                  </networkIPv4AddressDto>
                  <networkIPv6AddressDto>
                    <ipv6Address>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:5332</ipv6Address>
                    <ipv6PrefixLength>64</ipv6PrefixLength>
                    <ipv6Gateway>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:0002</ipv6Gateway>
                  </networkIPv6AddressDto>
                  <dns>
                    <ipv4Address>192.168.110.10</ipv4Address>
                    <ipv6Address>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:0010</ipv6Address>
                    <domainList>corp.local</domainList>
                  </dns>
                </network>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/network/dns:
    put:
      tags:
        - appliance-management
      summary: applianceDnsClientUpdate
      description: |+
        Configure DNS.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <dns>
                  <ipv4Address></ipv4Address>
                  <ipv6Address></ipv6Address>
                  <domainList></domainList>
                </dns>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - appliance-management
      summary: applianceDnsClientDelete
      description: |+
        Delete DNS server configuration.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/securitysettings:
    get:
      tags:
        - appliance-management
      summary: systemSecSettingsRead
      description: |+
        Retrieve the NSX Manager FIPS and TLS settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - appliance-management
      summary: systemSecSettingsUpdate
      description: |+
        Update the NSX Manager security settings, including FIPS and TLS.

        Do not enable FIPS until you have upgraded all NSX components to NSX
        6.3.0 or later. Enable FIPS on NSX Edges before enabling it on the NSX
        Manager.

        Changing the FIPS mode will reboot the NSX Manager appliance.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitySettings>
                  <fipsEnabled>true</fipsEnabled>
                  <tlsSettings>
                    <serverEnabledProtocols>TLSv1.1,TLSv1.2</serverEnabledProtocols>
                    <clientEnabledProtocols>TLSv1.1,TLSv1.2</clientEnabledProtocols>
                  </tlsSettings>
                </securitySettings>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/tlssettings:
    get:
      tags:
        - appliance-management
      summary: tlsSettingsRead
      description: |+
        Retrieve TLS settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - appliance-management
      summary: tlsSettingsUpdate
      description: |+
        Update TLS settings.

        Include a comma separated list of the TLS versions you want to enable,
        for both server and client.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <tlsSettings>
                  <serverEnabledProtocols>TLSv1.1,TLSv1.2</serverEnabledProtocols>
                  <clientEnabledProtocols>TLSv1.1,TLSv1.2</clientEnabledProtocols>
                </tlsSettings>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/timesettings:
    get:
      tags:
        - appliance-management
      summary: systemTimeRead
      description: |+
        Retrieve time settings, like timezone or current date and time with
        NTP server, if configured.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - appliance-management
      summary: systemTimeUpdate
      description: |+
        Configure time or specify the NTP server to use for time
        synchronization.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <timeSettings>
                  <ntpServer>
                    <string>192.168.110.1</string>
                  </ntpServer>
                  <datetime>04/19/2017 06:53:57</datetime>
                  <timezone>UTC</timezone>
                </timeSettings>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/timesettings/ntp:
    delete:
      tags:
        - appliance-management
      summary: ntpDelete
      description: |+
        Delete NTP server.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/locale:
    get:
      tags:
        - appliance-management
      summary: systemLocaleRead
      description: |+
        Retrieve locale info.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - appliance-management
      summary: systemLocaleUpdate
      description: |+
        Configure locale.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <locale>
                  <language>ja</language>
                  <country>JP</country>
                </locale>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/syslogserver:
    get:
      tags:
        - appliance-management
      summary: systemSyslogServerRead
      description: |+
        Retrieve syslog servers.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - appliance-management
      summary: systemSyslogServerUpdate
      description: |+
        Configure syslog servers.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <syslogserver>
                  <syslogServer>192.168.110.20</syslogServer>
                  <port>514</port>
                  <protocol>UDP</protocol>
                </syslogserver>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - appliance-management
      summary: systemSyslogServerDelete
      description: |+
        Delete syslog servers.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components:
    get:
      tags:
        - appliance-management
      summary: componentsManagementRead
      description: |+
        Retrieve all appliance manager components.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}:
    get:
      tags:
        - appliance-management
      summary: componentManagementRead
      description: |+
        Retrieve details for the specified component.

        Parameters:

        componentID: Specified component ID.

      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/dependencies:
    get:
      tags:
        - appliance-management
      summary: componentDependenciesRead
      description: |+
        Retrieve dependency details for the specified component.

        Parameters:

      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/dependents:
    get:
      tags:
        - appliance-management
      summary: componentDependentsRead
      description: |+
        Retrieve dependents for the specified component.

        Parameters:

      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/status:
    get:
      tags:
        - appliance-management
      summary: componentStatusRead
      description: |+
        Retrieve current status for the specified component.

        Parameters:

      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/toggleStatus/{command}:
    post:
      tags:
        - appliance-management
      summary: componentManagementToggleCommand
      description: |+
        Start or stop a component.

        Parameters:

        command: Use **command** parameter *start* or *stop*.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
        - name: command
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/APPMGMT/restart:
    post:
      tags:
        - appliance-management
      summary: componentAppMgmtRestartExecute
      description: |+
        Restart the appliance management web application.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings:
    get:
      tags:
        - appliance-management
      summary: applianceMgrBackupSettingsRead
      description: |+
        Retrieve backup settings.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - appliance-management
      summary: applianceMgrBackupSettingsUpdate
      description: |+
        Configure backups on the appliance manager.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <backupRestoreSettings>
                  <ftpSettings>
                    <transferProtocol>SFTP</transferProtocol>
                    <hostNameIPAddress>192.168.110.30</hostNameIPAddress>
                    <port>22</port>
                    <userName>admin</userName>
                    <password>testing123</password>
                    <backupDirectory>/backups</backupDirectory>
                    <filenamePrefix>nsxmgr-01a</filenamePrefix>
                    <passPhrase>testing456</passPhrase>
                    <passiveMode>true</passiveMode>
                    <useEPRT>false</useEPRT>
                    <useEPSV>true</useEPSV>
                  </ftpSettings>
                  <backupFrequency>
                    <frequency>WEEKLY</frequency>
                    <dayOfWeek>SUNDAY</dayOfWeek>
                    <hourOfDay>2</hourOfDay>
                    <minuteOfHour>15</minuteOfHour>
                  </backupFrequency>
                  <excludeTables>
                    <excludeTable>AUDIT_LOGS</excludeTable>
                  </excludeTables>
                </backupRestoreSettings>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - appliance-management
      summary: applianceMgrBackupSettingsDelete
      description: |+
        Delete appliance manager backup configuration.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings/ftpsettings:
    put:
      tags:
        - appliance-management
      summary: applianceMgrBackupSettingsFtpUpdate
      description: |+
        Configure FTP settings.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings/excludedata:
    put:
      tags:
        - appliance-management
      summary: applianceMgrBackupSettingsExcludeUpdate
      description: |+
        Specify tables that need not be backed up.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings/schedule:
    put:
      tags:
        - appliance-management
      summary: applianceMgrBackupSettingsScheduleUpdate
      description: |+
        Set backup schedule.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - appliance-management
      summary: applianceMgrBackupSettingsScheduleDelete
      description: |+
        Delete backup schedule.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backup:
    post:
      tags:
        - appliance-management
      summary: applianceMgrBackupCreate
      description: |+
        Start an on-demand NSX backup.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backups:
    get:
      tags:
        - appliance-management
      summary: applianceMgrBackupsRead
      description: |+
        Retrieve list of all backups available at configured backup location.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/restore:
    post:
      tags:
        - appliance-management
      summary: applianceMgrBackupRestoreExecute
      description: >+
        Restore data from a backup file.


        Retrive a list of restore files using `GET
        /api/1.0/appliance-management/backuprestore/backups`.



        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: restoreFile
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/techsupportlogs/{componentID}:
    post:
      tags:
        - appliance-management
      summary: techLogsCreate
      description: >+
        Generate tech support logs. The location response header contains the

        location of the created tech support file. 



        Parameters:


        componentID: Specified component to generate tech support logs. For
        example,

        *NSX*.


      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/techsupportlogs/{filename}:
    get:
      tags:
        - appliance-management
      summary: techLogsDownloadRead
      description: |+
        Download tech support logs

        Parameters:

        filename: Name of log file to download.

      parameters:
        - name: filename
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/notifications:
    get:
      tags:
        - appliance-management
      summary: notificationsRead
      description: |+
        Retrieve all system generated notifications.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - appliance-management
      summary: notificationsDelete
      description: |+
        Delete all notifications.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/notifications/{ID}/acknowledge:
    post:
      tags:
        - appliance-management
      summary: notificationsAcknowledgeAck
      description: |+
        Acknowledge a notification. The notification is then deleted from
        the system.


        Parameters:

        ID: Notification ID.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/uploadbundle/{componentID}:
    post:
      tags:
        - appliance-management
      summary: upgradeBundleUpload
      description: |+
        Upload upgrade bundle.

        Parameters:

        componentID: Component ID.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/information/{componentID}:
    get:
      tags:
        - appliance-management
      summary: upgradeBundleDetails
      description: |+
        Once you have uploaded an upgrade bundle, you must retrieve
        information about the upgrade. This request contains pre-upgrade
        validation warnings and error messages, along with pre-upgrade
        questions with default answers. Review the information and edit the
        answers in the **preUpgradeQuestionsAnswers** section if needed before
        providing the section as the request body to the `POST
        /api/1.0/appliance-management/upgrade/start/{componentID}` method.


        Parameters:

        componentID: 

      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/start/{componentID}:
    post:
      tags:
        - appliance-management
      summary: upgradeStartExecute
      description: |+
        Start upgrade process.

        Parameters:

        componentID: Component ID

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <preUpgradeQuestionsAnswers>
                  <preUpgradeQuestionAnswer>
                    <questionId>preUpgradeChecks1:Q1</questionId>
                    <question>Do you want to enable SSH ?</question>
                    <questionAnserType>YESNO</questionAnserType>
                    <answer>YES</answer>
                  </preUpgradeQuestionAnswer>
                  <preUpgradeQuestionAnswer>
                    <questionId>preUpgradeChecks1:Q2</questionId>
                    <question>This product participates in VMware&apos;s Customer Experience Improvement Program (&quot;CEIP&quot;). The CEIP provides VMware with information that enables VMware to improve its products and services, to fix problems, and to advise you on
                      how best to deploy and use our products. As part of the CEIP, VMware collects technical information about your organization&apos;s use of VMware products and services on a regular basis in association with your organization&apos;s VMware license
                      key(s). This information does not personally identify any individual. For additional information regarding the CEIP, please see the Trust and Assurance Center at http://www.vmware.com/trustvmware/ceip.html. You can select your participation
                      preferences below. Do you want to join the VMware Customer Experience Improvement Program ?</question>
                    <questionAnserType>YESNO</questionAnserType>
                    <answer>YES</answer>
                  </preUpgradeQuestionAnswer>
                </preUpgradeQuestionsAnswers>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/status/{componentID}:
    get:
      tags:
        - appliance-management
      summary: upgradeStatusRead
      description: |+
        Query upgrade status.

        Parameters:

        componentID: Component ID.

      parameters:
        - name: componentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/pkcs12keystore/nsx:
    post:
      tags:
        - appliance-management
      summary: certificatesKeystoreUpdate
      description: |+
        Upload keystore file.

        Input is PKCS#12 formatted NSX file along with password.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: password
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/certificates/nsx:
    get:
      tags:
        - appliance-management
      summary: certificateManagerCertificatesNsxRead
      description: |+
        Retrieve certificate information from NSX Manager.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/csr/nsx:
    post:
      tags:
        - appliance-management
      summary: certificateCsrCreate
      description: >+
        Create a certificate signing request (CSR) for NSX Manager.


        The response header contains the created file location.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method introduced. Replaces `PUT
        /api/1.0/appliance-management/certificatemanager/csr/nsx`.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <csr>
                  <algorithm></algorithm>
                  <keySize></keySize>
                  <subjectDto>
                    <commonName></commonName>
                    <organizationUnit></organizationUnit>
                    <organizationName></organizationName>
                    <localityName></localityName>
                    <stateName></stateName>
                    <countryCode></countryCode>
                  </subjectDto>
                </csr>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - appliance-management
      summary: certificateCsrRead
      description: |+
        Retrieve generated certificate signing request (CSR).


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/uploadchain/nsx:
    post:
      tags:
        - appliance-management
      summary: certificateChainUpload
      description: |+
        Upload certificate chain.

        Input is certificate chain file which is a PEM encoded chain of
        certificates received from the CA after signing a CSR.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/nsx/cli:
    post:
      tags:
        - cli
      summary: nsxCliExecute
      description: >+
        The central command-line interface (central CLI) commands are run from
        the

        NSX Manager command line, and retrieve information from the NSX Manager
        and other

        devices. These commands can also be executed in the API.


        You can insert any valid Central CLI command as the **command**

        parameter. For a complete list of the Central CLI commands executable

        through the API, please see the Central CLI chapter of the *NSX Command

        Line Interface Reference*.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nsxcli>
                  <command>show logical-switch list host host-21 vni</command>
                </nsxcli>
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/updateDomain:
    post:
      tags:
        - directory
      summary: domainCreate
      description: |+
        Register or update a domain with NSX Manager

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <DirectoryDomain>
                  <name>example.com</name>
                  <netbiosName>Example</netbiosName>
                  <username>Administrator</username>
                  <password>xxx</password>
                </DirectoryDomain>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/listDomains:
    get:
      tags:
        - directory
      summary: domainListRead
      description: |+
        Retrieve all agent discovered (or configured) LDAP domains.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deleteDomain/{ID}:
    delete:
      tags:
        - directory
      summary: domainDeleteDelete
      description: |+
        Delete domain.

        Parameters:

        ID: Domain ID.

      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/updateLdapServer:
    post:
      tags:
        - directory
      summary: ldapServerCreateCreate
      description: |+
        Create LDAP server.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <LDAPServer>
                  <domainId>4</domainId>
                  <hostName>10.142.72.70</hostName>
                  <enabled>true</enabled>
                </LDAPServer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/listLdapServersForDomain/{domainID}:
    get:
      tags:
        - directory
      summary: ldapServerDomainRead
      description: |+
        Query LDAP servers for a domain.

        Parameters:

        domainID: Specified domain.

      parameters:
        - name: domainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/fullSync/{domainID}:
    put:
      tags:
        - directory
      summary: ldapServerSyncExecute
      description: |+
        Start LDAP full sync.

        Parameters:

        domainID: Specified domain.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: domainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deltaSync/{domainID}:
    put:
      tags:
        - directory
      summary: ldapServerDeltaSyncExecute
      description: |+
        Start LDAP delta sync.

        Parameters:

        domainID: Specified domain.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: domainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deleteLdapServer/{serverID}:
    delete:
      tags:
        - directory
      summary: ldapServerDeleteDelete
      description: |+
        Delete LDAP server.

        Parameters:

        serverID: Specified LDAP server.

      parameters:
        - name: serverID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/updateEventLogServer:
    post:
      tags:
        - directory
      summary: eLogServerCreateCreate
      description: |+
        Create EventLog server.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <EventlogServer>
                  <id>1</id>
                  <domainId>4</domainId>
                  <hostName>10.142.72.70</hostName>
                  <enabled>false</enabled>
                </EventlogServer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/listEventLogServersForDomain/{domainID}:
    get:
      tags:
        - directory
      summary: eLogServerDomainReadRead
      description: |+
        Query EventLog servers for a domain.

        Parameters:

        domainID: Specified domain.

      parameters:
        - name: domainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deleteEventLogServer/{serverID}:
    delete:
      tags:
        - directory
      summary: eLogServerDeleteDelete
      description: |+
        Delete EventLog server.

        Parameters:

        serverID: Specified EventLog server ID.

      parameters:
        - name: serverID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/eventcontrol/vm/{vmID}/request:
    post:
      tags:
        - eventcontrol
      summary: dataCollectionVMCreate
      description: |+
        Enable or disable data collection on a virtual machine

        Set **value** to *enabled* or *disabled*.


        Parameters:

        vmID: MOID of the guest vm

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <perVmConfig>
                  <actions>
                    <action>
                      <type>per_vm_config</type>
                      <value>enabled</value>
                    </action>
                  </actions>
                </perVmConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: vmID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/eventcontrol/eventcontrol-root/request:
    post:
      tags:
        - eventcontrol
      summary: dataCollectionKillSwitchToggle
      description: |+
        Turn data collection on or off at the global level.

        In case of an emergency such as a network overload, you can turn off
        data collection at a global level (kill switch). This overrides all
        other data collection settings.

        Set **value** to *enabled* or *disabled*.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <request>
                  <actions>
                    <action>
                      <type>global_switch</type>
                      <value>disabled</value>
                    </action>
                  </actions>
                </request>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/eventcontrol/config/vm/{vmID}:
    get:
      tags:
        - eventcontrol
      summary: dataCollectionVMInfoRead
      description: |+
        Retrieve per VM configuration for data collection.


        Parameters:

        vmID: MOID of the guest vm

      parameters:
        - name: vmID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/userIpMapping:
    get:
      tags:
        - identity
      summary: userIpMappingRead
      description: |+
        Query user-to-ip mapping list from database.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/hostIpMapping:
    get:
      tags:
        - identity
      summary: hostIpMappingRead
      description: |+
        Query host-to-ip mapping list from database.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/ipToUserMapping:
    get:
      tags:
        - identity
      summary: ipToUserMappingRead
      description: |+
        Retrieve set of users associated with a given set of IP addresses during
        a specified time period. Since more than one user can be associated
        with a single IP address during the specified time period, each IP
        address can be associated with zero or more (i.e a SET of) users.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/directoryGroupsForUser:
    get:
      tags:
        - identity
      summary: userDirGroupsRead
      description: |+
        Query set of Windows Domain Groups (AD Groups) to which the specified
        user belongs.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMapping/{userID}/{IP}:
    post:
      tags:
        - identity
      summary: staticUserMappingCreate
      description: |+
        Create static user IP mapping.

        Parameters:

        userID: User ID

        IP: IP address

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: IP
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMappings:
    get:
      tags:
        - identity
      summary: staticUserMappingsRead
      description: |+
        Query static user IP mapping list.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMappingsbyUser/{userID}:
    get:
      tags:
        - identity
      summary: staticUserMappingsbyUserRead
      description: |+
        Query static user IP mapping for specified user.

        Parameters:

        userID: User ID

      parameters:
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - identity
      summary: staticUserMappingsbyUserDelete
      description: |+
        Delete static user IP mapping for specified user.

        Parameters:

        userID: User ID

      parameters:
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMappingsbyIP/{IP}:
    get:
      tags:
        - identity
      summary: staticUserMappingsbyIPRead
      description: |+
        Query static user IP mapping for specified IP.

        Parameters:

        IP: IP address

      parameters:
        - name: IP
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - identity
      summary: staticUserMappingsbyIPDelete
      description: |+
        Delete static user IP mapping for specified IP.

        Parameters:

        IP: IP address

      parameters:
        - name: IP
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/sam/syslog/enable:
    post:
      tags:
        - syslog
      summary: syslogEnableSet
      description: |+
        Enable syslog support.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/1.0/sam/syslog/disable:
    post:
      tags:
        - syslog
      summary: syslogDisableSet
      description: |+
        Disable syslog support.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/alarms/{sourceId}:
    get:
      tags:
        - alarms
      summary: servicesAlarmsSourceList
      description: >+
        Retrive all alarms from the specified source.



        Parameters:


        sourceId: ID of the object for which you want to manage alarms.
        *sourceId*

        can be the ID of a cluster, host, resource pool, security group, or

        edge.


      parameters:
        - name: sourceId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - alarms
      summary: servicesAlarmsSourceUpdate
      description: >+
        Resolve all alarms for the specified source.


        Alarms will resolve automatically when the cause of the alarm is

        resolved.  For example, if an NSX Edge appliance is powered off, this

        will trigger an alarm. If you power the NSX Edge appliance back on, the

        alarm will resolve. If however, you delete the NSX Edge appliance, the

        alarm will persist, because the alarm cause was never resolved. In this

        case, you may want to manually resolve the alarm. Resolving the alarms

        will clear them from the NSX dashboard.


        Use `GET /api/2.0/services/alarms/{sourceId}` to retrieve the list of

        alarms for the source. Use this response as the request body for the

        `POST` call.



        Parameters:


        sourceId: ID of the object for which you want to manage alarms.
        *sourceId*

        can be the ID of a cluster, host, resource pool, security group, or

        edge.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <systemAlarms>
                    <systemAlarm>
                        <eventId>79965</eventId>
                        <timestamp>1485556529744</timestamp>
                        <severity>High</severity>
                        <eventSource>edge-3</eventSource>
                        <eventCode>130027</eventCode>
                        <message>NSX Edge VM (vmId : vm-430) is powered off. Please use vsphere client to power on Edge VM</message>
                        <module>NSX Edge Communication Agent</module>
                        <objectId>edge-3</objectId>
                        <reporterName>vShield Manager</reporterName>
                        <reporterType>4</reporterType>
                        <sourceType>4</sourceType>
                        <isResourceUniversal>false</isResourceUniversal>
                        <eventMetadata>
                            <data>
                                <key>edgeVmVcUUId</key>
                                <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                            </data>
                        </eventMetadata>
                        <resolutionAttempted>false</resolutionAttempted>
                        <resolvable>true</resolvable>
                        <alarmId>79965</alarmId>
                        <alarmCode>130027</alarmCode>
                        <alarmSource>edge-3</alarmSource>
                        <target>
                            <objectId>vm-430</objectId>
                            <objectTypeName>VirtualMachine</objectTypeName>
                            <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                            <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                            <revision>18</revision>
                            <type>
                                <typeName>VirtualMachine</typeName>
                            </type>
                            <name>Perimeter-Gateway-01-0</name>
                            <scope>
                                <id>domain-c41</id>
                                <objectTypeName>ClusterComputeResource</objectTypeName>
                                <name>Management &amp; Edge Cluster</name>
                            </scope>
                            <clientHandle></clientHandle>
                            <extendedAttributes/>
                            <isUniversal>false</isUniversal>
                            <universalRevision>0</universalRevision>
                        </target>
                        <alarmBeingResolved>false</alarmBeingResolved>
                        <alarmMetadata>
                            <data>
                                <key>edgeVmVcUUId</key>
                                <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                            </data>
                        </alarmMetadata>
                    </systemAlarm>
                    <systemAlarm>
                        <eventId>79967</eventId>
                        <timestamp>1485556529774</timestamp>
                        <severity>High</severity>
                        <eventSource>edge-3</eventSource>
                        <eventCode>130033</eventCode>
                        <message>NSX Edge VM (vmId : vm-430) is not responding to NSX manager health check. Please check NSX manager logs for details.</message>
                        <module>NSX Edge Health Check</module>
                        <objectId>edge-3</objectId>
                        <reporterName>vShield Manager</reporterName>
                        <reporterType>4</reporterType>
                        <sourceType>4</sourceType>
                        <isResourceUniversal>false</isResourceUniversal>
                        <eventMetadata>
                            <data>
                                <key>edgeVmVcUUId</key>
                                <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                            </data>
                            <data>
                                <key>edgeId</key>
                                <value>edge-3</value>
                            </data>
                            <data>
                                <key>edgeVmName</key>
                                <value>Perimeter-Gateway-01-0</value>
                            </data>
                            <data>
                                <key>edgeVmId</key>
                                <value>vm-430</value>
                            </data>
                        </eventMetadata>
                        <resolutionAttempted>false</resolutionAttempted>
                        <resolvable>true</resolvable>
                        <alarmId>79967</alarmId>
                        <alarmCode>130033</alarmCode>
                        <alarmSource>edge-3</alarmSource>
                        <target>
                            <objectId>vm-430</objectId>
                            <objectTypeName>VirtualMachine</objectTypeName>
                            <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                            <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                            <revision>18</revision>
                            <type>
                                <typeName>VirtualMachine</typeName>
                            </type>
                            <name>Perimeter-Gateway-01-0</name>
                            <scope>
                                <id>domain-c41</id>
                                <objectTypeName>ClusterComputeResource</objectTypeName>
                                <name>Management &amp; Edge Cluster</name>
                            </scope>
                            <clientHandle></clientHandle>
                            <extendedAttributes/>
                            <isUniversal>false</isUniversal>
                            <universalRevision>0</universalRevision>
                        </target>
                        <alarmBeingResolved>false</alarmBeingResolved>
                        <alarmMetadata>
                            <data>
                                <key>edgeVmVcUUId</key>
                                <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                            </data>
                            <data>
                                <key>edgeId</key>
                                <value>edge-3</value>
                            </data>
                            <data>
                                <key>edgeVmName</key>
                                <value>Perimeter-Gateway-01-0</value>
                            </data>
                            <data>
                                <key>edgeVmId</key>
                                <value>vm-430</value>
                            </data>
                        </alarmMetadata>
                    </systemAlarm>
                </systemAlarms>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: sourceId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/application/scope/{scopeId}:
    get:
      tags:
        - application
      summary: servicesAppsScopeScopeRead
      description: >+
        Retrieve services that have been created on the specified scope.


        Parameters:


        scopeId: Can be "globalroot-0", "universalroot-0" or datacenterId in
        upgrade use

        cases.


      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/application/{scopeId}:
    post:
      tags:
        - application
      summary: servicesAppsScopeCreate
      description: |+
        Create a new service on the specified scope.


        Parameters:

        scopeId: 

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <application>
                  <objectId></objectId>
                  <type>
                    <typeName/>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <element>
                    <applicationProtocol>mandatory</applicationProtocol>
                    <value>mandatory</value>
                  </element>
                </application>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/application/{applicationId}:
    get:
      tags:
        - application
      summary: serviceAppRead
      description: >+
        Retrieve details about the specified service.


        Parameters:


        applicationId: Application ID. You can get a list of application IDs
        from `GET

        /api/2.0/services/application/scope/{scopeId}`.


      parameters:
        - name: applicationId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - application
      summary: serviceAppUpdate
      description: >+
        Modify the name, description, applicationProtocol, or port value of a

        service.



        Parameters:


        applicationId: Application ID. You can get a list of application IDs
        from `GET

        /api/2.0/services/application/scope/{scopeId}`.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <application>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <element>
                    <applicationProtocol></applicationProtocol>
                    <value></value>
                  </element>
                </application>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: applicationId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - application
      summary: serviceAppDelete
      description: >+
        Delete the specified service.


        Parameters:


        applicationId: Application ID. You can get a list of application IDs
        from `GET

        /api/2.0/services/application/scope/{scopeId}`.


      parameters:
        - name: force
          in: query
          schema:
            type: string
        - name: applicationId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/scope/{scopeId}:
    post:
      tags:
        - applicationgroup
      summary: serviceGroupsCreate
      description: >+
        Create a new service group on the specified scope.


        Parameters:


        scopeId: The scopeId can be "globalroot-0", "universalroot-0" or
        datacenterId

        in upgrade use cases


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationGroup>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <inheritanceAllowed></inheritanceAllowed>
                </applicationGroup>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - applicationgroup
      summary: serviceGroupsRead
      description: >+
        Retrieve a list of service groups that have been created on the scope.



        Parameters:


        scopeId: The scopeId can be "globalroot-0", "universalroot-0" or
        datacenterId

        in upgrade use cases


      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/{applicationgroupId}:
    get:
      tags:
        - applicationgroup
      summary: serviceGroupRead
      description: |+
        Retrieve details about the specified service group.

        Parameters:

        applicationgroupId: Application group ID

      parameters:
        - name: applicationgroupId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - applicationgroup
      summary: serviceGroupUpdate
      description: |+
        Modify the name, description, applicationProtocol, or port value of
        the specified service group.


        Parameters:

        applicationgroupId: Application group ID

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationGroup>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <description></description>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <name></name>
                  </scope>
                  <extendedAttributes></extendedAttributes>
                  <inheritanceAllowed></inheritanceAllowed>
                  <member>
                    <objectId></objectId>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <revision></revision>
                    <objectTypeName></objectTypeName>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                  </member>
                </applicationGroup>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: applicationgroupId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - applicationgroup
      summary: serviceGroupDelete
      description: |+
        Delete the specified service group from a scope.

        Parameters:

        applicationgroupId: Application group ID

      parameters:
        - name: force
          in: query
          schema:
            type: string
        - name: applicationgroupId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/{applicationgroupId}/members/{moref}:
    put:
      tags:
        - applicationgroup
      summary: serviceGroupMembersCreate
      description: |+
        Add a member to the service group.

        Parameters:

        moref: Managed object reference to the member.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: applicationgroupId
          in: path
          schema:
            type: string
          required: true
        - name: moref
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - applicationgroup
      summary: serviceGroupMembersDelete
      description: |+
        Delete a member from the service group.

        Parameters:

        moref: Managed object reference to the member.

      parameters:
        - name: applicationgroupId
          in: path
          schema:
            type: string
          required: true
        - name: moref
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/scope/{scopeId}/members:
    get:
      tags:
        - applicationgroup
      summary: serviceGroupMembersScopeList
      description: |+
        Get a list of member elements that can be added to the service groups
        created on a particular scope.

        Since service group allows only either services or other service
        groups as members to be added, this helps you get a list of all
        possible valid elements that can be added to the
        service.


        Parameters:

        scopeId: globalroot-0 or datacenterId in upgrade use cases

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/auditlog:
    get:
      tags:
        - auditlog
      summary: auditLogsRead
      description: |+
        Get NSX Manager audit logs

        Parameters:

      parameters:
        - name: startIndex
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/licensing/capacityusage:
    get:
      tags:
        - capacity
      summary: capacityUsageRead
      description: >+
        Retrieve capacity usage information on the usage of CPUs, VMs and
        concurrent

        users for the distributed firewall and VXLAN.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method introduced.



        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/segments:
    post:
      tags:
        - config
      summary: vdnSegmentPoolAdd
      description: |+
        Add a segment ID pool.

        * **name** - Required property.
        * **desc** - Optional property.
        * **begin** - Required property. Minimum value is *5000*
        * **end** - Required property. Maximum value is *16777216*


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <segmentRange>
                  <name>Segment 1</name>
                  <desc>Segment Range 1</desc>
                  <begin>5000</begin>
                  <end>12999</end>
                </segmentRange>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: isUniversal
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - config
      summary: vdnSegmentPoolList
      description: |+
        Retrieve information about all segment ID pools.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/segments/{segmentPoolId}:
    get:
      tags:
        - config
      summary: vdnSegmentPoolShow
      description: |+
        Retrieve information about the specified segment ID pool.


        Parameters:

        segmentPoolId: A valid *segmentPoolId*

      parameters:
        - name: segmentPoolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - config
      summary: vdnSegmentPoolChange
      description: |+
        Update the specified segment ID pool.

        If the segment ID pool is universal you must send the API request to
        the primary NSX Manager.


        Parameters:

        segmentPoolId: A valid *segmentPoolId*

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <segmentRange>
                  <desc>Local Segment ID pool expanded</desc>
                  <end>6999</end>
                </segmentRange>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: segmentPoolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - config
      summary: vdnSegmentPoolDelete
      description: |+
        Delete the specified segment ID pool.

        If the segment ID pool is universal you must send the API request to
        the primary NSX Manager.


        Parameters:

        segmentPoolId: A valid *segmentPoolId*

      parameters:
        - name: segmentPoolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/multicasts:
    post:
      tags:
        - config
      summary: vdnMulticastPoolAdd
      description: |+
        Add a multicast address range for logical switches.

        The address range includes the beginning and ending addresses.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <multicastRange>
                  <name>Range 2</name>
                  <begin>237.0.0.0</begin>
                  <end>237.255.255.255</end>
                </multicastRange>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: isUniversal
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - config
      summary: vdnMulticastPoolList
      description: |+
        Retrieve information about all configured multicast address ranges.

        Universal multicast address ranges have the property isUniversal
        set to *true*.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/multicasts/{multicastAddresssRangeId}:
    get:
      tags:
        - config
      summary: vdnMulticastPoolShow
      description: |+
        Retrieve information about the specified multicast address range.


        Parameters:

        multicastAddresssRangeId: A valid multicast address range ID

      parameters:
        - name: multicastAddresssRangeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - config
      summary: vdnMulticastPoolChange
      description: |+
        Update the specified multicast address range.

        If the multicast address range is universal you must send the API
        request to the primary NSX Manager.


        Parameters:

        multicastAddresssRangeId: A valid multicast address range ID

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <multicastRange>
                  <name>Extended range 2</name>
                  <desc>Extended range 2</desc>
                  <end>238.255.255.255</end>
                </multicastRange>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: multicastAddresssRangeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - config
      summary: vdnMulticastPoolDelete
      description: |+
        Delete the specified multicast address range.

        If the multicast address range is universal you must send the API
        request to the primary NSX Manager.


        Parameters:

        multicastAddresssRangeId: A valid multicast address range ID

      parameters:
        - name: multicastAddresssRangeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/vxlan/udp/port:
    get:
      tags:
        - config
      summary: vdnConfigUDPShow
      description: |+
        Retrieve the UDP port configured for VXLAN traffic.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/vxlan/udp/port/{portNumber}:
    put:
      tags:
        - config
      summary: vdnConfigUDPUpdateUpdate
      description: >+
        Update the VXLAN port configuration to use port *portNumber*.


        This method changes the VXLAN port in a three phrase process, avoiding

        disruption of VXLAN traffic. In a cross-vCenter NSX environment,

        change the VXLAN port on the primary NSX Manager to propagate this

        change on all NSX Managers and hosts in the cross-vCenter NSX

        environment.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. Port change is now non-disruptive, and
        propagates to secondary NSX Managers if performed on the primary NSX
        Manager. Force parameter added.



        Parameters:


        portNumber: A valid UDP port for VXLAN

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: force
          in: query
          schema:
            type: string
        - name: portNumber
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/vxlan/udp/port/taskStatus:
    get:
      tags:
        - config
      summary: vdnConfigUDPUpdateStatusRead
      description: |+
        Retrieve the status of the VXLAN port configuration update.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/resources/allocated:
    get:
      tags:
        - config
      summary: allocatedResourcesRead
      description: |+
        Retrieve information about allocated segment IDs or multicast
        addresses.


        Parameters:

      parameters:
        - name: type
          in: query
          schema:
            type: string
        - name: pagesize
          in: query
          schema:
            type: string
        - name: startindex
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/host/{hostId}/vxlan/vteps:
    post:
      tags:
        - config
      summary: hostVtepResolveAction
      description: |+
        Resolve missing VXLAN VMKernel adapters.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        hostId: 

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: action
          in: query
          schema:
            type: string
        - name: hostId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller:
    post:
      tags:
        - controller
      summary: nsxControllerCreate
      description: >+
        Adds a new NSX controller on the specified given cluster. The *hostId*

        parameter is optional. The *resourcePoolId* can be either the

        *clusterId* or *resourcePoolId*.


        The IP address of the controller node will be allocated

        from the specified IP pool. The *deployType* property determines the

        controller node memory size and can be small, medium, or large. However,

        different controller deployment types are not currently supported
        because

        the OVF overrides it and different OVF types require changes in the

        manager build scripts. Despite not being supported, an arbitrary

        *deployType* size must still be specified or an error will be returned.

        Request without body to upgrade controller cluster.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerSpec>
                  <name></name>
                  <description></description>
                  <ipPoolId></ipPoolId>
                  <resourcePoolId></resourcePoolId>
                  <hostId></hostId>
                  <datastoreId></datastoreId>
                  <deployType></deployType>
                  <networkId></networkId>
                  <password></password>
                </controllerSpec>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - controller
      summary: nsxControllersRead
      description: >+
        Retrieves details and runtime status for all controllers.  Runtime
        status

        can be one of the following:

          * **Deploying** - controller is being deployed and the procedure has not
          completed yet.
          * **Removing** - controller is being removed and the procedure has not
          completed yet.
          * **Running** - controller has been deployed and can respond to API
          invocation.
          * **Unknown** - controller has been deployed but fails to respond to API
          invocation.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/upgrade-available:
    get:
      tags:
        - controller
      summary: nsxControllerUpgradeAvailabilityRead
      description: |+
        Retrieve controller upgrade availability.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/progress/{jobId}:
    get:
      tags:
        - controller
      summary: nsxControllerJobRead
      description: |+
        Retrieves status of controller creation or removal. The progress gives
        a percentage indication of current deploy / remove procedure.


        Parameters:

        jobId: Specified job Id

      parameters:
        - name: jobId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}:
    delete:
      tags:
        - controller
      summary: nsxControllerDelete
      description: |+
        Delete the NSX controller.


        Parameters:

        controllerId: Specified controller ID.

        To retrieve the controller IDs, log in to the vSphere Web Client.
        Navigate to Networking & Security > Installation > Management, and
        view the **NSX Controller nodes** section. The controller ID is
        listed in the **Controller ID** or **Controller Node** column,
        depending on NSX version. An example controller ID is
        *controller-1*. 

        In a cross-vCenter NSX environment, retrieve the controller IDs from
        rows where the NSX Manager column contains the primary NSX Manager
        IP address.


      parameters:
        - name: forceRemoval
          in: query
          schema:
            type: string
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - controller
      summary: nsxControllerRemediateAction
      description: |+
        If you power off or delete a controller from vCenter, NSX Manager
        detects the change in controller status. You can remediate the
        controller, which will power on a powered off controller, or remove the
        controller from the NSX Manager database if the controller is deleted.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        controllerId: Specified controller ID.

        To retrieve the controller IDs, log in to the vSphere Web Client.
        Navigate to Networking & Security > Installation > Management, and
        view the **NSX Controller nodes** section. The controller ID is
        listed in the **Controller ID** or **Controller Node** column,
        depending on NSX version. An example controller ID is
        *controller-1*. 

        In a cross-vCenter NSX environment, retrieve the controller IDs from
        rows where the NSX Manager column contains the primary NSX Manager
        IP address.


      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: action
          in: query
          schema:
            type: string
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/systemStats:
    get:
      tags:
        - controller
      summary: nsxControllerStatsList
      description: |+
        Retrieve NSX Controller system statistics.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/techsupportlogs:
    get:
      tags:
        - controller
      summary: nsxControllerLogsRead
      description: |+
        Retrieve controller logs. Response content type is
        application/octet-stream and response header is filename. This
        streams a fairly large bundle back (possibly hundreds of MB).


        Parameters:

      parameters:
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/syslog:
    post:
      tags:
        - controller
      summary: nsxControllerSyslogCreate
      description: |+
        Add controller syslog exporter on the controller.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerSyslogServer>
                  <syslogServer></syslogServer>
                  <port></port>
                  <protocol></protocol>
                  <level></level>
                </controllerSyslogServer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - controller
      summary: nsxControllerSyslogRead
      description: |+
        Retrieve details about the syslog exporter on the controller.


        Parameters:

      parameters:
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - controller
      summary: nsxControllerSyslogDelete
      description: |+
        Deletes syslog exporter on the specified controller node.


        Parameters:

      parameters:
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/snapshot:
    get:
      tags:
        - controller
      summary: nsxControllerSnapshotRead
      description: |+
        Take a snapshot of the control cluster from the specified controller
        node.


        Parameters:

      parameters:
        - name: controllerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/cluster:
    get:
      tags:
        - controller
      summary: nsxControllerClusterRead
      description: |+
        Retrieve cluster wide configuration information for controller.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - controller
      summary: nsxControllerClusterUpdate
      description: |+
        Modify cluster wide configuration information for controller.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerConfig>
                  <sslEnabled></sslEnabled>
                </controllerConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/credential:
    put:
      tags:
        - controller
      summary: nsxControllerPasswordUpdate
      description: |+
        Change the NSX controller password.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerCredential>
                  <apiPassword></apiPassword>
                </controllerCredential>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy:
    post:
      tags:
        - deploy
      summary: securityFabricCreate
      description: |+
        Deploy security fabric.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clusterDeploymentConfigs>
                  <clusterDeploymentConfig>
                    <clusterId></clusterId>
                    <datastore></datastore>
                    <services>
                      <serviceDeploymentConfig>
                        <serviceId></serviceId>
                        <dvPortGroup></dvPortGroup>
                        <ipPool></ipPool>
                      </serviceDeploymentConfig>
                    </services>
                  </clusterDeploymentConfig>
                </clusterDeploymentConfigs>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: startTime
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - deploy
      summary: serviceUpgrade
      description: |+
        Upgrade service to recent version.

        The datastore, dvPortGroup, and ipPool variables should either not be
        specified or have same value as provided at time of deployment.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clusterDeploymentConfigs>
                  <clusterDeploymentConfig>
                    <clusterId></clusterId>
                    <datastore></datastore>
                    <services>
                      <serviceDeploymentConfig>
                        <serviceId></serviceId>
                        <serviceInstanceId></serviceInstanceId>
                        <dvPortGroup></dvPortGroup>
                        <ipPool></ipPool>
                      </serviceDeploymentConfig>
                    </services>
                  </clusterDeploymentConfig>
                </clusterDeploymentConfigs>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: startTime
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/service/{serviceID}:
    get:
      tags:
        - deploy
      summary: serviceRead
      description: |+
        Retrieve all clusters on which the service is installed.

        Parameters:

        serviceID: Specified service.

      parameters:
        - name: serviceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - deploy
      summary: serviceDelete
      description: |+
        Uninstall specified service from specified clusters.

        Parameters:

        serviceID: Specified service.

      parameters:
        - name: clusters
          in: query
          schema:
            type: string
        - name: startTime
          in: query
          schema:
            type: string
        - name: serviceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/service/{serviceID}/dependsOn:
    get:
      tags:
        - deploy
      summary: serviceDependencyRead
      description: |+
        Retrieve service on which the specified service depends.


        Parameters:

      parameters:
        - name: serviceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/cluster/{clusterID}:
    get:
      tags:
        - deploy
      summary: serviceClusterRead
      description: |+
        Retrieve all services deployed along with their status.

        Parameters:

        clusterID: Cluster ID

      parameters:
        - name: clusterID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - deploy
      summary: serviceClusterDelete
      description: >+
        Uninstall a service. Fails if you try to remove a service that another

        service depends on.


        In order to uninstall services in any order, set parameter
        ignoreDependency to true.



        Parameters:


        clusterID: Cluster ID

      parameters:
        - name: services
          in: query
          schema:
            type: string
        - name: startTime
          in: query
          schema:
            type: string
        - name: clusterID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/cluster/{clusterID}/service/{serviceID}:
    get:
      tags:
        - deploy
      summary: serviceDetailsRead
      description: |+
        Retrieve detailed information about the service.

        Parameters:

        serviceID: Service ID on cluster

      parameters:
        - name: clusterID
          in: path
          schema:
            type: string
          required: true
        - name: serviceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration:
    post:
      tags:
        - endpointsecurity
      summary: guestIntrospectionVendorCreate
      description: |+
        Register the vendor of an endpoint protection solution. Specify the
        following parameters in the request.

        | Name            | Comments |
        |-----------------|------------|
        |**vendorId**     | VMware-assigned ID for the vendor. |
        |**vendorTitle**  | Vendor-specified title. |
        |**vendorDescription** | Vendor-specified description. |


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <VendorInfo>
                  <id>vendorId</id>
                  <title>vendorTitle</title>
                  <description>vendorDescription</description>
                </VendorInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/vendors:
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionVendorsInfoList
      description: |+
        Retrieve the list of all registered Guest Introspection vendors.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}:
    post:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionCreate
      description: >+
        Register an endpoint protection solution. Specify the following
        parameters in the request.


        | Name            | Comments |

        |-----------------|------------|

        |**solutionAltitude**     | VMware-assigned altitude for the solution.
        *Altitude* is a number that VMware assigns to uniquely identify the
        solution. The altitude describes the type of solution and the order in
        which the solution receives events relative to other solutions on the
        same host. |

        |**solutionTitle**  | Vendor-specified title for the solution. |

        |**solutionDescription** | Vendor-specified description of the solution.
        |



        Parameters:


        vendorID: VMware-assigned ID for the vendor.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <SolutionInfo>
                  <altitude>solutionAltitude</altitude>
                  <title>solutionTitle</title>
                  <description>solutionDescription</description>
                </SolutionInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionVendorInfoRead
      description: |+
        Retrieve registration information for a Guest Introspection vendor.

        Parameters:

        vendorID: VMware-assigned ID for the vendor.

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - endpointsecurity
      summary: guestIntrospectionVendorDelete
      description: |+
        Unregister a Guest Introspection vendor.

        Parameters:

        vendorID: VMware-assigned ID for the vendor.

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}/solutions:
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionsInfoRead
      description: >+
        Get registration information for all endpoint protection solutions for a
        Guest Introspection vendor.



        Parameters:

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}/{altitude}:
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionInfoRead
      description: >+
        Get registration information for an endpoint protection solution.


        Parameters:


        altitude: VMware-assigned number that uniquely identifies a solution.
        Describes

        the type of solution and the order in which the solution receives

        events relative to other solutions on the same host.


      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionDelete
      description: >+
        Unregister an endpoint protection solution.


        Parameters:


        altitude: VMware-assigned number that uniquely identifies a solution.
        Describes

        the type of solution and the order in which the solution receives

        events relative to other solutions on the same host.


      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}/{altitude}/location:
    post:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionIPPortUpdate
      description: |+
        Set the IP address and port on the vNIC host for an endpoint
        protection solution.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <LocationInfo>
                  <ip>solutionIpAddress</ip>
                  <port>solutionIPPort</port>
                </LocationInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionIPPortRead
      description: |+
        Get the IP address and port on the vNIC host for an endpoint
        protection solution.


        Parameters:

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionIPPortDelete
      description: |+
        Unset the IP address and port for an endpoint protection
        solution.


        Parameters:

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation:
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionActivationRead
      description: |+
        Retrieve activation information for all activated security VMs on the
        specified host.


        Parameters:

      parameters:
        - name: hostId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation/{vendorID}/{solutionID}:
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionActivatedVMsRead
      description: >+
        Retrieve a list of activated security VMs for an endpoint protection
        solution.



        Parameters:


        vendorID: VMware-assigned ID for the vendor.


        solutionID: solution ID for the endpoint protection solution.

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: solutionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation/{vendorID}/{altitude}:
    post:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionActivateRegistered
      description: >+
        Activate an endpoint protection solution that has been registered

        and located. Specify the following parameter in the request body.


        | Name            | Comments |

        |-----------------|------------|

        |**svmMoid**     | Managed object ID of the virtual machine of the
        activated endpoint protection solution. |



        Parameters:


        vendorID: VMware-assigned ID for the vendor.


        altitude: VMware-assigned number to uniquely identify a solution.
        Describes the

        type of solution and the order in which the solution receives events

        relative to other solutions on the same host.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ActivationInfo>
                  <moid>svmMoid</moid>
                </ActivationInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation/{vendorID}/{altitude}/{moid}:
    get:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionActivationStatusRead
      description: >+
        Retrieve the endpoint protection solution activation status, either true
        (activated) or false (not activated).


        Parameters:


        moid: Managed object reference of a VM.

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
        - name: moid
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - endpointsecurity
      summary: guestIntrospectionSolutionDeactivate
      description: |+
        Deactivate an endpoint protection solution on a host.

        Parameters:

        moid: Managed object reference of a VM.

      parameters:
        - name: vendorID
          in: path
          schema:
            type: string
          required: true
        - name: altitude
          in: path
          schema:
            type: string
          required: true
        - name: moid
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways:
    post:
      tags:
        - hardwaregateways
      summary: hardwareGatewayCreate
      description: |+
        Install a hardware gateway.

        **bfdEnabled** is true by default.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewaySpec>
                  <name></name>
                  <description></description>
                  <certificate></certificate>
                  <bfdEnabled></bfdEnabled>
                </hardwareGatewaySpec>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewaysList
      description: |+
        Retrieve information about all hardware gateways.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/{hardwareGatewayId}:
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewayRead
      description: |+
        Retrieve information about the specified hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        hardwareGatewayId: Object ID of the hardware gateway.

      parameters:
        - name: hardwareGatewayId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - hardwaregateways
      summary: hardwareGatewayUpdate
      description: |+
        Update the specified hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        hardwareGatewayId: Object ID of the hardware gateway.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewaySpec>
                  <name></name>
                  <description></description>
                  <certificate></certificate>
                  <bfdEnabled></bfdEnabled>
                </hardwareGatewaySpec>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: hardwareGatewayId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - hardwaregateways
      summary: hardwareGatewayDelete
      description: |+
        Delete the specified hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        hardwareGatewayId: Object ID of the hardware gateway.

      parameters:
        - name: hardwareGatewayId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/{hardwareGatewayId}/switches:
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewaySwitchesList
      description: |+
        Retrieve information about switches on the specified hardware
        gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
        - name: hardwareGatewayId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/{hardwareGatewayId}/switches/{switchName}/switchports:
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewaySwitchPortsList
      description: |+
        Retrive information about the hardware gateway switch ports for
        the specified switch and hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
        - name: hardwareGatewayId
          in: path
          schema:
            type: string
          required: true
        - name: switchName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/replicationcluster:
    put:
      tags:
        - hardwaregateways
      summary: hardwareGatewayReplicationClusterUpdate
      description: |+
        Update the hardware gateway replication cluster.

        Add or remove hosts on a replication cluster.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <replicationCluster>
                  <hosts>
                    <basicinfo>
                      <objectId>host-20</objectId>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-21</objectId>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-26</objectId>
                    </basicinfo>
                  </hosts>
                </replicationCluster>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: appplication/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewayReplicationClusterRead
      description: |+
        Retrieve information about the hardware gateway replication cluster.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings:
    post:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBindingCreate
      description: |+
        Create a hardware gateway binding.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayBinding>
                  <hardwareGatewayId></hardwareGatewayId>
                  <vlan></vlan>
                  <switchName></switchName>
                  <portName></portName>
                </hardwareGatewayBinding>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBindingsList
      description: |+
        Retrieve information about hardware gateway bindings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
        - name: hardwareGatewayId
          in: query
          schema:
            type: string
        - name: vni
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings/{bindingId}:
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBindingRead
      description: |+
        Retrieve information about the specified hardware gateway binding.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        bindingId: hardware gateway binding ID.

      parameters:
        - name: bindingId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBindingUpdate
      description: >+
        Update the specified hardware gateway binding.


        You can update the binding parameters. This API will fail if:

        * the specified *hardwareGatewayId* does not exist.

        * the specified logical switch (*virtualWire*) is not present or there
        is a software
          gateway on the binding.
        * the new binding value is a duplicate of an existing binding.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method introduced.



        Parameters:


        bindingId: hardware gateway binding ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayBinding>
                  <hardwareGatewayId>hardwaregateway1</hardwareGatewayId>
                  <vlan>201</vlan>
                  <switchName>s1</switchName>
                  <portname>s1</portname>
                  <virtualWire>virtualwire-1</virtualWire>
                </hardwareGatewayBinding>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: bindingId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBindingDelete
      description: |+
        Delete the specified hardware gateway binding.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        bindingId: hardware gateway binding ID.

      parameters:
        - name: bindingId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings/{bindingId}/statistic:
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBindingStatisticRead
      description: |+
        Retrieve statistics for the specified hardware gateway binding.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
        - name: bindingId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings/manage:
    post:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBindingsManageOperations
      description: |+
        Manage hardware gateway binding objects.

        Use this API to attach, detach, and update multiple bindings in a
        single API call.  This API accepts three lists for add, update, and
        delete. Each list accepts a hardwareGatewayManageBindingsItem with a
        full description of the new binding with its objectID. This API
        handles a maximum of 100 HardwareGatewayManageBindingsItem objects
        for each of the Add/Update/Delete lists.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayManageBindings>
                  <addItems>
                    <hardwareGatewayManageBindingItem>
                      <hardwareGatewayId></hardwareGatewayId>
                      <virtualWireId></virtualWireId>
                      <switchName></switchName>
                      <portname></portname>
                      <vlan></vlan>
                      <virtualWire></virtualWire>
                    </hardwareGatewayManageBindingItem>
                  </addItems>
                  <updateItems>
                    <hardwareGatewayManageBindingItem>
                      <objectId></objectId>
                      <hardwareGatewayId></hardwareGatewayId>
                      <virtualWireId></virtualWireId>
                      <switchName></switchName>
                      <portname></portname>
                      <vlan></vlan>
                      <virtualWire></virtualWire>
                    </hardwareGatewayManageBindingItem>
                  </updateItems>
                  <deleteItems>
                    <hardwareGatewayManageBindingItem>
                      <objectId></objectId>
                    </hardwareGatewayManageBindingItem>
                  </deleteItems>
                </hardwareGatewayManageBindings>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bfd/config:
    put:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBfdConfigUpdate
      description: |+
        Update global hardware gateway BFD configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayBfdParams>
                  <bfdEnabled>true</bfdEnabled>
                  <probeInterval>100</probeInterval>
                </hardwareGatewayBfdParams>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBfdConfigRead
      description: |+
        Retrieve global hardware gateway BFD configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bfd/status:
    get:
      tags:
        - hardwaregateways
      summary: hardwareGatewayBfdStatusRead
      description: |+
        Retrieve hardware gateway BFD tunnel status for all tunnel
        endpoints, including hosts and hardware gateways.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/inventory/host/{hostId}/connection/status:
    get:
      tags:
        - inventory
      summary: inventoryStatusHostRead
      description: >+
        Retrieve the status of the specified host.


        History:


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. Introduced **hostToControllerConnectionErrors**
        array.<br>Deprecated **fullSyncCount** parameter. Parameter is still
        present, but always has value of -1.



        Parameters:


        hostId: ID of the host to check.

      parameters:
        - name: hostId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/inventory/hosts/connection/status:
    get:
      tags:
        - inventory
      summary: inventoryStatusHostsList
      description: >+
        Retrieve the status of a list of hosts.


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. Introduced **hostToControllerConnectionErrors**
        array.<br>Deprecated **fullSyncCount** parameter. Parameter is still
        present, but always has value of -1.



        Parameters:

      parameters:
        - name: hostId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipset/scope/{scopeMoref}:
    get:
      tags:
        - ipset
      summary: ipsetListList
      description: >+
        Retrieve all configured IPSets


        Parameters:


        scopeMoref: For scopeMoref use "globalroot-0" for non-universal IP sets
        and use

        "universalroot-0" for universal IP sets.


      parameters:
        - name: scopeMoref
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipset/{scopeMoref}:
    post:
      tags:
        - ipset
      summary: ipsetCreateCreate
      description: >+
        Create a new IP set.


        Parameters:


        scopeMoref: For scopeMoref use "globalroot-0" for non-universal IP sets
        and use

        "universalroot-0" for universal IP sets.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <value></value>
                  <inheritanceAllowed></inheritanceAllowed>
                </ipset>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeMoref
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipset/{ipsetId}:
    get:
      tags:
        - ipset
      summary: ipsetRead
      description: |+
        Retrieve an individual IP set.

        Parameters:

        ipsetId: The IP set to be queried or changed.

      parameters:
        - name: ipsetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - ipset
      summary: ipsetUpdate
      description: |+
        Modify an existing IP set.

        Parameters:

        ipsetId: The IP set to be queried or changed.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <objectTypeName></objectTypeName>
                  <value></value>
                </ipset>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: ipsetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - ipset
      summary: ipsetDelete
      description: |+
        Delete an IP set.

        Parameters:

        ipsetId: The IP set to be queried or changed.

      parameters:
        - name: force
          in: query
          schema:
            type: string
        - name: ipsetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/taskservice/job:
    get:
      tags:
        - job
      summary: taskFrameworkCriteria
      description: |+
        Query job instances by criterion.

        Parameters:

      parameters:
        - name: startIndex
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortOrderAscending
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/taskservice/job/{jobId}:
    get:
      tags:
        - job
      summary: taskFrameworkJobsRead
      description: |+
        Retrieve all job instances for the specified job ID.

        Parameters:

        jobId: Specified job ID.

      parameters:
        - name: jobId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/macset/{macsetId}:
    get:
      tags:
        - macset
      summary: macsetRead
      description: >+
        Retrieve details about a MAC address set.


        Parameters:


        macsetId: Specified MAC address set ID (can be retrieved by listing the
        MAC

        address set on a scope).


      parameters:
        - name: macsetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - macset
      summary: macsetUpdate
      description: >+
        Modify an existing MAC address set.


        Parameters:


        macsetId: Specified MAC address set ID (can be retrieved by listing the
        MAC

        address set on a scope).


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <macset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <value></value>
                </macset>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: macsetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - macset
      summary: macsetDelete
      description: >+
        Delete a MAC address set.


        Parameters:


        macsetId: Specified MAC address set ID (can be retrieved by listing the
        MAC

        address set on a scope).


      parameters:
        - name: force
          in: query
          schema:
            type: string
        - name: macsetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/macset/scope/{scopeId}:
    post:
      tags:
        - macset
      summary: macsetScopesCreate
      description: >+
        Create a MAC address set on the specified scope.


        Parameters:


        scopeId: Can be "globalroot-0", "universalroot-0" or datacenterId in
        upgrade

        use cases. Universal MAC address sets are read-only from secondary

        managers.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <macset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <value></value>
                </macset>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - macset
      summary: macsetScopesRead
      description: >+
        List MAC address sets on the specified scope.


        Parameters:


        scopeId: Can be "globalroot-0", "universalroot-0" or datacenterId in
        upgrade

        use cases. Universal MAC address sets are read-only from secondary

        managers.


      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/xvs/networks/{ID}/features:
    get:
      tags:
        - network-features
      summary: arpMACRead
      description: |+
        Retrieve IP discovery and MAC learning information.

        Parameters:

        ID: dvPortGroup MOID or logical switch (virtual wire) ID.

      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - network-features
      summary: arpMACUpdate
      description: >+
        Enable or disable IP discovery and MAC learning.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. IP discovery can be disabled on secondary NSX
        Managers.



        Parameters:


        ID: dvPortGroup MOID or logical switch (virtual wire) ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <networkFeatureConfig>
                  <ipDiscoveryConfig>
                    <enabled></enabled>
                  </ipDiscoveryConfig>
                  <macLearningConfig>
                    <enabled></enabled>
                  </macLearningConfig>
                </networkFeatureConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/configure:
    post:
      tags:
        - nwfabric
      summary: nwfabricConfigCreate
      description: >+
        Install network fabric or VXLAN.


        This method can be used to perform the following tasks: 

        * Install Network Virtualization Components

        * Configure VXLAN

        * Configure VXLAN with LACPv2

        * Reset Communication Between NSX Manager and a Host or Cluster


        **Parameter Information**


        | Name | Comments |

        |------|----------|

        |**resourceId** | vCenter MOB ID of cluster. For example, *domain-7*. A
        host can be specified when resetting communication. For example,
        *host-24*. |

        |**featureId** | Feature to act upon. Omit for network virtualization
        components operations. Use *com.vmware.vshield.vsm.vxlan* for VXLAN
        operations, *com.vmware.vshield.vsm.messagingInfra* for message bus
        operations.|

        |**ipPoolId** | Used for VXLAN installation. If not specified, DHCP is
        used for VTEP address assignment.|

        |**teaming** | Used for VXLAN installation. Options are
        *FAILOVER_ORDER*, *ETHER_CHANNEL*, *LACP_ACTIVE*, *LACP_PASSIVE*,
        *LOADBALANCE_LOADBASED*, *LOADBALANCE_SRCID*, *LOADBALANCE_SRCMAC*,
        *LACP_V2*|

        |**uplinkPortName** | The *uplinkPortName* as specified in vCenter.|


        ### Install Network Virtualization Components


        `POST /api/2.0/nwfabric/configure`


        ```

        <nwFabricFeatureConfig>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
          </resourceConfig>
        </nwFabricFeatureConfig>

        ```


        ### Configure VXLAN


        `POST /api/2.0/nwfabric/configure`


        ```

        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
            <configSpec class="clusterMappingSpec">
              <switch>
                <objectId>DVS MOID</objectId></switch>
                <vlanId>0</vlanId>
                <vmknicCount>1</vmknicCount>
                <ipPoolId>IPADDRESSPOOL ID</ipPoolId>
            </configSpec>
          </resourceConfig>
          <resourceConfig>
            <resourceId>DVS MOID</resourceId>
            <configSpec class="vdsContext">
              <switch>
                  <objectId>DVS MOID</objectId>
              </switch>
              <mtu>1600</mtu>
              <teaming>ETHER_CHANNEL</teaming>
            </configSpec>
          </resourceConfig>
        </nwFabricFeatureConfig>

        ```


        ### Configure VXLAN with LACPv2


        `POST /api/2.0/nwfabric/configure`


        ```

        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
            <configSpec class="clusterMappingSpec">
              <switch>
                <objectId>DVS MOID</objectId>
              </switch>
              <vlanId>0</vlanId>
              <vmknicCount>1</vmknicCount>
            </configSpec>
          </resourceConfig>
          <resourceConfig>
            <resourceId>DVS MOID</resourceId>
            <configSpec class="vdsContext">
              <switch>
                <objectId>DVS MOID</objectId>
              </switch>
              <mtu>1600</mtu>
              <teaming>LACP_V2</teaming>
              <uplinkPortName>LAG NAME</uplinkPortName>
            </configSpec>
          </resourceConfig>
        </nwFabricFeatureConfig>

        ```


        ### Reset Communication Between NSX Manager and a Host or Cluster


        `POST /api/2.0/nwfabric/configure?action=synchronize`


        ``` 

        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.messagingInfra</featureId>
          <resourceConfig>
            <resourceId>resourceId</resourceId>
          </resourceConfig>
        </nwFabricFeatureConfig> 

        ```



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nwFabricFeatureConfig>
                  <featureId>com.vmware.vshield.vsm.vxlan</featureId>
                  <resourceConfig>
                    <resourceId>CLUSTER MOID</resourceId>
                    <configSpec class="clusterMappingSpec">
                      <switch>
                        <objectId>DVS MOID</objectId></switch>
                        <vlanId>0</vlanId>
                        <vmknicCount>1</vmknicCount>
                        <ipPoolId>IPADDRESSPOOL ID</ipPoolId>
                    </configSpec>
                  </resourceConfig>
                </nwFabricFeatureConfig> 
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - nwfabric
      summary: nwfabricConfigUpdate
      description: |+
        Upgrade Network virtualization components.
        _
        This API call can be used to upgrade network virtualization components.
        After NSX Manager is upgraded, previously prepared clusters must have
        the 6.x network virtualization components installed.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nwFabricFeatureConfig>
                  <resourceConfig>
                    <resourceId>CLUSTER MOID</resourceId>
                  </resourceConfig>
                </nwFabricFeatureConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - nwfabric
      summary: nwfabricConfigDelete
      description: >+
        Remove VXLAN or network virtualization components.


        Removing network virtualization components removes previously

        installed VIBs, tears down NSX Manager to ESXi messaging, and removes

        any other network fabric dependent features such as logical switches.

        If a feature such as logical switches is being used in your

        environment, this call fails.


        Removing VXLAN does not remove the network virtualization components

        from the cluster.


        | Name | Comments |

        |------|----------|

        |**resourceId** | vCenter MOB ID of cluster. For example, domain-7.|

        |**featureId** | Feature to act upon. Omit for network virtualization
        components operations. Use *com.vmware.vshield.vsm.vxlan* for VXLAN
        operations.|


        ### Remove Network Virtualization Components


        ```

        <nwFabricFeatureConfig>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
          </resourceConfig>
        </nwFabricFeatureConfig>

        ```


        ### Remove VXLAN


        ```

        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
           </resourceConfig>
        </nwFabricFeatureConfig>

        ```


        ### Remove VXLAN with vDS context


        ```

        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
            <configSpec class="map">
              <entry>
                <keyclass="java.lang.String">vxlan</key>
                <valueclass="java.lang.String">cascadeDeleteVdsContext</value>
              </entry>
            </configSpec>
          </resourceConfig>
        </nwFabricFeatureConfig>

        ```



        Parameters:

      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/features:
    get:
      tags:
        - nwfabric
      summary: nwfabricFeaturesList
      description: |+
        Retrieves all network fabric features available on the cluster. Multiple
        **featureInfo** sections may be returned.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/status:
    get:
      tags:
        - nwfabric
      summary: nwfabricStatusRead
      description: |+
        Retrieve the network fabric status of the specified resource.


        Parameters:

      parameters:
        - name: resource
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/status/child/{parentResourceID}:
    get:
      tags:
        - nwfabric
      summary: childStatusRead
      description: >+
        Retrieve the network fabric status of child resources of the specified
        resource.



        Parameters:


        parentResourceID: Parent resource ID

      parameters:
        - name: parentResourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/status/alleligible/{resourceType}:
    get:
      tags:
        - nwfabric
      summary: statusResourceTypeRead
      description: |+
        Retrieve status of resources by criterion.


        Parameters:

        resourceType: Valid resource type

      parameters:
        - name: resourceType
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/clusters/{clusterID}:
    get:
      tags:
        - nwfabric
      summary: nwfabricClustersRead
      description: |+
        Retrieve the locale ID for the specified cluster.

        Parameters:

        clusterID: Cluster ID.

      parameters:
        - name: clusterID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - nwfabric
      summary: nwfabricClustersUpdate
      description: |+
        Update the locale ID for the specified cluster.

        Parameters:

        clusterID: Cluster ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nwFabricClusterConfig>
                  <localeId></localeId>
                </nwFabricClusterConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: clusterID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - nwfabric
      summary: nwfabricClustersDelete
      description: |+
        Delete locale ID for the specified cluster.

        Parameters:

        clusterID: Cluster ID.

      parameters:
        - name: clusterID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/hosts/{hostID}:
    get:
      tags:
        - nwfabric
      summary: nwfabricHostsRead
      description: |+
        Retrieve the locale ID for the specified host.

        Parameters:

        hostID: Host ID.

      parameters:
        - name: hostID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - nwfabric
      summary: nwfabricHostsUpdate
      description: |+
        Update the locale ID for the specified host.

        Parameters:

        hostID: Host ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nwFabricHostConfig>
                  <localeId></localeId>
                </nwFabricHostConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: hostID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - nwfabric
      summary: nwfabricHostsDelete
      description: |+
        Delete the locale ID for the specified host.

        Parameters:

        hostID: Host ID.

      parameters:
        - name: hostID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy:
    post:
      tags:
        - policy
      summary: securityPolicyCreate
      description: >+
        Create a security policy.


        When creating a security policy, a parent security policy can be

        specified if required. The security policy inherits services from the

        parent security policy. Security group bindings and actions can also

        be specified while creating the policy. Note that execution order of

        actions in a category is implied by their order in the list. The

        response of the call has Location header populated with the URI using

        which the created object can be fetched.


        Ensure that:

        * the required VMware built in services (such as Distributed Firewall
          and Endpoint) are installed. See *NSX Installation Guide*.
        * the required partner services have been registered with NSX Manager.

        * the required security groups have been created.


        Tags related to Service Composer, security policies, and security

        groups:

        Common Tags

        * **actionType** - Defines the type of action belonging to a given

        executionOrderCategory

        * **executionOrderCategory** - Category to which the action belongs to

        (endpoint, firewall or traffic_steering)

        * **isActive** - In a security policy hierarchy, an action within a
        policy

        may or may not be active based on the

        precedence of the policy or usage of isActionEnforced flag in that

        hierarchy

        * **isActionEnforced** - Enforces an action of a parent policy on its

        child policies for a given actionType and

        executionOrderCategory. Note that in a policy hierarchy, for a given

        actionType and executionOrderCategory, there can be only one action

        which can be marked as enforced.

        * **isEnabled** - Indicates whether an action is enabled

        * **secondarySecurityGroup** - Applicable for actions which need
        secondary

        security groups, say a

        source-destination firewall rule

        * **securityPolicy** - Parent policy in an action

        Output only Tags

        * **executionOrder** - Defines the sequence in which actions belonging
        to

        an executionOrderCategory are

        executed. Note that this is not an input parameter and its value is

        implied by the index in the list.

        Firewall Category Tags

        * **action** - Allow or block the traffic

        * **applications** - Applications / application groups on which the
        rules

        are to be applied

        * **direction** - Direction of traffic towards primary security group.

        Possible values: inbound, outbound, intra

        * **logged** - Flag to enable logging of the traffic that is hit by this

        rule

        * **outsideSecondaryContainer** - Flag to specify outside i.e. outside

        securitygroup-3

        Endpoint Category Tags

        * **serviceId** - ID of the service (as registered with the service

        insertion module). If this tag is null, the

        functionality type (as defined in actionType tag) is not applied which

        will also result in blocking the actions (of given functionality type)

        that are inherited from the parent security policy. This is true if

        there is no action of enforce type.

        * **invalidServiceId** - Flag to indicate that the service that was

        referenced in this rule is deleted, which make

        the rule ineffective (or deviate from the original intent that existed

        while configuring the rule). You must either modify this rule by

        adding correct Service or delete this rule.

        * **serviceName** -Name of the service

        * **serviceProfile** - Profile to be referenced in Endpoint rule.

        * **invalidServiceProfile** - Flag to indicate that the service profile

        that was referenced in this rule is deleted, which makes

        the rule ineffective (or deviate from the original intent that existed

        while configuring the rule). You must either modify this rule by

        adding correct Service Profile or delete this rule.

        The following tags are deprecated:

        * **vendorTemplateId**

        * **invalidVendorTemplateId**

        * **vendorTemplateName**

        Traffic Steering/NetX Category Tags

        * **redirect** - Flag to indicate whether to redirect the traffic or not

        * **serviceProfile** - Service profile for which redirection is being

        configured

        * **logged** - Flag to enable logging of the traffic that is hit by this

        rule



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityPolicy>
                  <name>name</name>
                  <description>decription</description>
                  <precedence></precedence>
                  <parent>
                    <objectId></objectId>
                  </parent>
                  <securityGroupBinding>
                    <objectId></objectId>
                  </securityGroupBinding>
                  <securityGroupBinding>
                    ...
                  </securityGroupBinding>
                  ...
                  ...
                  <securityGroupBinding>
                    ...
                  </securityGroupBinding>
                  <actionsByCategory>
                    <category>firewall</category>
                    <action class="firewallSecurityAction">
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <secondarySecurityGroup>
                        <objectId></objectId>
                      </secondarySecurityGroup>
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      ...
                      ...
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      <applications>
                        <application>
                          <objectId></objectId>
                        </application>
                        <applicationGroup>
                          <objectId></objectId>
                        </applicationGroup>
                        ...
                        ...
                      </applications>
                      <logged></logged>
                      <action></action>
                      <direction></direction>
                      <outsideSecondaryContainer></outsideSecondaryContainer>
                    </action>
                    <action>
                      ...
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>endpoint</category>
                    <action class="endpointSecurityAction">
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <serviceId></serviceId>
                      <serviceProfile>
                        <objectId>serviceprofile-1</objectId>
                        ...
                      </serviceProfile>
                      <invalidServiceProfile>false</invalidServiceProfile>
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>traffic_steering</category>
                    <action class="trafficSteeringSecurityAction">
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <logged></logged>
                      <redirect></redirect>
                      <serviceProfile>
                        <objectId></objectId>
                      </serviceProfile>
                    </action>
                  </actionsByCategory>
                </securityPolicy>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/status:
    get:
      tags:
        - policy
      summary: securityPolicyStatusRead
      description: |+
        Retrieve the consolidated status of Service Composer.

        The possible return of value for status are: *in_sync*,
        *in_progress*, *out_of_sync*, and *pending*.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/alarms/all:
    get:
      tags:
        - policy
      summary: securityPolicyAlarmsAllList
      description: |+
        Retrieve all system alarms that are raised at Service Composer
        level and policy level.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/serviceprovider/firewall:
    get:
      tags:
        - policy
      summary: serviceComposerFirewallAppliedToRead
      description: |+
        Retrieve the Service Composer firewall applied to setting.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - policy
      summary: serviceComposerFirewallAppliedToUpdate
      description: |+
        Update the Service Composer firewall applied to setting.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <SecurityPolicyFirewallConfig>
                  <appliedTo>policy_security_group</appliedTo>
                </SecurityPolicyFirewallConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/{ID}:
    get:
      tags:
        - policy
      summary: securityPolicyIDRead
      description: |+
        Retrieve security policy information.


        Parameters:

        ID: ID of desired security policy (or 'all' to for all security
        policies).


      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - policy
      summary: securityPolicyIDUpdate
      description: |+
        Edit a security policy.

        To update a security policy, you must first fetch it.
        Then edit the received XML and pass it back as the input. The
        specified configuration replaces the current configuration.

        Security group mappings provided in the PUT call replaces the
        security group mappings for the security policy. To remove all
        mappings, delete the securityGroupBindings parameter.

        You can add or update actions for the security policy by editing the
        actionsByCategory parameter. To remove all actions (belonging to all
        categories), delete the actionsByCategory parameter. To remove
        actions belonging to a specific category, delete the block for that
        category.


        Parameters:

        ID: ID of desired security policy (or 'all' to for all security
        policies).


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityPolicy>
                  <securityPolicy>
                    <name></name>
                    <description></description>
                    <precedence></precedence>
                    <parent>
                      <objectId></objectId>
                    </parent>
                    <securityGroupBinding>
                      <objectId></objectId>
                    </securityGroupBinding>
                    <actionsByCategory>
                      <category></category>
                      <action class="">
                        <name></name>
                        <description></description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <secondarySecurityGroup>
                          <objectId></objectId>
                        </secondarySecurityGroup>
                        <applications>
                          <application>
                            <objectId></objectId>
                          </application>
                          <applicationGroup>
                            <objectId></objectId>
                          </applicationGroup>
                        </applications>
                        <logged></logged>
                        <scope>
                          <id></id>
                          <name></name>
                          <objectTypeName></objectTypeName>
                        </scope>
                      </action>
                      <direction></direction>
                      <outsideSecondaryContainer></outsideSecondaryContainer>
                    </actionsByCategory>
                  </securityPolicy>
                </securityPolicy>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - policy
      summary: securityPolicyIDDelete
      description: |+
        Delete a security policy.

        When you delete a security policy, its child security policies and
        all the actions in it are deleted as well.


        Parameters:

        ID: ID of desired security policy (or 'all' to for all security
        policies).


      parameters:
        - name: force
          in: query
          schema:
            type: string
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/{ID}/securityactions:
    get:
      tags:
        - policy
      summary: securityActionsRead
      description: |+
        Retrieve all security actions applicable on a security policy.

        This list includes security actions from associated parent
        security policies, if any. Security actions per Execution Order
        Category are sorted based on the weight of security actions in
        descending order.


        Parameters:

      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/hierarchy:
    post:
      tags:
        - policy
      summary: hierarchyCreate
      description: |+
        Import a security policy configuration

        You can create multiple security policies and parent-child
        hierarchies using the data fetched through export. All objects
        including security policies, security groups and security actions
        are created on a global scope.

        The policy that is being imported needs to be included in the
        request body.

        If a suffix is specified, it is added after the names of the
        security policy, security action, and security group objects in the
        exported XML. The suffix can thus be used to differentiate locally
        created objects from imported ones.

        The location of the newly created security policy objects (multiple
        locations are separated by commas) is populated in the Location
        header of the response.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityPolicyHierarchy>
                  <name></name>
                  <description></description>
                  <securityPolicy></securityPolicy>
                  <securityGroup></securityGroup>
                </securityPolicyHierarchy>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: suffix
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - policy
      summary: hierarchyRead
      description: |+
        Export a Service Composer configuration (along with the
        security groups to which the security policies are mapped).
        You can save the response to a file.  The saved configuration can be
        used as a backup for situations where you may accidentally delete a
        policy configuration, or it can be exported for use in another NSX
        Manager environment.

        If a prefix is specified, it is added before the names of the
        security policy, security action, and security group objects in the
        exported XML. The prefix can thus be used to indicate the remote
        source from where the hierarchy was exported.


        Parameters:

      parameters:
        - name: policyIds
          in: query
          schema:
            type: string
        - name: prefix
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securityaction/category/virtualmachines:
    get:
      tags:
        - policy
      summary: securityActionVMRead
      description: |+
        Retrieve all VirtualMachine objects on which security action of a
        given category and attribute has been applied.


        Parameters:

      parameters:
        - name: attributeKey
          in: query
          schema:
            type: string
        - name: attributeValue
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitygroup/{ID}/securityactions:
    get:
      tags:
        - policy
      summary: securityActionRead
      description: |+
        Retrieve all security actions applicable on a security group.

        Retrieve all security actions applicable on a security group for all
        ExecutionOrderCategories. The list is sorted based on the weight of
        security actions in descending order.  The **isActive** tag indicates
        if a securityaction will be applied (by the enforcement engine) on the
        security group.


        Parameters:

        ID: Specified security group.

      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/virtualmachine/{ID}/securityactions:
    get:
      tags:
        - policy
      summary: vmApplicableSecurityActionRead
      description: |+
        Retrieve the security actions applicable on a virtual machine.


        Parameters:

        ID: VM ID

      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/serviceprovider/firewall:
    get:
      tags:
        - policy
      summary: serviceComposerDFWRead
      description: >+
        If Service Composer goes out of sync with Distributed Firewall, you

        must re-synchronize Service Composer rules with firewall rules. If

        Service Composer stays out of sync, firewall configuration may not

        stay enforced as expected.


        This GET method can perform the following functions, depending on the

        request body provided. **Note:** Some REST clients do not allow you to

        specify a request body with a GET request.


        ### Check if Service Composer firewall and Distributed Firewall are in
        sync


        **Note: Deprecated.** Use `GET
        /2.0/services/policy/securitypolicy/status` instead. 


        * If they are in sync, the response body does not contain any data.  

        * If they are out of sync, the response body contains the unix timestamp
        representing the time since when Service Composer firewall is out of
        sync.


        ```

        <keyValues>
          <keyValue>
            <key>getServiceComposerFirewallOutOfSyncTimestamp</key>
          </keyValue>
        </keyValues>

        ```


        ### Synchronize Service Composer firewall with Distributed Firewall


        ```

        <keyValues>
          <keyValue>
            <key>forceSync</key>
          </keyValue>
        </keyValues>

        ```


        ### Retrieve the state of the auto save draft property in Service
        Composer


        Retrieve the state of the auto save draft property in Service

        Composer. Response is true or false.


        ```

        <keyValues>
          <keyValue>
            <key>getAutoSaveDraft</key>
          </keyValue>
        </keyValues>

        ```


        ### Change the state of the auto save draft property in Service Composer


        **Note: Deprecated.**


        Change the state of the auto save draft property in Service Composer.

        Provide request body value of true or false.


        ```

        <keyValues>
          <keyValue>
            <key>autoSaveDraft</key>
            <value>false</value>
          </keyValue>
        </keyValues> 

        ```


        **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method updated and some functions deprecated. Changing auto save draft with the **autoSaveDraft** parameter is deprecated, and will be removed in a future release.  <br>The default setting of **autoSaveDraft** is changed from *true* to *false*.<br>Method to check if Service Composer and Distributed Firewall are in sync is deprecated, and will be removed in a future release. Use `GET /2.0/services/policy/securitypolicy/status` instead.


        Parameters:

      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitygroup/{ID}/securitypolicies:
    get:
      tags:
        - policy
      summary: secGroupPoliciesRead
      description: |+
        Retrieve security policies mapped to a security group.

        Parameters:

        ID: Specified security group ID

      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/scope/{scopeId}:
    get:
      tags:
        - pools
      summary: ipPoolsList
      description: |+
        Retrieves all IP pools on the specified scope where the *scopeID* is the
        reference to the desired scope. An example of the *scopeID* is
        globalroot-0.


        Parameters:

        scopeId: For *scopeID* use globalroot-0 or *datacenterId* in upgrade use
        cases.


      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - pools
      summary: ipPoolCreate
      description: |+
        Create a pool of IP addresses. For *scopeId* use globalroot-0 or
        the *datacenterId* in upgrade use cases.


        Parameters:

        scopeId: For *scopeID* use globalroot-0 or *datacenterId* in upgrade use
        cases.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipamAddressPool>
                  <name></name>
                  <prefixLength></prefixLength>
                  <gateway></gateway>
                  <dnsSuffix></dnsSuffix>
                  <dnsServer1></dnsServer1>
                  <dnsServer2></dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <startAddress></startAddress>
                      <endAddress></endAddress>
                    </ipRangeDto>
                  </ipRanges>
                </ipamAddressPool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/{poolId}:
    get:
      tags:
        - pools
      summary: ipPoolRead
      description: |+
        Retrieve details about a specific IP pool.

        Parameters:

        poolId: Specifiy the pool ID as *poolId* in the URI.

      parameters:
        - name: poolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - pools
      summary: ipPoolUpdate
      description: >+
        To modify an IP pool, query the IP pool first. Then modify the output
        and

        send it back as the request body.



        Parameters:


        poolId: Specifiy the pool ID as *poolId* in the URI.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipamAddressPool>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <vsmUuid></vsmUuid>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <extendedAttributes></extendedAttributes>
                  <prefixLength></prefixLength>
                  <gateway></gateway>
                  <dnsSuffix></dnsSuffix>
                  <dnsServer1></dnsServer1>
                  <dnsServer2></dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <id></id>
                      <startAddress></startAddress>
                      <endAddress></endAddress>
                    </ipRangeDto>
                  </ipRanges>
                </ipamAddressPool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: poolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - pools
      summary: ipPoolDelete
      description: |+
        Delete an IP pool.

        Parameters:

        poolId: Specifiy the pool ID as *poolId* in the URI.

      parameters:
        - name: poolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/{poolId}/ipaddresses:
    get:
      tags:
        - pools
      summary: ipPoolIpsRead
      description: |+
        Retrieves all allocated IP addresses from the specified pool.


        Parameters:

      parameters:
        - name: poolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - pools
      summary: ipPoolAllocateIp
      description: |+
        Allocate an IP Address from the pool. Use *ALLOCATE* in the
        **allocationMode** field in the body to allocate the next available
        IP. To allocate a specific one use *RESERVE* and pass the IP to
        reserve in the **ipAddress** fields in the body.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressRequest>
                  <allocationMode>ALLOCATE</allocationMode>
                  <ipAddress>192.168.1.2</ipAddress>
                </ipAddressRequest>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: poolId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/{poolId}/ipaddresses/{ipAddress}:
    delete:
      tags:
        - pools
      summary: ipAddressReleaseDelete
      description: |+
        Release an IP address allocation in the pool.

        Parameters:

        ipAddress: The IP address to release, e.g. '192.168.10.10'


      parameters:
        - name: poolId
          in: path
          schema:
            type: string
          required: true
        - name: ipAddress
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/bulk/{scopeId}:
    post:
      tags:
        - securitygroup
      summary: secGroupBulkCreate
      description: >+
        Create a new security group on a global scope or universal scope with

        membership information.


        Universal security groups are read-only when querying a secondary NSX

        manager.


        When you create a universal security group (on scope

        *universalroot-0*) by default **localMembersOnly** is set to *false*

        which indicates that the universal security group will contain members

        across the cross-vCenter NSX environment.  This is the case in an

        active active environment. You can add the following

        objects to a universal security group with *localMembersOnly=false*

        (active active):

        * IP Address Set

        * MAC Address Set

        * Universal Security Groups with *localMembersOnly=false*


        When you create a universal security group (on scope

        *universalroot-0*) you can set the extendedAttribute

        **localMembersOnly** to *true* to indicate that the universal security

        group will contain members local to that NSX Manager only.  This is

        the case in an active standby environment, because only one NSX

        environment is active at a time, and the same VMs are present in each

        NSX environment. You can add the following objects to a universal

        security group with *localMembersOnly=true* (active standby):

        * Universal Security Tag

        * IP Address Set

        * MAC Address Set

        * Universal Security Groups with *localMembersOnly=true*

        * Dynamic criteria using VM name


        You can set the **localMembersOnly** attribute only when the universal

        security group is created, it cannot be modified afterwards.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Extended attribute **localMembersOnly** introduced.



        Parameters:


        scopeId: For the scopeId use *globalroot-0* for non-universal security
        groups

        and *universalroot-0* for universal security groups.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <vsmUuid></vsmUuid>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <name></name>
                    <revision></revision>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes>
                    <extendedAttribute>
                      <name>localMembersOnly</name>
                      <value>true</value>
                    </extendedAttribute>
                  </extendedAttributes>
                  <member>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes></extendedAttributes>
                  </member>
                  <excludeMember>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes></extendedAttributes>
                  </excludeMember>
                  <dynamicMemberDefinition>
                    <dynamicSet>
                      <operator></operator>
                      <dynamicCriteria>
                        <operator></operator>
                        <key></key>
                        <criteria></criteria>
                        <value></value>
                      </dynamicCriteria>
                    </dynamicSet>
                  </dynamicMemberDefinition>
                </securitygroup>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{scopeId}:
    post:
      tags:
        - securitygroup
      summary: secGroupScopeIdCreate
      description: >+
        Create a new security group, with no membership information specified.

        You can add members later with `PUT

        /2.0/services/securitygroup/bulk/{objectId}`


        When you create a universal security group (on scope

        *universalroot-0*) by default **localMembersOnly** is set to *false*

        which indicates that the universal security group will contain members

        across the cross-vCenter NSX environment.  This is the case in an

        active active environment. You can add the following

        objects to a universal security group with *localMembersOnly=false*

        (active active):

        * IP Address Set

        * MAC Address Set

        * Universal Security Groups with *localMembersOnly=false*


        When you create a universal security group (on scope

        *universalroot-0*) you can set the extendedAttribute

        **localMembersOnly** to *true* to indicate that the universal security

        group will contain members local to that NSX Manager only.  This is

        the case in an active standby environment, because only one NSX

        environment is active at a time, and the same VMs are present in each

        NSX environment. You can add the following objects to a universal

        security group with *localMembersOnly=true* (active standby):

        * Universal Security Tag

        * IP Address Set

        * MAC Address Set

        * Universal Security Groups with *localMembersOnly=true*

        * Dynamic criteria using VM name


        You can set the **localMembersOnly** attribute only when the universal

        security group is created, it cannot be modified afterwards.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Extended attribute **localMembersOnly** introduced.



        Parameters:


        scopeId: For the scopeId use *globalroot-0* for non-universal security
        groups

        and *universalroot-0* for universal security groups.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <name></name>
                  <extendedAttributes>
                    <extendedAttribute>
                      <name>localMembersOnly</name>
                      <value>true</value>
                    </extendedAttribute>
                  </extendedAttributes>
                </securitygroup>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/bulk/{objectId}:
    put:
      tags:
        - securitygroup
      summary: secGroupBulkObjectUpdate
      description: >+
        Update configuration for the specified security group, including
        membership information.



        Parameters:


        objectId: Security group ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <vsmUuid></vsmUuid>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <name></name>
                    <revision></revision>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes></extendedAttributes>
                  <member>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                  </member>
                  <excludeMember>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes></extendedAttributes>
                  </excludeMember>
                  <dynamicMemberDefinition>
                    <dynamicSet>
                      <operator></operator>
                      <dynamicCriteria>
                        <operator></operator>
                        <key></key>
                        <criteria></criteria>
                        <value></value>
                      </dynamicCriteria>
                    </dynamicSet>
                  </dynamicMemberDefinition>
                </securitygroup>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}:
    get:
      tags:
        - securitygroup
      summary: secGroupObjectRead
      description: |+
        Retrieve all members of the specified security group.

        Parameters:

        objectId: Security group ID.

      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - securitygroup
      summary: secGroupObjectUpdate
      description: |+
        Update configuration for the specified security group. Members are not
        updated. You must use `PUT
        /2.0/services/securitygroup/bulk/{objectId}` to update a security
        group membership.


        Parameters:

        objectId: Security group ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <name></name>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes></extendedAttributes>
                  <isUniversal></isUniversal>
                  <inheritanceAllowed></inheritanceAllowed>
                </securitygroup>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - securitygroup
      summary: secGroupObjectDelete
      description: |+
        Delete an existing security group.

        If *force=true* is specified, the object is deleted even if used in
        other configurations, such as firewall rules. If *force=true* is not
        specified, the object is deleted only if it is not used by other
        configuration; otherwise the delete fails.


        Parameters:

        objectId: Security group ID.

      parameters:
        - name: force
          in: query
          schema:
            type: string
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/members/{memberId}:
    put:
      tags:
        - securitygroup
      summary: secGroupMemberUpdate
      description: >+
        Add a new member to the specified security group.



        Parameters:


        memberId: Security group member, can be a vSphere managed object ID or
        NSX

        object ID.


      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: failIfExists
          in: query
          schema:
            type: string
        - name: objectId
          in: path
          schema:
            type: string
          required: true
        - name: memberId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - securitygroup
      summary: secGroupMemberDelete
      description: >+
        Delete member from the specified security group.


        Parameters:


        memberId: Security group member, can be a vSphere managed object ID or
        NSX

        object ID.


      parameters:
        - name: failIfAbsent
          in: query
          schema:
            type: string
        - name: objectId
          in: path
          schema:
            type: string
          required: true
        - name: memberId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/virtualmachines:
    get:
      tags:
        - securitygroup
      summary: secGroupVMNodesRead
      description: >+
        Retrieve list of virtual machine entities that belong to a specific
        security

        group.



        Parameters:

      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/ipaddresses:
    get:
      tags:
        - securitygroup
      summary: secGroupIPNodesRead
      description: |+
        Retrieve list of IP addresses that belong to a specific security
        group.


        Parameters:

      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/macaddresses:
    get:
      tags:
        - securitygroup
      summary: secGroupMacNodesRead
      description: |+
        Retrieve list of MAC addresses that belong to a specific security
        group.


        Parameters:

      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/vnics:
    get:
      tags:
        - securitygroup
      summary: secGroupVnicNodesRead
      description: |+
        Retrieve list of vNICs that belong to a specific security group.


        Parameters:

      parameters:
        - name: objectId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/lookup/virtualmachine/{virtualMachineId}:
    get:
      tags:
        - securitygroup
      summary: secGroupLookupVMRead
      description: |+
        Retrieve list of security groups that the specified virtual machine
        belongs to.


        Parameters:

        virtualMachineId: Specified virtual machine

      parameters:
        - name: virtualMachineId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/internal/scope/{scopeId}:
    get:
      tags:
        - securitygroup
      summary: secGroupInternalRead
      description: |+
        Retrieve all internal security groups on the NSX Manager. These are used
         internally by the system and should not be created or modified by end
        users.


        Parameters:

        scopeId: Specified transport zone (scope)

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/scope/{scopeId}:
    get:
      tags:
        - securitygroup
      summary: secGroupScopeRead
      description: >+
        List all the security groups created on a specific scope.


        Parameters:


        scopeId: scopeId can be "globalroot-0", "universalroot-0" or
        datacenterID /

        portgroupID in upgrade use cases


      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/scope/{scopeId}/memberTypes:
    get:
      tags:
        - securitygroup
      summary: secGroupScopeMembersRead
      description: |+
        Retrieve a list of valid elements that can be added to a security
        group.


        Parameters:

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/scope/{scopeId}/members/{memberType}:
    get:
      tags:
        - securitygroup
      summary: secGroupScopeMemberTypeRead
      description: |+
        Retrieve members of a specific type in the specified scope.

        Parameters:

        memberType: Specific member type

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
        - name: memberType
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag:
    post:
      tags:
        - securitytags
      summary: securityTagCreate
      description: >+
        Create a new security tag.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. **isUniversal** parameter can be set to create a
        universal security tag.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityTag>
                  <objectTypeName>SecurityTag</objectTypeName>
                  <type>
                    <typeName>SecurityTag</typeName>
                  </type>
                  <name>TAG_NAME</name>
                  <isUniversal>true</isUniversal>
                  <description>description of the tag</description>
                  <extendedAttributes></extendedAttributes>
                </securityTag>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - securitytags
      summary: securityTagRead
      description: >+
        Retrieve all security tags.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. Added **isUniversal** query parameter to filter
        universal security tags.



        Parameters:

      parameters:
        - name: isUniversal
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}:
    delete:
      tags:
        - securitytags
      summary: securityTagDeleteDelete
      description: |+
        Delete the specified security tag.

        Parameters:

        tagId: Specified security tag.

      parameters:
        - name: tagId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}/vm:
    get:
      tags:
        - securitytags
      summary: securityTagVMsListList
      description: |+
        Retrieve the list of VMs that have the specified tag attached to
        them.


        Parameters:

      parameters:
        - name: tagId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - securitytags
      summary: securityTagVMsAction
      description: |+
        Attach or detach a security tag to a virtual machine.

        This operation does not check that the virtual machine exists in
        the local inventory. This allows you to attach a universal
        security tag to a virtual machine that is connected to a secondary
        NSX Manager (and therefore is not connected to the primary NSX
        Manager where the call is sent).

        Possible keys for the tagParameter are:
        * instance_uuid
        * bios_uuid
        * vmname

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityTagAssignment>
                  <tagParameter>
                   <key>instance_uuid</key>
                   <value>123e4567-e89b-12d3-a456-426655440000</value>
                  </tagParameter>
                </securityTagAssignment>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: tagId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}/vm/{vmId}:
    put:
      tags:
        - securitytags
      summary: securityTagVMAttach
      description: |+
        Apply a security tag to the specified virtual machine.

        **Note:** this method can attach a universal security tag to a
        virtual machine. However, this method checks that the VM exists
        on the NSX Manager to which the API call is sent. In a
        cross-vCenter active active environment, the VM might exist on
        a secondary NSX Manager, and so the call would fail. 

        You can instead use the `POST
        /api/2.0/services/securitytags/tag/{tagId}/vm?action=attach`
        method to attach universal security tags to a VM that is not
        local to the primary NSX Manager. This method does not check
        that the VM is local to the NSX Manager.


        Parameters:

        vmId: Specify VM using VM managed object ID or VM instance
        UUID.


      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: tagId
          in: path
          schema:
            type: string
          required: true
        - name: vmId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - securitytags
      summary: securityTagVMDetach
      description: |+
        Detach a security tag from the specified virtual machine.


        Parameters:

        vmId: Specify VM using VM managed object ID or VM instance
        UUID.


      parameters:
        - name: tagId
          in: path
          schema:
            type: string
          required: true
        - name: vmId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}/vmDetail:
    get:
      tags:
        - securitytags
      summary: securityTagVMDetailList
      description: |+
        Retrieve details about the VMs that are attached to the
        specified security tag.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      parameters:
        - name: tagId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/vm/{vmId}:
    get:
      tags:
        - securitytags
      summary: securitytagVmIdList
      description: |+
        Retrieve all security tags associated with the specified virtual
        machine.


        Parameters:

        vmId: Specify VM using VM managed object ID or VM instance
        UUID.


      parameters:
        - name: vmId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - securitytags
      summary: securitytagVmMoidAction
      description: |+
        Update security tags associated with the specified virtual machine.

        You can assign multiple tags at a time to the specified VM, or clear
        all assigned tags from the specified VM.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

        vmId: Specify VM using VM managed object ID or VM instance
        UUID.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityTags>
                  <securityTag>
                    <objectId>securitytag-12</objectId>
                  </securityTag>
                  <securityTag>
                    <objectId>securitytag-13</objectId>
                  </securityTag>
                  <securityTag>
                    <objectId>securitytag-14</objectId>
                  </securityTag>
                </securityTags>                  
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: vmId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/selection-criteria:
    get:
      tags:
        - securitytags
      summary: securitytagsCriteriaRead
      description: |+
        Retrieve unique ID section criteria configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - securitytags
      summary: securitytagsCriteriaUpdate
      description: |+
        Configure the unique ID section criteria configuration.

        If you set the selection criteria and assign security tags to VMs, you
        must remove all security tags from VMs before you can change the
        selection criteria.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityTagAssignmentMetadata>
                  <metadata>instance_uuid</metadata>
                </securityTagAssignmentMetadata>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/host/{hostID}/agents:
    get:
      tags:
        - si
      summary: hostAgentsRead
      description: |+
        Retrieves all agents on the specified host. The response body contains
        agent IDs for each agent, which you can use to retrieve details about
        that agent.


        Parameters:

        hostID: Specified host

      parameters:
        - name: hostID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/agent/{agentID}:
    get:
      tags:
        - si
      summary: agentInformationRead
      description: |+
        Retrieve agent (host components and appliances) details.


        Parameters:

        agentID: Specified agent

      parameters:
        - name: agentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deployment/{deploymentunitID}/agents:
    get:
      tags:
        - si
      summary: deploymentAgentsRead
      description: |+
        Retrieve all agents for the specified deployment.

        Parameters:

        deploymentunitID: Specified deployment.

      parameters:
        - name: deploymentunitID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/fabric/sync/conflicts:
    get:
      tags:
        - si
      summary: agentConflictsRead
      description: |+
        Retrieve conflicting deployment units and EAM agencies, if any, and the
        allowed operations on them.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - si
      summary: agentConflictsUpdate
      description: |+
        Create deployment units for conflicting EAM Agencies, delete
        conflicting EAM agencies, or delete deployment units for conflicting
        EAM agencies.

        ### Create deployment units for conflicting EAM agencies

        ```
        <conflictResolverInfo>
          <agencyAction>RESTORE</agencyAction>
        </conflictResolverInfo>
        ```

        ### Delete conflicting EAM agencies

        ```
        <conflictResolverInfo>
          <agencyAction>DELETE</agencyAction>
        </conflictResolverInfo>
        ```

        ### Delete deployment units for conflicting EAM agencies

        ```
        <conflictResolverInfo>
          <deploymentUnitAction>DELETE</deploymentUnitAction>
        </conflictResolverInfo>
        ```


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <conflictResolverInfo>
                  <agencyAction></agencyAction>
                </conflictResolverInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/status:
    get:
      tags:
        - snmp
      summary: snmpStatusRead
      description: |+
        Retrieve SNMP status settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - snmp
      summary: snmpStatusUpdate
      description: |+
        Update SNMP status settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <snmpServiceStatus>
                  <serviceStatus>true</serviceStatus>
                  <groupedNotification>true</groupedNotification>
                </snmpServiceStatus>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/manager:
    get:
      tags:
        - snmp
      summary: snmpManagersList
      description: |+
        Retrieve information about SNMP managers.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - snmp
      summary: snmpManagerCreate
      description: |+
        Add an SNMP manager.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <snmpManager>
                  <ip>10.10.10.10</ip>
                  <port>162</port>
                  <communityString>NSXManager</communityString>
                  <enabled>true</enabled>
                </snmpManager>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/manager/{managerId}:
    get:
      tags:
        - snmp
      summary: snmpManagerRead
      description: |+
        Retrieve information about the specified SNMP manager.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        managerId: ID of the SNMP manager.

      parameters:
        - name: managerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - snmp
      summary: snmpManagerUpdate
      description: |+
        Update an SNMP manager configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        managerId: ID of the SNMP manager.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <snmpManager>
                  <managerId>1330</managerId>
                  <ip>10.10.10.10</ip>
                  <port>162</port>
                  <communityString>NSXManager</communityString>
                  <enabled>false</enabled>
                </snmpManager>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: managerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - snmp
      summary: snmpManagerDelete
      description: |+
        Delete an SNMP manager configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        managerId: ID of the SNMP manager.

      parameters:
        - name: managerId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/trap:
    get:
      tags:
        - snmp
      summary: snmpTrapsList
      description: |+
        Retrieve information about SNMP traps.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/trap/{oid}:
    get:
      tags:
        - snmp
      summary: snmpTrapRead
      description: |+
        Retrieve information about the specified SNMP trap.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        oid: SNMP object identifier.

      parameters:
        - name: oid
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - snmp
      summary: snmpTrapUpdate
      description: |+
        Update the specified SNMP trap.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

        oid: SNMP object identifier.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trapConfig>
                  <oid>1.3.6.1.4.1.6876.90.1.2.3.0.1</oid>
                  <enabled>false</enabled>
                </trapConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: oid
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes:
    get:
      tags:
        - scopes
      summary: vdnScopesList
      description: |+
        Retrieve information about all transport zones (also known as network
        scopes).


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - scopes
      summary: vdnScopeCreate
      description: |+
        Create a transport zone.

        Request body parameters:

          * **name** - Required. The name of the transport zone.
          * **description** - Optional. Description of the transport zone.
          * **objectId** - Required. The cluster object ID from vSphere. One or more are
            required.
          * **controlPlaneMode** - Optional. The control plane mode. It can be
            one of the following:
              * *UNICAST_MODE*
              * *HYBRID_MODE*
              * *MULTICAST_MODE*


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdnScope>
                  <name>Local-Transport-Zone-B</name>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c7</objectId>
                      </cluster>
                    </cluster>
                  </clusters>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: isUniversal
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}:
    get:
      tags:
        - scopes
      summary: vdnScopeProperties
      description: |+
        Retrieve information about the specified transport zone.


        Parameters:

        scopeId: A valid transport zone ID (vdnScope objectId)

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - scopes
      summary: vdnScopeChange
      description: |+
        Update the specified transport zone.

        You can add a cluster to or delete a cluster from a transport zone.

        You can also repair missing portgroups. For every logical switch
        created, NSX creates a corresponding portgroup in vCenter. If the
        portgroup is lost for any reason, the logical switch will stop
        functioning. The repair action recreates any missing portgroups.


        Parameters:

        scopeId: A valid transport zone ID (vdnScope objectId)

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdnScope>
                 <objectId>universalvdnscope</objectId>
                  <clusters>
                   <cluster>
                    <cluster>
                     <objectId>domain-c7</objectId>
                     </cluster>
                   </cluster>
                  </clusters>
                </vdnScope>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - scopes
      summary: vdnScopeDelete
      description: |+
        Delete the specified transport zone.


        Parameters:

        scopeId: A valid transport zone ID (vdnScope objectId)

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}/attributes:
    put:
      tags:
        - scopes
      summary: vdnScopeAttribUpdateUpdate
      description: |+
        Update the attributes of a transport zone.

        For example, you can update the name, description, or control plane
        mode. You must include the cluster object IDs for the transport zone
        in the request body.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdnScope>
                  <objectId>vdnscope-1</objectId>
                  <name>Local-Transport-Zone Site-B</name>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c7</objectId>
                      </cluster>
                    </cluster>
                  </clusters>
                </vdnScope>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}/conn-check/multicast:
    post:
      tags:
        - scopes
      summary: vdnScopeConnCheckExecute
      description: |+
        Test multicast group connectivity.

        Test multicast group connectivity between two hosts connected to the
        specified transport zone.

        Parameter **packetSizeMode** has one of the following values:
        * *0* - VXLAN standard packet size
        * *1* - minimum packet size
        * *2* - customized packet size.
        If you set **packetSizeMode** to *2*, you must specify the size using
        the **packetSize** parameter.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <testParameters>
                  <gateway>172.23.233.1</gateway>
                  <packetSizeMode>0</packetSizeMode>
                  <packetSize>1600</packetSize>
                  <sourceHost>
                    <hostId>host-9</hostId>
                    <switchId>dvs-22</switchId>
                    <vlanId>54</vlanId>
                  </sourceHost>
                  <destinationHost>
                    <hostId>host-92</hostId>
                    <switchId>dvs-22</switchId>
                    <vlanId>54</vlanId>
                  </destinationHost>
                </testParameters>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ssoconfig:
    get:
      tags:
        - ssoconfig
      summary: ssoConfigRead
      description: |+
        Retrieve SSO Configuration.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - ssoconfig
      summary: ssoConfigSet
      description: |+
        Register NSX Manager to SSO Services.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ssoConfig>
                  <ssoLookupServiceUrl></ssoLookupServiceUrl>
                  <ssoAdminUsername></ssoAdminUsername>
                  <ssoAdminUserpassword></ssoAdminUserpassword>
                  <certificateThumbprint></certificateThumbprint>
                </ssoConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - ssoconfig
      summary: ssoConfigDelete
      description: |+
        Deletes the NSX Manager SSO Configuration.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ssoconfig/status:
    get:
      tags:
        - ssoconfig
      summary: ssoStatusRead
      description: |+
        Retrieve the SSO configuration status of NSX Manager.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/switches:
    post:
      tags:
        - switches
      summary: vdsPrepare
      description: >+
        Prepare a vSphere Distributed Switch.


        The MTU is the maximum amount of data that can be transmitted in one

        packet before it is divided into smaller packets. VXLAN frames are
        slightly

        larger in size because of the traffic encapsulation, so the MTU required

        is higher than the standard MTU. You must set the MTU for each switch to

        1602 or higher.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdsContext>
                  <switch>
                    <objectId>dvs-26</objectId>
                    <type>
                      <typeName>DistributedVirtualSwitch</typeName>
                    </type>
                    <name></name>
                    <revision>0</revision>
                    <objectTypeName>DistributedVirtualSwitch</objectTypeName>
                  </switch>
                  <teaming>ETHER_CHANNEL</teaming>
                  <mtu>mtu-value</mtu>
                </vdsContext>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - switches
      summary: vdsList
      description: |+
        Retrieve information about all vSphere Distributed Switches.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/switches/datacenter/{datacenterID}:
    get:
      tags:
        - switches
      summary: vdsListInDc
      description: >+
        Retrieve information about all vSphere Distributed Switches in the
        specified datacenter.



        Parameters:


        datacenterID: A valid datacenter ID (e.g. datacenter-21)


      parameters:
        - name: datacenterID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/switches/{vdsId}:
    get:
      tags:
        - switches
      summary: vdsShow
      description: |+
        Retrieve information about the specified vSphere Distributed Switch.


        Parameters:

        vdsId: A valid vSphere Distributed Switch ID (e.g. dvs-35)


      parameters:
        - name: vdsId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - switches
      summary: vdsDelete
      description: |+
        Delete the specified vSphere Distributed Switch.


        Parameters:

        vdsId: A valid vSphere Distributed Switch ID (e.g. dvs-35)


      parameters:
        - name: vdsId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/systemalarms/{alarmId}:
    get:
      tags:
        - systemalarms
      summary: servicesSystemAlarmsIdRead
      description: |+
        Retrieve information about the specified alarm.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

        alarmId: The alarm ID you want to manage. Find the alarm ID using the
        `GET /api/2.0/services/alarms/{source-Id}` method.


      parameters:
        - name: alarmId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - systemalarms
      summary: servicesSystemAlarmsIdAction
      description: |+
        Resolve the specified alarm.

        Alarms will resolve automatically when the cause of the alarm is
        resolved.  For example, if an NSX Edge appliance is powered off, this
        will trigger an alarm. If you power the NSX Edge appliance back on, the
        alarm will resolve. If however, you delete the NSX Edge appliance, the
        alarm will persist, because the alarm cause was never resolved. In this
        case, you may want to manually resolve the alarm. Resolving the alarm 
        will clear it from the NSX dashboard.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

        alarmId: The alarm ID you want to manage. Find the alarm ID using the
        `GET /api/2.0/services/alarms/{source-Id}` method.


      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: action
          in: query
          schema:
            type: string
        - name: alarmId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/systemevent:
    get:
      tags:
        - systemevent
      summary: systemEventsRead
      description: |+
        Get NSX Manager system events

        Parameters:

      parameters:
        - name: startIndex
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/api/2.0/vdn/traceflow:
    post:
      tags:
        - traceflow
      summary: traceflowCreate
      description: |+
        Create a traceflow.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <traceflowRequest>
                  <vnicId>74eb1145-d40b-4061-8e64-1caddf2dbf81.001</vnicId>
                  <timeout>10000</timeout>
                  <routed>true</routed>
                  <packet class="fieldsPacketData">
                    <resourceType>FieldsPacketData</resourceType>
                    <ethHeader>
                      <srcMac>00:50:56:83:7e:87</srcMac>
                      <dstMac>00:50:56:83:fa:6c</dstMac>
                      <ethType>2048</ethType>
                    </ethHeader>
                    <ipHeader>
                      <ttl>64</ttl>
                      <srcIp>172.32.1.5</srcIp>
                      <dstIp>172.34.1.5</dstIp>
                    </ipHeader>
                  </packet>
                </traceflowRequest>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/api/2.0/vdn/traceflow/{traceflowId}:
    get:
      tags:
        - traceflow
      summary: traceflowRead
      description: |+
        Query a specific traceflow by *tracflowId* which is the value returned
        after executing the create Traceflow API call.


        Parameters:

        traceflowId: Traceflow ID.

      parameters:
        - name: traceflowId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/api/2.0/vdn/traceflow/{traceflowId}/observations:
    get:
      tags:
        - traceflow
      summary: traceflowObservationsList
      description: |+
        Retrieve traceflow observations.

        Parameters:

      parameters:
        - name: traceflowId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate:
    post:
      tags:
        - truststore
      summary: certificateCreate
      description: |+
        Import a certificate or a certificate chain against a certificate
        signing request.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trustObject>
                  <pemEncoding></pemEncoding>
                </trustObject>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: csrId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate/scope/{scopeId}:
    get:
      tags:
        - truststore
      summary: certificateScopeRead
      description: |+
        Retrieve all certificates on the specified scope.

        Parameters:

        scopeId: Scope ID. Specify the ID of an NSX Edge, e.g. *edge-5*, or
        *globalroot-0*.


      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate/{scopeId}:
    post:
      tags:
        - truststore
      summary: certificateSelfSignedCreate
      description: |+
        Create a single certificate

        You can create a certificate for a specific NSX Edge, or if you
        specify a scope of *globalroot-0* you can create a global certificate
        in NSX Manager which is available to all NSX Edges.


        Parameters:

        scopeId: Scope ID. Specify the ID of an NSX Edge, e.g. *edge-5*, or
        *globalroot-0*.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trustObject>
                  <pemEncoding></pemEncoding>
                  <privateKey></privateKey>
                  <passphrase></passphrase>
                </trustObject>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate/{certificateId}:
    get:
      tags:
        - truststore
      summary: certificateIdRead
      description: |+
        Retrieve the certificate object specified by ID. If the ID specifies
        a chain, multiple certificate objects are retrieved.


        Parameters:

        certificateId: Certificate ID

      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - truststore
      summary: certificateIdDelete
      description: |+
        Delete the specified certificate.

        Parameters:

        certificateId: Certificate ID

      parameters:
        - name: certificateId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/csr/{scopeId}:
    post:
      tags:
        - truststore
      summary: csrCreate
      description: |+
        Create a certificate signing request (CSR).

        Parameters:

        scopeId: Specified scope ID

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <csr>
                  <subject>
                    <attribute>
                      <key>CN</key>
                      <value>VSM</value>
                    </attribute>
                    <attribute>
                      <key>O</key>
                      <value>VMware</value>
                    </attribute>
                    <attribute>
                      <key>OU</key>
                      <value>IN</value>
                    </attribute>
                    <attribute>
                      <key>C</key>
                      <value>IN</value>
                    </attribute>
                  </subject>
                  <algorithm>RSA</algorithm>
                  <keySize>1024</keySize>
                </csr>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/csr/{csrId}:
    put:
      tags:
        - truststore
      summary: csrSelfSignedUpdate
      description: |+
        Create a self-signed certificate for CSR.


        Parameters:

        csrId: CSR ID

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: noOfDays
          in: query
          schema:
            type: string
        - name: csrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - truststore
      summary: csrSelfSignedRead
      description: |+
        Retrieve the specified certificate signing request (CSR).


        Parameters:

        csrId: CSR ID

      parameters:
        - name: csrId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/csr/scope/{scopeId}:
    get:
      tags:
        - truststore
      summary: csrScopeRead
      description: |+
        Retrieve certificate signing requests (CSR) on the specified scope.

        Parameters:

        scopeId: Specified scope.

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/crl/{scopeId}:
    post:
      tags:
        - truststore
      summary: crlCreate
      description: |+
        Create a certificate revocation list (CRL) on the specified scope.


        Parameters:

        scopeId: Specified scope.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trustObject>
                  <pemEncoding></pemEncoding>
                </trustObject>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/crl/scope/{scopeId}:
    get:
      tags:
        - truststore
      summary: crlScopeRead
      description: |+
        Retrieve all certificates for the specified scope.

        Parameters:

        scopeId: Specified scope

      parameters:
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/crl/{crlId}:
    get:
      tags:
        - truststore
      summary: crlIDRead
      description: |+
        Retrieve certificate object for the specified certificate revocation
        list (CRL).


        Parameters:

        crlId: CRL ID

      parameters:
        - name: crlId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - truststore
      summary: crlIDDelete
      description: |+
        Delete the specified certificate revocation list (CRL).

        Parameters:

        crlId: CRL ID

      parameters:
        - name: crlId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/configuration/role:
    post:
      tags:
        - universalsync
      summary: universalSyncConfigurationRoleSet
      description: |+
        Set the universal sync configuration role.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: action
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - universalsync
      summary: universalSyncConfigurationRoleRead
      description: |+
        Retrieve the universal sync configuration role.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/configuration/nsxmanagers:
    post:
      tags:
        - universalsync
      summary: universalSyncConfigurationNsxManagersCreate
      description: |+
        Add a secondary NSX manager.

        Run this method on the primary NSX Manager, providing details of the
        secondary NSX Manager.

        Retrieve the certificate thumbprint of the secondary NSX Manager
        using the `GET
        /api/1.0/appliance-management/certificatemanager/certificates/nsx`
        method. The **sha1Hash** parameter contains the thumbprint.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nsxManagerInfo>
                  <nsxManagerIp></nsxManagerIp>
                  <nsxManagerUsername></nsxManagerUsername>
                  <nsxManagerPassword></nsxManagerPassword>
                  <certificateThumbprint></certificateThumbprint>
                  <isPrimary></isPrimary>
                </nsxManagerInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - universalsync
      summary: universalSyncConfigurationNsxManagersList
      description: |+
        If run on a primary NSX Manager, it will list secondary NSX Managers
        configured on the primary NSX Manager.

        If run on a secondary NSX Manager, it will list information about
        the secondary NSX Manager and the primary NSX Manager it is
        associated with.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - universalsync
      summary: universalSyncConfigurationNsxManagersDelete
      description: |+
        Delete secondary NSX manager configuration.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/configuration/nsxmanagers/{nsxManagerID}:
    get:
      tags:
        - universalsync
      summary: universalSyncConfigurationManagersRead
      description: |+
        Retrieve information about the specified secondary NSX Manager.


        Parameters:

        nsxManagerID: NSX Manager UUID.

      parameters:
        - name: nsxManagerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - universalsync
      summary: universalSyncConfigurationManagersDelete
      description: |+
        Delete the specified secondary NSX Manager.

        Parameters:

        nsxManagerID: NSX Manager UUID.

      parameters:
        - name: forceRemoval
          in: query
          schema:
            type: string
        - name: nsxManagerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - universalsync
      summary: universalSyncConfigurationManagersUpdate
      description: |+
        Update the the specified secondary NSX manager IP or thumbprint in
        the universal sync configuration.


        Parameters:

        nsxManagerID: NSX Manager UUID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nsxManagerInfo>
                  <uuid></uuid>
                  <nsxManagerIp></nsxManagerIp>
                  <certificateThumbprint></certificateThumbprint>
                </nsxManagerInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: nsxManagerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/sync:
    post:
      tags:
        - universalsync
      summary: universalSyncSyncAction
      description: |+
        Sync all objects on the NSX Manager.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: action
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/entitystatus:
    get:
      tags:
        - universalsync
      summary: universalSyncEntityStatusRead
      description: |+
        Retrieve the status of a universal sync entity.

        Parameters:

      parameters:
        - name: objectType
          in: query
          schema:
            type: string
        - name: objectId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/status:
    get:
      tags:
        - universalsync
      summary: universalSyncStatusRead
      description: |+
        Retrieve the universal sync status.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/user/{userId}:
    get:
      tags:
        - usermgmt
      summary: userMgmtUserRead
      description: |+
        Get information about a user.

        Parameters:

        userId: user ID

      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - usermgmt
      summary: userMgmtUserDelete
      description: |+
        Remove the NSX role for a vCenter user.

        Parameters:

        userId: user ID

      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/role/{userId}:
    get:
      tags:
        - usermgmt
      summary: userMgmtRoleRead
      description: |+
        Retrieve a user's role (possible roles are super_user, vshield_admin,
        enterprise_admin, security_admin, and audit).


        Parameters:

        userId: User to retrieve role information from.

      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - usermgmt
      summary: userMgmtRoleCreate
      description: |+
        Add role and resources for a user.

        Parameters:

        userId: User to retrieve role information from.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <accessControlEntry>
                  <role></role>
                  <resource>
                    <resourceId></resourceId>
                  </resource>
                </accessControlEntry>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: isGroup
          in: query
          schema:
            type: string
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - usermgmt
      summary: userMgmtRoleUpdate
      description: |+
        Change a user's role.

        Parameters:

        userId: User to retrieve role information from.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <accessControlEntry>
                  <role></role>
                  <resource>
                    <resourceId></resourceId>
                  </resource>
                </accessControlEntry>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - usermgmt
      summary: userMgmtRoleDelete
      description: |+
        Delete the role assignment for specified vCenter user. Once this role
        is deleted, the user is removed from NSX Manager. You cannot delete the
        role for a local user.


        Parameters:

        userId: User to retrieve role information from.

      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/enablestate/{value}:
    put:
      tags:
        - usermgmt
      summary: userMgmtStateUpdate
      description: |+
        Enable or disable a user account.

        Parameters:

        value: value can be 0 to disable, or 1 to enable.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: value
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/users/vsm:
    get:
      tags:
        - usermgmt
      summary: userNSXManagerInfoRead
      description: |+
        Get information about users who have been assigned a NSX Manager role
        (local users as well as vCenter users with NSX Manager role).


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/roles:
    get:
      tags:
        - usermgmt
      summary: userMgmtRolesRead
      description: |+
        Read all possible roles in NSX Manager

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/scopingobjects:
    get:
      tags:
        - usermgmt
      summary: userScopingObjectsRead
      description: |+
        Retrieve a list of objects that can be used to define a user's access
        scope.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/vcconfig:
    get:
      tags:
        - vcconfig
      summary: vCenterConfigRead
      description: |+
        Get vCenter Server configuration details on NSX Manager.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - vcconfig
      summary: vCenterConfigUpdate
      description: |+
        Synchronize NSX Manager with vCenter server.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vcInfo>
                  <ipAddress>vc-l-01a.corp.local</ipAddress>
                  <userName>administrator@vsphere.local</userName>
                  <password>VMware123</password>
                  <certificateThumbprint>D2:75:61:24:52:CA:B2:8D:D3:25:3F:78:11:2A:8F:94:5A:30:57:0D</certificateThumbprint>
                  <assignRoleToUser>true</assignRoleToUser>
                  <pluginDownloadServer></pluginDownloadServer>
                  <pluginDownloadPort></pluginDownloadPort>
                </vcInfo>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/vcconfig/status:
    get:
      tags:
        - vcconfig
      summary: vCenterStatusRead
      description: |+
        Get default vCenter Server connection status.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires:
    get:
      tags:
        - virtualwires
      summary: logicalSwitchesRead
      description: |+
        Retrieve information about all logical switches in all transport zones.


        Parameters:

      parameters:
        - name: startindex
          in: query
          schema:
            type: string
        - name: pagesize
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/vm/vnic:
    post:
      tags:
        - virtualwires
      summary: logicalSwitchVmAttachCreate
      description: >+
        Attach a VM vNIC to, or detach a VM vNIC from a logical switch.


        Specify the logical switch ID in the **portgroupId** parameter. To

        detach a VM vNIC from a logical switch, leave the **portgroupId**
        parameter

        empty.


        To find the ID of a VM vNIC, do the following:

        1. In the vSphere MOB, navigate to the VM you want to connect or
        disconnect.

        2. Click **config** and take note of the **instanceUuid**.

        3. Click **hardware** and take note of the last three digits of the

        appropriate network interface device.


        Use these two values to form the VM vNIC ID.  For example, if the

        **instanceUuid** is *502e71fa-1a00-759b-e40f-ce778e915f16* and the

        appropriate **device** value is *device[4000]*, the **objectId** and

        **vnicUuid** are both *502e71fa-1a00-759b-e40f-ce778e915f16.000*.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <com.vmware.vshield.vsm.inventory.dto.VnicDto>
                  <objectId>502e71fa-1a00-759b-e40f-ce778e915f16.000</objectId>
                  <vnicUuid>502e71fa-1a00-759b-e40f-ce778e915f16.000</vnicUuid>
                  <portgroupId>virtualwire-2</portgroupId>
                </com.vmware.vshield.vsm.inventory.dto.VnicDto>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}:
    get:
      tags:
        - virtualwires
      summary: logicalSwitchShow
      description: |+
        Retrieve information about the specified logical switch.

        If the switch is a universal logical switch the **isUniversal**
        parameter is set to true in the response body.


        Parameters:

        virtualWireID: A logical switch id, e.g. virtualwire-1002

      parameters:
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - virtualwires
      summary: logicalSwitchUpdate
      description: |+
        Update the specified logical switch.

        For example, you can update the name, description, or control plane
        mode.


        Parameters:

        virtualWireID: A logical switch id, e.g. virtualwire-1002

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <virtualWire>
                  <name>ULS-Web-Tier-02 </name>
                  <description>Universal Web Logical Switch</description>
                  <tenantId>virtual wire tenant</tenantId>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </virtualWire>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - virtualwires
      summary: logicalSwitchDelete
      description: |+
        Delete the specified logical switch.

        Parameters:

        virtualWireID: A logical switch id, e.g. virtualwire-1002

      parameters:
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/backing:
    post:
      tags:
        - virtualwires
      summary: logicalSwitchPortGroupFixAction
      description: |+
        For every logical switch created, NSX creates a corresponding port
        group in vCenter. If the port group is missing, the logical switch
        will stop functioning.

        If the port group backing a logical switch is deleted, you can
        recreate a new backing port group for the logical switch.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: action
          in: query
          schema:
            type: string
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/conn-check/multicast:
    post:
      tags:
        - virtualwires
      summary: logicalSwitchConnCheckExecute
      description: |+
        Test multicast group connectivity.

        Test multicast group connectivity between two hosts connected to the
        specified logical switch.

        Parameter **packetSizeMode** has one of the following values:
        * *0* - VXLAN standard packet size
        * *1* - minimum packet size
        * *2* - customized packet size.
        If you set **packetSizeMode** to *2*, you must specify the size using
        the **packetSize** parameter.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <testParameters>
                  <gateway></gateway>
                  <packetSizeMode></packetSizeMode>
                  <packetSize></packetSize>
                  <sourceHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </sourceHost>
                  <destinationHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </destinationHost>
                </testParameters>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/conn-check/p2p:
    post:
      tags:
        - virtualwires
      summary: logicalSwitchPingExecute
      description: |+
        Test point-to-point connectivity.

        Test point-to-point connectivity between two hosts connected to the
        specified logical switch.

        Parameter **packetSizeMode** has one of the following values:
        * *0* - VXLAN standard packet size
        * *1* - minimum packet size
        * *2* - customized packet size.
        If you set **packetSizeMode** to *2*, you must specify the size using
        the **packetSize** parameter.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <testParameters>
                  <gateway></gateway>
                  <packetSizeMode></packetSizeMode>
                  <packetSize></packetSize>
                  <sourceHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </sourceHost>
                  <destinationHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </destinationHost>
                </testParameters>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/hardwaregateways:
    get:
      tags:
        - virtualwires
      summary: logicalSwitchHardwareGatewayBindingsList
      description: |+
        Retrieve hardware gateway bindings for the specified logical switch.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/hardwaregateways/{hardwareGatewayBindingId}:
    post:
      tags:
        - virtualwires
      summary: logicalSwitchHardwareGatewayBindingCreate
      description: >+
        Manage the connection between a hardware gateway and a logical switch.


        ### Attach a hardware gateway to a logical switch and create a new
        binding with the information provided


        `POST /api/2.0/vdn/virtualwires/{virtualwireid}/hardwaregateways`


        ```

        <hardwareGatewayBinding>
          <hardwareGatewayId>hardwarewgateway1</hardwareGatewayId>
          <vlan>v1</vlan>
          <switchName>s1</switchName>
          <portName>s1</portName>
        </hardwareGatewayBinding> 

        ```


        ### Attach a hardware gateway to a logical switch, specifying an
        existing binding by ID


        `POST
        /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/{bindingId}?action=attach`


        ```

        <virtualWire>
          ...
          <hardwareGatewayBindings>
            <hardwareGatewayBinding>
              <id>binding id</id>
            </hardwareGatewayBinding>
          </hardwareGatewayBindings>
        </virtualWire>

        ```


        ### Detach a hardware gateway from a logical switch


        `POST
        /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/{bindingId}?action=detach`


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method introduced.



        Parameters:


        hardwareGatewayBindingId: Hardware Gateway Binding ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayBinding>
                  <hardwareGatewayId>hardwarewgateway1</hardwareGatewayId>
                  <vlan>v1</vlan>
                  <switchName>s1</switchName>
                  <portName>s1</portName>
                </hardwareGatewayBinding> 
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: virtualWireID
          in: path
          schema:
            type: string
          required: true
        - name: hardwareGatewayBindingId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}/virtualwires:
    get:
      tags:
        - virtualwires
      summary: logicalSwitchList
      description: |+
        Retrieve information about all logical switches in the specified
        transport zone (network scope).


        Parameters:

        scopeId: A valid transport zone ID (vdnScope objectId).


      parameters:
        - name: startindex
          in: query
          schema:
            type: string
        - name: pagesize
          in: query
          schema:
            type: string
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - virtualwires
      summary: logicalSwitchCreate
      description: |+
        Create a logical switch.

        To create a universal logical switch use *universalvdnscope* as the
        scopeId in the URI and send the request to the primary NSX Manager.
        Request body parameters:
          * **name** - Optional. The name of the logical switch.
          * **description** - Optional. Description of the logical switch.
          * **tenantId** - Required.
          * **controlPlaneMode** - Optional. The control plane mode. If not
            specified, the **controlPlaneMode** of the transport zone is used. It
            can be one of the following:
              * *UNICAST_MODE*
              * *HYBRID_MODE*
              * *MULTICAST_MODE*
          * **guestVlanAllowed** - Optional. Default is *false*.


        Parameters:

        scopeId: A valid transport zone ID (vdnScope objectId).


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <virtualWireCreateSpec>
                  <name>Web-Tier-01</name>
                  <description>Web tier network</description>
                  <tenantId>virtual wire tenant</tenantId>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                  <guestVlanAllowed>false</guestVlanAllowed>
                </virtualWireCreateSpec>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: scopeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/excludelist:
    get:
      tags:
        - excludelist
      summary: dfwExclusionRead
      description: |+
        Retrieve the set of VMs in the exclusion list.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/excludelist/{memberID}:
    put:
      tags:
        - excludelist
      summary: dfwExclusionUpdate
      description: |+
        Add a vm to the exclusion list.

        Parameters:

        memberID: vc-moref-id of a virtual machine.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: memberID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - excludelist
      summary: dfwExclusionDelete
      description: |+
        Delete a vm from exclusion list.

        Parameters:

        memberID: vc-moref-id of a virtual machine.

      parameters:
        - name: memberID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/flowstats:
    get:
      tags:
        - flow
      summary: flowStatsRead
      description: |+
        Retrieve flow statistics for a datacenter, port group, VM, or vNIC.

        Response values for flow statistics:
        * **blocked** - indicates whether traffic is blocked:
          * 0 - flow allowed
          * 1 - flow blocked
          * 2 - flow blocked by SpoofGuard
        * **protocol** - protocol in flow:
          * 0 - TCP
          * 1 - UDP
          * 2 - ICMP
        * **direction** - direction of flow:
          * 0 - to virtual machine
          * 1 - from virtual machine
        * **controlDirection** - control direction for dynamic TCP traffic:
          * 0 - source -> destination
          * 1 - destination -> source


        Parameters:

      parameters:
        - name: contextId
          in: query
          schema:
            type: string
        - name: flowType
          in: query
          schema:
            type: string
        - name: startTime
          in: query
          schema:
            type: string
        - name: endTime
          in: query
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/flowstats/info:
    get:
      tags:
        - flow
      summary: flowStatsInfoRead
      description: |+
        Retrieve flow statistics meta-data.

        This method retrieves the following information for each flow type:
        * minimum start time
        * maximum end time
        * total flow count


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/config:
    get:
      tags:
        - flow
      summary: flowConfigRead
      description: |+
        Retrieve flow monitoring configuration.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - flow
      summary: flowsConfigCreate
      description: |+
        Update flow monitoring configuration.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <FlowConfiguration>
                  <collectFlows>true</collectFlows>
                  <ignoreBlockedFlows>false</ignoreBlockedFlows>
                  <ignoreLayer2Flows>false</ignoreLayer2Flows>
                  <sourceIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</sourceIPs>
                  <sourceContainer>
                    <name>vm1 - Network adapter 1</name>
                    <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                    <type>Vnic</type>
                  </sourceContainer>
                  <sourceContainer>
                    <name>Large XP-1</name>
                    <id>vm-126</id>
                    <type>VirtualMachine</type>
                  </sourceContainer>
                  <destinationIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</destinationIPs>
                  <destinationContainer>
                    <name>vm2 - Network adapter 2</name>
                    <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                    <type>Vnic</type>
                  </destinationContainer>
                  <destinationContainer>
                    <name>Small XP-2</name>
                    <id>vm-226</id>
                    <type>VirtualMachine</type>
                  </destinationContainer>
                  <destinationPorts>22, 40-50, 60</destinationPorts>
                  <service>
                    <name>VMware-VDM2.x-Ephemeral</name>
                    <id>application-161</id>
                  </service>
                </FlowConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/{contextId}:
    delete:
      tags:
        - flow
      summary: flowContextDelete
      description: |+
        Delete flow records for the specified context.

        Parameters:

        contextId: Context ID.

      parameters:
        - name: contextId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/records:
    get:
      tags:
        - ai
      summary: userActivityRead
      description: >+
        ### View Outbound Activity


        You can view what applications are being run by a security group or

        desktop pool and then drill down into the report to find out which

        client applications are making outbound connections by a particular

        group of users. You can also discover all user groups and users who are

        accessing a particular application, which can help you determine if you

        need to adjust identity firewall in your environment.


        * query=*resource*

        *
        param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *VIRTUAL_MACHINE*
            * for app: *SRC_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).

        **Example:** View user activities to VM ID 1 originating from
        application

        ID 1  

        `GET
        /api/3.0/ai/records?query=resource&interval=60m&param=src:DIRECTORY_GROUP`  

        `&param=dest:VIRTUAL_MACHINE:1&param=app:SRC_APP:1`


        ### View Inbound Activity


        You can view all inbound activity to a server by desktop pool, security

        group, or AD group.


        * query=*sam*

        *
        param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *VIRTUAL_MACHINE*
            * for app: *DEST_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, *NOT* (default is *INCLUDE*).

        **Example:** View user activities to VM ID 1 originating from

        application ID 1  

        `GET
        /api/3.0/ai/records?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`  

        `&param=src:SECURITY_GROUP:1`


        ### View Interaction between Inventory Containers

        You can view the traffic passing between defined containers such as AD

        groups, security groups and/or desktop pools. This can help you identify

        and configure access to shared services and to resolve misconfigured

        relationships between Inventory container definitions, desktop pools and

        AD groups.


        * query=*containers*

        *
        param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *SECURITY_GROUP*, * *DESKTOP_POOL* 
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, or *NOT* (default * is *INCLUDE*).

        **Example:** View interaction between inventory containers  

        `GET
        /api/3.0/ai/records?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`  

        `&param=src:SECURITY_GROUP:1`


        ### View Outbound AD Group Activity


        You can view the traffic between members of defined Active Directory

        groups and can use this data to fine tune your firewall rules.


        * query=*adg*

        *
        param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *adg*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DESKTOP_POOL*
            * for adg: *USER*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default * is *INCLUDE*).

        **Example:** View outbound AD group activity    

        `GET
        https://NSX-Manager-IP-Address/api/3.0/ai/records?query=adg&interval=24h&param=adg:USER:1:INCLUDE`  

        `&param=src:SECURITY_GROUP:1:EXCLUDE`



        Parameters:

      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: interval
          in: query
          schema:
            type: string
        - name: stime
          in: query
          schema:
            type: string
        - name: etime
          in: query
          schema:
            type: string
        - name: param
          in: query
          schema:
            type: string
        - name: pagesize
          in: query
          schema:
            type: string
        - name: startindex
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/userdetails:
    get:
      tags:
        - ai
      summary: userDetailsRead
      description: >+
        ### View Outbound Activity

        You can view what applications are being run by a security group or

        desktop pool and then drill down into the report to find out which

        client applications are making outbound connections by a particular

        group of users. You can also discover all user groups and users who

        are accessing a particular application, which can help you determine

        if you need to adjust identity firewall in your environment.


        * query=*resource*

        *
        param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *IP* - a valid IP address in dot notation, xx.xx.xx.xx
            * for app: *SRC_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).

        **Example:** View user activities to VM ID 1 originating from
        application ID 1  

        `GET
        /api/3.0/ai/userdetails?query=resource&stime=2012-10-15T00:00:00&etime=2012-10-20T00:00:00`  

        `&param=src:DIRECTORY_GROUP:2&param=app:SRC_APP:16&param=dest:IP:172.16.4.52`


        ### View Inbound Activity


        You can view all inbound activity to a server by desktop pool, security

        group, or AD group.


        * query=*sam*

        *
        param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app* (required)
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *VIRTUAL_MACHINE*
            * for app: *DEST_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, *NOT* (default is *INCLUDE*).

        **Example:** View user activities to VM ID 1 originating from

        application ID 1  

        `GET
        /api/3.0/userdetails?query=sam&interval=60m&param=app:DEST_APP:1:EXCLUDE`  

        `&param=dest:IP:1:EXCLUDE&param=src:SECURITY_GROUP:1:EXCLUDE`


        ### View Interaction between Inventory Containers

        You can view the traffic passing between defined containers such as AD

        groups, security groups and/or desktop pools. This can help you identify

        and configure access to shared services and to resolve misconfigured

        relationships between Inventory container definitions, desktop pools and

        AD groups.


        * query=*containers*

        *
        param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *SECURITY_GROUP*, * *DESKTOP_POOL* 
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, or *NOT* (default * is *INCLUDE*).

        **Example:** View interaction between inventory containers  

        `GET
        /api/3.0/ai/userdetails?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`  

        `&param=src:SECURITY_GROUP:1`


        ### View Outbound AD Group Activity


        You can view the traffic between members of defined Active Directory

        groups and can use this data to fine tune your firewall rules.


        * query=*adg*

        *
        param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *adg*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DESKTOP_POOL*
            * for adg: *USER*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).

        **Example:** View outbound AD group activity    

        `GET
        /api/3.0/ai/userdetails?query=adg&interval=24h&param=adg:USER:1:INCLUDE`  

        `&param=src:SECURITY_GROUP:1:EXCLUDE`


        ### View Virtual Machine Activity Report


        * query=*vma*

        *
        param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,
        where:
          * &lt;param-name&gt; is one of:
            * *src*
            * *dst*
            * *app*
            * If no parameters are passed, then this would show all SAM
            activities
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DESKTOP_POOL*
            * for dst: *VIRTUAL_MACHINE*, *VM_UUID*
            * for app - *SRC_APP* or *DEST_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).

        **Example:** View outbound AD group activity    

        `GET
        /api/3.0/ai/userdetails?query=vma&interval=60m&param=dest:VIRTUAL_MACHINE:1

        &param=app:DEST_APP:16`



        Parameters:

      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: interval
          in: query
          schema:
            type: string
        - name: stime
          in: query
          schema:
            type: string
        - name: etime
          in: query
          schema:
            type: string
        - name: param
          in: query
          schema:
            type: string
        - name: pagesize
          in: query
          schema:
            type: string
        - name: startindex
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/user/{userID}:
    get:
      tags:
        - ai
      summary: specificUserDetailsRead
      description: |+
        Retrieve details for a specific user.

        Parameters:

        userID: User ID

      parameters:
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/app:
    get:
      tags:
        - ai
      summary: appDetailsRead
      description: |+
        Retrieve app details.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/app/{appID}:
    get:
      tags:
        - ai
      summary: specificAppDetailsRead
      description: |+
        Retrieve details for specific app.

        Parameters:

        appID: Specified app ID.

      parameters:
        - name: appID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/host:
    get:
      tags:
        - ai
      summary: hostDetailsRead
      description: |+
        Retrieve list of all discovered hosts (both by agent introspection and
        LDAP Sync) and their detail.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/host/{hostID}:
    get:
      tags:
        - ai
      summary: specificHostDetailsRead
      description: |+
        Get host details.

        Parameters:

        hostID: Specified host ID.

      parameters:
        - name: hostID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/desktoppool:
    get:
      tags:
        - ai
      summary: desktopPoolRead
      description: |+
        Retrieve list of all discovered desktop pools by agent introspection.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/desktoppool/{desktoppoolID}:
    get:
      tags:
        - ai
      summary: specificDesktopPoolRead
      description: |+
        Retrieve specific desktop pool details.

        Parameters:

        desktoppoolID: Specified desktop pool.

      parameters:
        - name: desktoppoolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/vm:
    get:
      tags:
        - ai
      summary: vmDetailsRead
      description: |+
        Retrieve list of all discovered VMs.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/vm/{vmID}:
    get:
      tags:
        - ai
      summary: specificVMDetailsRead
      description: |+
        Retrieve details about a specific virtual machine.

        Parameters:

        vmID: VM ID

      parameters:
        - name: vmID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/directorygroup:
    get:
      tags:
        - ai
      summary: dirGroupRead
      description: |+
        Retrieve list of all discovered (and configured) LDAP directory
        groups.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/directorygroup/{directorygroupID}:
    get:
      tags:
        - ai
      summary: specificDirGroupRead
      description: |+
        Retrieve details about a specific directory group.

        Parameters:

        directorygroupID: Specified directory group.

      parameters:
        - name: directorygroupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/directorygroup/user/{userID}:
    get:
      tags:
        - ai
      summary: userDirGroupRead
      description: |+
        Retrieve Active Directory groups that user belongs to.

        Parameters:

        userID: User ID.

      parameters:
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/securitygroup:
    get:
      tags:
        - ai
      summary: secgroupDetailsRead
      description: |+
        Retrieve list of all observed security groups.

        Observed entities are the ones that are reported by the agents. For
        example, if a host activity is reported by an agent and if that host
        belongs to a security group then that security group would reported as
        observed in SAM database.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/securitygroup/{secgroupID}:
    get:
      tags:
        - ai
      summary: specificSecgroupDetailsRead
      description: |+
        Retrieve details about specific security group.

        Parameters:

        secgroupID: Specified security group.

      parameters:
        - name: secgroupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges:
    post:
      tags:
        - edges
      summary: nsxEdgesCreate
      description: >+
        You can install NSX Edge as a services gateway or as a logical router.


        The **type** parameter determines which type of NSX Edge is deployed:

        *distributedRouter* or *gatewayServices*. If no type is specified, the

        type is *gatewayServices*.


        Other parameters for this method will differ depending on which type of

        NSX Edge you are deploying. See the examples and parameter tables for

        more information.


        ### NSX Edge: Service Gateway


        The NSX Edge installation API copies the NSX Edge OVF from the Edge

        Manager to the specified datastore and deploys an NSX Edge on the given

        datacenter. After the NSX Edge is installed, the virtual machine powers

        on and initializes according to the given network configuration. If an

        appliance is added, it is deployed with the specified configuration.


        Installing an NSX Edge instance adds a virtual machine to the vCenter

        Server inventory, you must specify an IP address for the management

        interface, and you may name the NSX Edge instance.


        The configuration you specify when you install an NSX Edge is stored in

        the database. If an appliance is added, the configuration is applied to

        it and it is deployed.


        NOTE: Do not use hidden/system resource pool IDs as they are not

        supported on the UI.


        #### Request Body to Create Edge Services Gateway

            <edge>
              <datacenterMoid>datacenter-2</datacenterMoid>
              <name>org1-edge</name>
              <description>Description for the edge gateway</description>
              <tenant>org1</tenant>
              <fqdn>org1edge1</fqdn>
              <vseLogLevel>info</vseLogLevel>
              <enableAesni>false</enableAesni>
              <enableFips>true</enableFips>
              <appliances>
                <applianceSize>compact</applianceSize>
                <enableCoreDump>true</enableCoreDump>
                <appliance>
                  <resourcePoolId>resgroup-53</resourcePoolId>
                  <datastoreId>datastore-29</datastoreId>
                  <hostId>host-28</hostId> 
                  <vmFolderId>group-v38</vmFolderId> 
                  <customField> 
                    <key>system.service.vmware.vsla.main01</key>
                    <value>string</value>
                  </customField>
                  <cpuReservation> 
                    <limit>2399</limit>
                    <reservation>500</reservation>
                    <shares>500</shares>
                  </cpuReservation>
                  <memoryReservation> 
                    <limit>5000</limit>
                    <reservation>500</reservation>
                    <shares>20480</shares>
                  </memoryReservation>
                </appliance>
              </appliances>
              <vnics>
                <vnic>
                  <index>0</index>
                  <name>internal0</name>
                  <type>internal</type>
                  <portgroupId>dvportgroup-114</portgroupId>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress>192.168.3.1</primaryAddress>
                      <secondaryAddresses>
                        <ipAddress>192.168.3.2</ipAddress>
                        <ipAddress>192.168.3.3</ipAddress>
                      </secondaryAddresses>
                      <subnetMask>255.255.255.0</subnetMask>
                    </addressGroup>
                    <addressGroup>
                      <primaryAddress>192.168.4.1</primaryAddress>
                      <secondaryAddresses>
                        <ipAddress>192.168.4.2</ipAddress>
                        <ipAddress>192.168.4.3</ipAddress>
                      </secondaryAddresses>
                      <subnetPrefixLength>24</subnetPrefixLength>
                    </addressGroup>
                    <addressGroup>
                      <primaryAddress>ffff::1</primaryAddress>
                      <secondaryAddresses>
                        <ipAddress>ffff::2</ipAddress>
                      </secondaryAddresses>
                      <subnetPrefixLength>64</subnetPrefixLength>
                    </addressGroup>
                  </addressGroups>
                  <macAddress>
                    <edgeVmHaIndex>0</edgeVmHaIndex>
                    <value>00:50:56:01:03:23</value>
                  </macAddress>
                  <fenceParameter>
                    <key>ethernet0.filter1.param1</key>
                    <value>1</value>
                  </fenceParameter>
                  <mtu>1500</mtu>
                  <enableProxyArp>false</enableProxyArp>
                  <enableSendRedirects>true</enableSendRedirects>
                  <isConnected>true</isConnected>
                  <inShapingPolicy>
                    <averageBandwidth>200000000</averageBandwidth>
                    <peakBandwidth>200000000</peakBandwidth>
                    <burstSize>0</burstSize>
                    <enabled>true</enabled>
                    <inherited>false</inherited>
                  </inShapingPolicy>
                  <outShapingPolicy>
                    <averageBandwidth>400000000</averageBandwidth>
                    <peakBandwidth>400000000</peakBandwidth>
                    <burstSize>0</burstSize>
                    <enabled>true</enabled>
                    <inherited>false</inherited>
                  </outShapingPolicy>
                </vnic>
              </vnics>
              <cliSettings>
                <userName>test</userName>
                <password>test123!</password>
                <remoteAccess>false</remoteAccess>
              </cliSettings>
              <autoConfiguration>
                <enabled>true</enabled>
                <rulePriority>high</rulePriority>
              </autoConfiguration>
              <dnsClient>
                <primaryDns>10.117.0.1</primaryDns>
                <secondaryDns>10.117.0.2</secondaryDns>
                <domainName>vmware.com</domainName>
                <domainName>foo.com</domainName>
              </dnsClient>
              <queryDaemon>
                <enabled>true</enabled>
                <port>5666</port>
              </queryDaemon>
            </edge>

        ### NSX Edge: Logical (Distributed) Router


        Before installing a logical router, you must prepare the hosts on the

        appropriate clusters. 


        The user specified configuration is stored in the database

        and Edge identifier is returned to the user. This identifier must be

        used for future configurations on the given Edge.  If any appliance(s)

        are specified and at least one connected interface/vnic is specified,

        then the appliance(s) are deployed and configuration is applied to them.


        It is not possible to set the <ecmp>true</ecmp> property upon creation

        of a distributed logicalrouter Edge and a subsequent API call is

        required to enable ECMP.


        DHCP relay settings are not able to be used when creating a distributed

        logical router Edge and a subsequent API call is required to configure

        DHCP relay properties.


        #### Request Body to Create Logical (Distributed) Router

            <edge>
              <datacenterMoid>datacenter-2</datacenterMoid>
              <type>distributedRouter</type>
              <appliances>
                <appliance>
                <resourcePoolId>resgroup-20</resourcePoolId>
                <datastoreId>datastore-23</datastoreId>
                </appliance>
              </appliances>
              <mgmtInterface>
                <connectedToId>dvportgroup-38</connectedToId>
                  <addressGroups> 
                    <addressGroup>
                      <primaryAddress>10.112.196.165</primaryAddress>
                      <subnetMask>255.255.252.0</subnetMask>
                    </addressGroup>
                   </addressGroups>
              </mgmtInterface>
              <interfaces>
                <interface>
                  <type>uplink</type>
                  <mtu>1500</mtu>
                  <isConnected>true</isConnected>
                  <addressGroups> 
                    <addressGroup>
                      <primaryAddress>192.168.10.1</primaryAddress>
                      <subnetMask>255.255.255.0</subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <connectedToId>dvportgroup-39</connectedToId>
                </interface>
                <interface>
                  <type>internal</type>
                  <mtu>1500</mtu>
                  <isConnected>true</isConnected>
                  <addressGroups> 
                    <addressGroup>
                      <primaryAddress>192.168.20.1</primaryAddress>
                      <subnetMask>255.255.255.0</subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <connectedToId>dvportgroup-40</connectedToId>
                </interface>
              </interfaces>
            </edge>
        ### Request and Response Body Parameters for NSX Edge


        #### General Request Body Parameters: Edge Services Gateway and Logical
        (Distributed) Router


        Parameter |  Description | Comments 

        ---|---|---

        **datacenterMoid** |Specify vCenter Managed Object Identifier of data
        center on which edge has to be deployed|Required. 

        **type** | Specify which kind of NSX Edge to deploy. Choice of
        *distributedRouter* or *gatewayServices*. | Optional. Default is
        *gatewayServices*.

        **name** |Specify a name for the new NSX Edge.|Optional. Default is
        *NSX-&lt;edgeId&gt;*. Used as a VM name on vCenter appended by
        *-&lt;haIndex&gt;*. 

        **description** |NSX Edge description.|Optional. 

        **tenant** |Specify the tenant. Used for syslog messages.|Optional. 

        **fqdn** |Fully Qualified Domain Name for the edge.|Optional. Default is
        *NSX-&lt;edgeId&gt;* Used to set hostname on the VM. Appended by
        *-&lt;haIndex&gt;*

        **vseLogLevel** |Defines the log level for log messages captured in the
        log files.|Optional. Choice of: *emergency*, *alert*, *critical*,
        *error*, *warning*, *notice*, *debug*. Default is *info*.

        **enableAesni** |Enable support for Advanced Encryption Standard New
        Instructions on the Edge.|Optional. True/False. Default is *true*.

        **enableCoreDump** |Deploys a new NSX Edge for debug/core-dump
        purpose.|Optional. Default is false. Enabling core-dump will deploy an
        extra disk for core-dump files.


        #### Appliances Configuration: Edge Services Gateway and Logical
        (Distributed) Router


        Parameter |  Description | Comments 

        ---|---|---

        **applianceSize** |Edge form factor, it determines the NSX Edge size and
        capability. |Required. Choice of: *compact*, *large*, *quadlarge*,
        *xlarge*. Default is *compact*.

        **deployAppliances** | Determine whether to deploy appliances. | Default
        is *true*.

        **appliance** |Appliance configuration details.|Required. Can configure
        a maximum of two appliances. Until one appliance is configured and NSX
        Edge VM is deployed successfully, none of the configured features will
        serve the network.

        **resourcePoolId** |Details of resource pool on which to deploy NSX
        Edge. |Required. Can be resource pool ID, e.g. *resgroup-15* or cluster
        ID, e.g. *domain-c41*.

        **datastoreId** |Details of datastore on which to deploy NSX
        Edge.|Required. 

        **hostId** |ID of the host on which to deploy the NSX Edge.|Optional. 

        **vmFolderId** |The folder in which to save the NSX Edge.|Optional. 

        **customField** |Custom key-value attributes. |Optional. Use custom
        attributes to associate user-specific meta-information with VMs and
        managed hosts, stored on vCenter Server.

        **customField > key** |Meta information Key.|Required if customField is
        specified. 

        **customField > value** |Meta information Value.|Required if customField
        is specified. 

        **cpuReservation > limit** |Maximum CPU capacity the NSX Edge can use,
        specified in MHz.|Optional. -1 (unlimited), any positive integer

        **cpuReservation > reservation** |CPU capacity reserved for NSX Edge in
        MHz.|Optional. 

        **cpuReservation > shares** |Higher value implies NSX Edge has priority
        when accessing resources.|Optional. 

        **memoryReservation > limit** |Maximum memory the NSX Edge can use,
        specified in MB.|Optional. -1 (unlimited), any positive integer

        **memoryReservation > reservation** |Memory capacity reserved for NSX
        Edge in MB.|Optional. 

        **memoryReservation > shares** |Higher value implies NSX Edge has
        priority when accessing resources.|Optional. 

        **cliSettings > userName** |User name.|Required. length 1-33.

        **cliSettings > password** |Password.|Required. The password must be at
        least 12 characters long. Must contain at-least 1 uppercase, 1
        lowercase, 1 special character and 1 digit. In addition, a character
        cannot be repeated 3 or more times consectively.

        **cliSettings > remoteAccess** |Enables or disables remote access
        through SSH. |Required. Relevant firewall rules to allow traffic on port
        22 must be opened by user/client

        **autoConfiguration > enabled** |Enable/Disable status of
        autoConfiguration|Optional. True/False. Default is *true*. If
        autoConfiguration is enabled, firewall rules are automatically created
        to allow control traffic. Rules to allow data traffic are not created. 
        For example, if you are using IPsec VPN, and **autoConfiguration** is
        *true*, firewall rules will automatically be configured to allow IKE
        traffic. However, you will need to add additional rules to allow the
        data traffic for the IPsec tunnel. If HA is enabled, firewall rules are
        always created, even if **autoConfiguration** is *false*, otherwise both
        HA appliances will become active.

        **autoConfiguration > rulePriority** |Defines the priority of
        system-defined rules over user-defined rules.|Optional. High, Low. 
        Default is *high*.

        **queryDaemon > enabled** |Configure the communication between server
        load balancer and NSX Edge VM.|Default is *false*.

        **queryDaemon > port** |Defines the port through which the communication
        happens.|Integer 1-65535. Default is *5666*.


        #### DNS Client: Edge Services Gateway and Logical (Distributed) Router 


        Parameter |  Description | Comments 

        ---|---|---

        **dnsClient** |Configures the DNS settings of the Edge Services
        Gateway.|Optional. If the primary/secondary are specified and the DNS
        service is not specified, the primary/secondary will be used as the
        default of the DNS service.

        **primaryDns** |Primary DNS IP |

        **secondaryDns** |Secondary DNS IP |

        **domainName** |Domain Name of Edge |

        **domainName** |Secondary Domain Name of Edge |


        #### vNIC Parameters: Edge Services Gateway Only


        Parameter |  Description | Comments

        ---|---|---

        **vnic** |Configure interface (vNic).|Required. Until one connected vNic
        is configured, none of the configured features will serve the network.

        **index** |Index of vNic to be configured. Value varies from 0-9. 4094
        sub-interfaces can be configured in trunk mode.|Required. 

        **name** |Name of the vNic.|Optional. System provides default names:
        vnic0...vnic9.

        **label** |Label for the vNic.|Optional. System provides default labels:
        vNic_0...vNic_9.

        **type** |Type of interface connected to vNic.|Optional. Choice of:
        *Uplink*, *Internal*, *TRUNK*. Default is *Internal*. *TRUNK* should be
        specified when sub-interfaces are configured.

        **portgroupId** |Connect NSX Edge to the network through this port
        group.|Required. Choice of: *portgroupId* or *virtualWireId*.
        *portgroupId* needs to be defined if *isConnected=true*

        **addressGroup** |Address Group assigned to vNic.|Required. More than
        one addressGroup/subnets can be assigned to the vNic.

        **primaryAddress** |Primary Address of Edge Interface.|Required. IPv4
        and IPv6 addresses are supported.

        **secondaryAddresses > ipAddress** |IP assigned to interface.|Optional.
        One or more **ipAddress** parameters are allowed, to enable assigning
        multiple IP addresses to a vNic, for example, for load balancing, NAT,
        VPN. At least one is required if **secondaryAddresses** is specified. 

        **subnetMask** or **subnetPrefixLength** |Subnet mask or prefix value. 
        |Required. Either **subnetMask** or **subnetPrefixLength** should be
        provided. When both are provided then **subnetprefixLength** is ignored.

        **macAddress** |Option to manually specify the MAC address. |Optional. 
        Managed by vCenter if not provided.

        **macAddress > edgeVmHaIndex** |HA index of the Edge VM. |Required. 0 or
        1.

        **macAddress > value** |Value of the MAC address.|Optional. Ensure that
        MAC addresses provided are unique within the given layer 2 domain.

        **vnic > mtu** |The maximum transmission value for the data
        packets.|Optional.  Default is *1500*.

        **enableProxyArp** |Enables proxy ARP. Do not use this flag unless you
        want NSX Edge to proxy ARP for all configured subnets.  |Optional. 
        True/False. Default is *false*.

        **enableSendRedirects** |Enables ICMP redirect. |Optional. True/False. 
        Default is *true*.

        **isConnected** |Sets if the interface is connected to the port group
        network. |Optional. True/False. Default is *false*. **portgroupId**
        needs to be defined if *isConnected=true*.

        **inShapingPolicy** |Configure Incoming Traffic.|Optional. 

        **outShapingPolicy** |Configure Outgoing Traffic.|Optional. 

        **averageBandwidth**<br>(inShapingPolicy or outShapingPolicy) |Sets
        average bandwidth for traffic.|Optional. 

        **peakBandwidth**<br>(inShapingPolicy or outShapingPolicy) |Sets peak
        bandwidth for traffic.|Required. 

        **burstSize**<br>(inShapingPolicy or outShapingPolicy) |Sets the burst
        size of the interface.|Required. 

        **enabled**<br>(inShapingPolicy or outShapingPolicy) |Enable/disable
        status of this traffic policy.|Required. 

        **inherited**<br>(inShapingPolicy or outShapingPolicy) |Determine
        whether properties should be inherited to the vNic from the port
        group.|Required. 


        #### HA (Management) Interfaces and Interfaces Configuration: Logical
        (Distributed) Router Only


        Parameter |  Description | Comments 

        ---|---|---

        **mgmtInterface** | High availability interface configuration. Interface
        index 0 is assigned. | Required.

        **interface** | Interface configuration. 1-9 are reserved for uplinks,
        10-999 are used for internal interfaces. | Optional. Can be added after
        logical router creation.

        **connectedToId**<br>(mgmtInterface or interface) | Managed Object ID of
        logical switch or port group. | For example, *virtualwire-1* or
        *dvportgroup-50*. Logical router interfaces do not support legacy port
        groups. 

        **name**<br>(mgmtInterface or interface) | Name assigned to interface. |
        Optional.

        **addressGroup**<br>(mgmtInterface or interface) |Address Group assigned
        to interface. |Required. Only one **addressGroup** can be configured on
        each logical router **mgmtInterface** or **interface**.

        **primaryAddress**<br>(mgmtInterface or interface) |Primary Address of
        interface. |Required. Secondary Addresses are not supported on logical
        routers. Address must be IPv4.

        **subnetMask** or **subnetPrefixLength**<br>(mgmtInterface or interface)
        |Subnet mask or prefix value.  |Required. Either **subnetMask** or
        **subnetPrefixLength** should be provided. When both are provided then
        **subnetprefixLength** is ignored.

        **mtu**<br>(mgmtInterface or interface) |The maximum transmission value
        for the data packets. |Optional. Default is 1500.

        **type** | Type of interface. | Required. Choice of *uplink* or
        *internal*. 



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <edge>
                  <datacenterMoid>datacenter-2</datacenterMoid>
                  <name>org1-edge</name>
                  <description>Description for the edge gateway</description>
                  <tenant>org1</tenant>
                  <fqdn>org1edge1</fqdn>
                  <vseLogLevel>info</vseLogLevel>
                  <enableAesni>false</enableAesni>
                  <enableFips>true</enableFips>
                  <appliances>
                    <applianceSize>compact</applianceSize>
                    <enableCoreDump>true</enableCoreDump>
                    <appliance>
                      <resourcePoolId>resgroup-53</resourcePoolId>
                      <datastoreId>datastore-29</datastoreId>
                      <hostId>host-28</hostId> 
                      <vmFolderId>group-v38</vmFolderId> 
                      <customField> 
                        <key>system.service.vmware.vsla.main01</key>
                        <value>string</value>
                      </customField>
                      <cpuReservation> 
                        <limit>2399</limit>
                        <reservation>500</reservation>
                        <shares>500</shares>
                      </cpuReservation>
                      <memoryReservation> 
                        <limit>5000</limit>
                        <reservation>500</reservation>
                        <shares>20480</shares>
                      </memoryReservation>
                    </appliance>
                  </appliances>
                  <vnics>
                    <vnic>
                      <index>0</index>
                      <name>internal0</name>
                      <type>internal</type>
                      <portgroupId>dvportgroup-114</portgroupId>
                      <addressGroups>
                        <addressGroup>
                          <primaryAddress>192.168.3.1</primaryAddress>
                          <secondaryAddresses>
                            <ipAddress>192.168.3.2</ipAddress>
                            <ipAddress>192.168.3.3</ipAddress>
                          </secondaryAddresses>
                          <subnetMask>255.255.255.0</subnetMask>
                        </addressGroup>
                        <addressGroup>
                          <primaryAddress>192.168.4.1</primaryAddress>
                          <secondaryAddresses>
                            <ipAddress>192.168.4.2</ipAddress>
                            <ipAddress>192.168.4.3</ipAddress>
                          </secondaryAddresses>
                          <subnetPrefixLength>24</subnetPrefixLength>
                        </addressGroup>
                        <addressGroup>
                          <primaryAddress>ffff::1</primaryAddress>
                          <secondaryAddresses>
                            <ipAddress>ffff::2</ipAddress>
                          </secondaryAddresses>
                          <subnetPrefixLength>64</subnetPrefixLength>
                        </addressGroup>
                      </addressGroups>
                      <macAddress>
                        <edgeVmHaIndex>0</edgeVmHaIndex>
                        <value>00:50:56:01:03:23</value>
                      </macAddress>
                      <fenceParameter>
                        <key>ethernet0.filter1.param1</key>
                        <value>1</value>
                      </fenceParameter>
                      <mtu>1500</mtu>
                      <enableProxyArp>false</enableProxyArp>
                      <enableSendRedirects>true</enableSendRedirects>
                      <isConnected>true</isConnected>
                      <inShapingPolicy>
                        <averageBandwidth>200000000</averageBandwidth>
                        <peakBandwidth>200000000</peakBandwidth>
                        <burstSize>0</burstSize>
                        <enabled>true</enabled>
                        <inherited>false</inherited>
                      </inShapingPolicy>
                      <outShapingPolicy>
                        <averageBandwidth>400000000</averageBandwidth>
                        <peakBandwidth>400000000</peakBandwidth>
                        <burstSize>0</burstSize>
                        <enabled>true</enabled>
                        <inherited>false</inherited>
                      </outShapingPolicy>
                    </vnic>
                  </vnics>
                  <cliSettings>
                    <userName>test</userName>
                    <password>test123!</password>
                    <remoteAccess>false</remoteAccess>
                  </cliSettings>
                  <autoConfiguration>
                    <enabled>true</enabled>
                    <rulePriority>high</rulePriority>
                  </autoConfiguration>
                  <dnsClient>
                    <primaryDns>10.117.0.1</primaryDns>
                    <secondaryDns>10.117.0.2</secondaryDns>
                    <domainName>vmware.com</domainName>
                    <domainName>foo.com</domainName>
                  </dnsClient>
                  <queryDaemon>
                    <enabled>true</enabled>
                    <port>5666</port>
                  </queryDaemon>
                </edge>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: isUniversal
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: nsxEdgesRead
      description: >+
        Retrieve a list of all NSX Edges in your inventory. You can use the
        query

        parameters to filter results.



        Parameters:

      parameters:
        - name: datacenter
          in: query
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pg
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}:
    post:
      tags:
        - edges
      summary: nsxEdgeCreate
      description: |+
        Manage NSX Edge.

        Parameters:

        edgeId: Specify the ID of the edge in *edgeId*.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: action
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: nsxEdgeRead
      description: >+
        Retrieve information about the specified NSX Edge.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **haAdminState**, **configuredResourcePool**,
        **configuredDataStore**, **configuredHost**, **configuredVmFolder**
        parameters added. 



        Parameters:


        edgeId: Specify the ID of the edge in *edgeId*.

      parameters:
        - name: isUniversal
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: nsxEdgeUpdate
      description: >+
        Update the NSX Edge configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **haAdminState** parameter added.

        6.3.0 | Method updated. **dnatMatchSourceAddress**,
        **snatMatchDestinationAddress**, **dnatMatchSourcePort**,
        **snatMatchDestinationPort** parameters added. <br>**protocol**,
        **originalPort**, and **translatedPort** now supported in SNAT rules.



        Parameters:


        edgeId: Specify the ID of the edge in *edgeId*.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <edge>
                  <id></id>
                  <description></description>
                  <datacenterMoid></datacenterMoid>
                  <name></name>
                  <type></type>
                  <fqdn></fqdn>
                  <enableAesni></enableAesni>
                  <enableFips></enableFips>
                  <vseLogLevel></vseLogLevel>
                  <vnics>
                    <vnic>
                      <index></index>
                      <name></name>
                      <type></type>
                      <portgroupId></portgroupId>
                      <addressGroups>
                        <addressGroup>
                          <primaryAddress></primaryAddress>
                          <secondaryAddresses>
                            <ipAddress></ipAddress>
                          </secondaryAddresses>
                          <subnetMask></subnetMask>
                        </addressGroup>
                      </addressGroups>
                      <mtu></mtu>
                      <enableProxyArp></enableProxyArp>
                      <enableSendRedirects></enableSendRedirects>
                      <isConnected></isConnected>
                      <inShapingPolicy>
                        <averageBandwidth></averageBandwidth>
                        <peakBandwidth></peakBandwidth>
                        <burstSize></burstSize>
                        <enabled></enabled>
                        <inherited></inherited>
                      </inShapingPolicy>
                      <outShapingPolicy>
                        <averageBandwidth></averageBandwidth>
                        <peakBandwidth></peakBandwidth>
                        <burstSize></burstSize>
                        <enabled></enabled>
                        <inherited></inherited>
                      </outShapingPolicy>
                    </vnic>
                  </vnics>
                  <appliances>
                    <applianceSize></applianceSize>
                    <appliance>
                      <haAdminState></haAdminState>
                      <resourcePoolId></resourcePoolId>
                      <datastoreId></datastoreId>
                      <vmFolderId></vmFolderId>
                    </appliance>
                  </appliances>
                  <cliSettings>
                    <remoteAccess></remoteAccess>
                    <userName></userName>
                  </cliSettings>
                  <features>
                    <firewall>
                      <defaultPolicy>
                        <action></action>
                        <loggingEnabled></loggingEnabled>
                      </defaultPolicy>
                      <firewallRules>
                        <firewallRule>
                          <id></id>
                          <ruleTag></ruleTag>
                          <name></name>
                          <ruleType></ruleType>
                          <source>
                            <exclude></exclude>
                            <groupingObjectId></groupingObjectId>
                          </source>
                          <destination></destination>
                          <application>
                            <applicationId></applicationId>
                          </application>
                          <action></action>
                          <enabled></enabled>
                          <loggingEnabled></loggingEnabled>
                          <matchTranslated></matchTranslated>
                        </firewallRule>
                      </firewallRules>
                    </firewall>
                    <routing>
                      <staticRouting>
                        <defaultRoute>
                          <vnic></vnic>
                          <gatewayAddress></gatewayAddress>
                          <description></description>
                        </defaultRoute>
                        <staticRoutes>
                          <route>
                            <vnic></vnic>
                            <network></network>
                            <nextHop></nextHop>
                            <type></type>
                          </route>
                        </staticRoutes>
                      </staticRouting>
                      <ospf>
                        <enabled></enabled>
                      </ospf>
                    </routing>
                    <highAvailability>
                      <enabled></enabled>
                      <declareDeadTime></declareDeadTime>
                      <logging>
                        <enable></enable>
                        <logLevel></logLevel>
                      </logging>
                    </highAvailability>
                    <syslog>
                      <protocol></protocol>
                      <serverAddresses>
                        <ipAddress></ipAddress>
                      </serverAddresses>
                    </syslog>
                    <ipsec>
                      <enabled></enabled>
                      <logging>
                        <enable></enable>
                        <logLevel></logLevel>
                      </logging>
                      <sites>
                        <site>
                          <enabled></enabled>
                          <name></name>
                          <localId></localId>
                          <localIp></localIp>
                          <peerId></peerId>
                          <encryptionAlgorithm></encryptionAlgorithm>
                          <mtu></mtu>
                          <enablePfs></enablePfs>
                          <dhGroup></dhGroup>
                          <localSubnets>
                            <subnet></subnet>
                          </localSubnets>
                          <peerSubnets>
                            <subnet></subnet>
                          </peerSubnets>
                          <psk></psk>
                          <authenticationMode></authenticationMode>
                        </site>
                      </sites>
                      <global>
                        <caCertificates/>
                        <crlCertificates/>
                      </global>
                    </ipsec>
                    <dhcp>
                      <enabled></enabled>
                      <staticBindings>
                        <staticBinding>
                          <autoConfigureDNS></autoConfigureDNS>
                          <bindingId></bindingId>
                          <vmId></vmId>
                          <vnicId></vnicId>
                          <hostname></hostname>
                          <ipAddress></ipAddress>
                          <defaultGateway></defaultGateway>
                          <leaseTime></leaseTime>
                        </staticBinding>
                      </staticBindings>
                      <ipPools>
                        <ipPool>
                          <autoConfigureDNS></autoConfigureDNS>
                          <poolId></poolId>
                          <ipRange></ipRange>
                          <defaultGateway></defaultGateway>
                          <leaseTime></leaseTime>
                        </ipPool>
                      </ipPools>
                      <logging>
                        <enable></enable>
                        <logLevel></logLevel>
                      </logging>
                    </dhcp>
                    <nat>
                      <natRules>
                        <natRule>
                          <ruleId></ruleId>
                          <ruleTag></ruleTag>
                          <ruleType></ruleType>
                          <action>dnat</action>
                          <vnic></vnic>
                          <originalAddress></originalAddress>
                          <translatedAddress></translatedAddress>
                          <dnatMatchSourceAddress></dnatMatchSourceAddress>
                          <loggingEnabled></loggingEnabled>
                          <enabled></enabled>
                          <protocol></protocol>
                          <originalPort></originalPort>
                          <translatedPort></translatedPort>
                          <dnatMatchSourcePort></dnatMatchSourcePort>
                        </natRule>
                      </natRules>
                    </nat>
                  </features>
                  <autoConfiguration>
                    <enabled></enabled>
                    <rulePriority></rulePriority>
                  </autoConfiguration>
                </edge>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: nsxEdgeDelete
      description: |+
        Delete specified NSX Edge configuration. Associated appliances are
        also deleted.


        Parameters:

        edgeId: Specify the ID of the edge in *edgeId*.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dnsclient:
    put:
      tags:
        - edges
      summary: edgeDnsClientUpdate
      description: |+
        Update Edge DNS settings.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <dnsClient>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <domainName></domainName>
                </dnsClient>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/aesni:
    post:
      tags:
        - edges
      summary: aesniCreate
      description: |+
        Modify AESNI setting.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: enable
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/coredump:
    post:
      tags:
        - edges
      summary: coreDumpCreate
      description: |+
        Modify core dump setting.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/fips:
    post:
      tags:
        - edges
      summary: fipsCreate
      description: |+
        Modify FIPS setting.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: enable
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/logging:
    post:
      tags:
        - edges
      summary: loggingCreate
      description: |+
        Modify log setting.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: level
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/summary:
    get:
      tags:
        - edges
      summary: summaryRead
      description: >+
        Retrieve details about the specified NSX Edge.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. **enableFips** parameter added to
        **appliancesSummary**.



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/status:
    get:
      tags:
        - edges
      summary: statusRead
      description: >+
        Retrieve the status of the specified Edge.


        The **edgeStatus** has the following possible states:

        * *GREEN*: Health checks are successful, status is good.

        * *YELLOW*: Intermittent health check failure. If health check fails
          for five consecutive times for all appliances, status will turn
          *RED*.
        * *GREY*: unknown status.

        * *RED*: None of the appliances for this NSX Edge are in a serving
        state.



        Parameters:

      parameters:
        - name: getlatest
          in: query
          schema:
            type: string
        - name: detailed
          in: query
          schema:
            type: string
        - name: preRulesStatus
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/techsupportlogs:
    get:
      tags:
        - edges
      summary: techSupportLogsRead
      description: |+
        Retrieve the tech support logs for Edge.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/clisettings:
    put:
      tags:
        - edges
      summary: cliSettingsUpdate
      description: |+
        Modify CLI credentials and enable/disable SSH for Edge.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <cliSettings>
                  <userName></userName>
                  <password></password>
                  <remoteAccess></remoteAccess>
                  <passwordExpiry></passwordExpiry>
                  <sshLoginBannerText></sshLoginBannerText>
                </cliSettings>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/cliremoteaccess:
    post:
      tags:
        - edges
      summary: cliRemoteCreate
      description: |+
        Change CLI remote access

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: enable
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/systemcontrol/config:
    put:
      tags:
        - edges
      summary: nsxEdgeSystemControlUpdate
      description: |+
        Update the NSX Edge system control (sysctl) configuration.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <systemControl>
                  <property></property>
                </systemControl>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: nsxEdgeSystemControlRead
      description: |+
        Retrieve all NSX Edge system control configuration.

        If no system control parameters are configured, the response is empty.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: nsxEdgeSystemControlDelete
      description: |+
        Delete all NSX Edge system control configuration.

        Deleting the system control configuration requires a reboot of the
        NSX Edge appliance.


        Parameters:

      parameters:
        - name: rebootNow
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config:
    get:
      tags:
        - edges
      summary: nsxEdgeFirewallConfigRead
      description: >+
        Retrieve the NSX Edge firewall configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **enableSynFloodProtection** parameter added. 

        6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays**
        parameters added. 



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: nsxEdgeFirewallConfigUpdate
      description: >+
        Configure NSX Edge firewall.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **enableSynFloodProtection** parameter added.
        Default value of **tcpTimeoutEstablished** increased from 3600 to 21600
        seconds (6 hours).

        6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays**
        parameters added. 



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewall>
                  <defaultPolicy> 
                    <action>deny</action>
                    <loggingEnabled>false</loggingEnabled>  
                  </defaultPolicy>
                  <globalConfig>  
                    <tcpPickOngoingConnections>false</tcpPickOngoingConnections>  
                    <tcpAllowOutOfWindowPackets>false</tcpAllowOutOfWindowPackets>  
                    <tcpSendResetForClosedVsePorts>true</tcpSendResetForClosedVsePorts>  
                    <dropInvalidTraffic>true</dropInvalidTraffic>  
                    <logInvalidTraffic>false</logInvalidTraffic>  
                    <tcpTimeoutOpen>30</tcpTimeoutOpen>  
                    <tcpTimeoutEstablished>21600</tcpTimeoutEstablished>  
                    <tcpTimeoutClose>30</tcpTimeoutClose>  
                    <udpTimeout>60</udpTimeout>  
                    <icmpTimeout>10</icmpTimeout>  
                    <icmp6Timeout>10</icmp6Timeout>  
                    <ipGenericTimeout>120</ipGenericTimeout>  
                    <enableSynFloodProtection>false</enableSynFloodProtection> 
                    <logIcmpErrors>false</logIcmpErrors>
                    <dropIcmpReplays>false</dropIcmpReplays>
                  </globalConfig>
                  <firewallRules>
                    <firewallRule>
                      <ruleTag>1</ruleTag>  
                      <name>rule1</name>  
                      <source>  
                        <vnicGroupId>vnic-index-5</vnicGroupId>  
                        <groupingObjectId>ipset-128</groupingObjectId>  
                        <ipAddress>1.1.1.1</ipAddress>  
                      </source>
                      <destination>  
                        <groupingObjectId>ipset-126</groupingObjectId>  
                        <vnicGroupId>vnic-index-5</vnicGroupId>  
                        <groupingObjectId>ipset-128</groupingObjectId>  
                        <ipAddress>192.168.10.0/24</ipAddress>  
                      </destination>
                      <application>  
                        <applicationId>application-155</applicationId>  
                        <service>  
                          <protocol>tcp</protocol>
                          <port>80</port>  
                          <sourcePort>1500</sourcePort>  
                        </service>
                      </application>
                      <matchTranslated>true</matchTranslated>  
                      <direction>in</direction>  
                      <action>accept</action>  
                      <enabled>true</enabled>  
                      <loggingEnabled>true</loggingEnabled>  
                      <description>comments</description>  
                    </firewallRule>
                  </firewallRules>
                </firewall>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: nsxEdgeFirewallConfigDelete
      description: |+
        Delete NSX Edge firewall configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/rules:
    post:
      tags:
        - edges
      summary: firewallRulesCreate
      description: |+
        Add one or more rules. You can add a rule above a specific rule
        using the query parameter, indicating the desired ruleID.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallRules>
                  <firewallRule>
                    <ruleTag></ruleTag>
                    <name></name>
                    <source>
                      <ipAddress></ipAddress>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                    </source>
                    <destination>
                      <ipAddress></ipAddress>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                    </destination>
                    <application>
                      <applicationId></applicationId>
                      <service>
                        <protocol></protocol>
                        <port></port>
                        <sourcePort></sourcePort>
                      </service>
                    </application>
                    <matchTranslated></matchTranslated>
                    <direction></direction>
                    <action></action>
                    <enabled></enabled>
                    <loggingEnabled></loggingEnabled>
                    <description></description>
                  </firewallRule>
                </firewallRules>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: aboveRuleId
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/rules/{ruleId}:
    get:
      tags:
        - edges
      summary: firewallRuleRead
      description: |+
        Retrieve specific rule.

        Parameters:

        ruleId: Rule ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: firewallRuleUpdate
      description: |+
        Modify a specific firewall rule.

        Parameters:

        ruleId: Rule ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallRule>
                  <ruleTag></ruleTag>
                  <name></name>
                  <source>
                    <vnicGroupId></vnicGroupId>
                    <groupingObjectId></groupingObjectId>
                    <ipAddress></ipAddress>
                  </source>
                  <destination>
                    <groupingObjectId></groupingObjectId>
                    <vnicGroupId></vnicGroupId>
                    <ipAddress></ipAddress>
                  </destination>
                  <application>
                    <applicationId></applicationId>
                    <service>
                      <protocol></protocol>
                      <port></port>
                      <sourcePort></sourcePort>
                    </service>
                  </application>
                  <matchTranslated></matchTranslated>
                  <direction></direction>
                  <action></action>
                  <enabled></enabled>
                  <loggingEnabled></loggingEnabled>
                  <description></description>
                </firewallRule>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: firewallRuleDelete
      description: |+
        Delete firewall rule

        Parameters:

        ruleId: Rule ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/global:
    get:
      tags:
        - edges
      summary: globalFirewallConfigRead
      description: >+
        Retrieve the firewall default policy for an Edge.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **enableSynFloodProtection** parameter added. 

        6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays**
        parameters added. 



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: globalFirewallConfigUpdate
      description: >+
        Configure firewall global config for an Edge.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **enableSynFloodProtection** parameter added.
        Default value of **tcpTimeoutEstablished** increased from 3600 to 21600
        seconds (6 hours).

        6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays**
        parameters added. 



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <globalConfig>
                  <tcpPickOngoingConnections></tcpPickOngoingConnections>
                  <tcpAllowOutOfWindowPackets></tcpAllowOutOfWindowPackets>
                  <tcpSendResetForClosedVsePorts></tcpSendResetForClosedVsePorts>
                  <dropInvalidTraffic></dropInvalidTraffic>
                  <logInvalidTraffic></logInvalidTraffic>
                  <tcpTimeoutOpen></tcpTimeoutOpen>
                  <tcpTimeoutEstablished></tcpTimeoutEstablished>
                  <tcpTimeoutClose></tcpTimeoutClose>
                  <udpTimeout></udpTimeout>
                  <icmpTimeout></icmpTimeout>
                  <icmp6Timeout></icmp6Timeout>
                  <ipGenericTimeout></ipGenericTimeout>
                  <enableSynFloodProtection></enableSynFloodProtection>
                  <logIcmpErrors></logIcmpErrors>
                  <dropIcmpReplays></dropIcmpReplays>
                </globalConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/defaultpolicy:
    get:
      tags:
        - edges
      summary: defaultFirewallPolicyRead
      description: |+
        Retrieve default firewall policy

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: defaultFirewallPolicyUpdate
      description: |+
        Configure default firewall policy

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDefaultPolicy>
                  <action></action>
                  <loggingEnabled></loggingEnabled>
                </firewallDefaultPolicy>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/statistics/firewall:
    get:
      tags:
        - edges
      summary: firewallStatisticsRead
      description: |+
        Retrieve number of ongoing connections for the firewall
        configuration.


        Parameters:

      parameters:
        - name: interval
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/statistics/{ruleId}:
    get:
      tags:
        - edges
      summary: firewallRuleStatisticsRead
      description: |+
        Retrieve stats for firewall rule.

        Parameters:

        ruleId: Specified rule.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/nat/config:
    put:
      tags:
        - edges
      summary: edgeNatConfig
      description: >+
        Configure SNAT and DNAT rules for an Edge.


        If you use this method to add new NAT rules, you must include all

        existing rules in the request body. Any rules that are omitted will

        be deleted.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. **dnatMatchSourceAddress**,
        **snatMatchDestinationAddress**, **dnatMatchSourcePort**,
        **snatMatchDestinationPort** parameters added. <br>**protocol**,
        **originalPort**, and **translatedPort** now supported in SNAT rules.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nat>
                  <natRules>
                    <natRule>
                      <ruleTag>65537</ruleTag>   
                      <action>dnat</action>
                      <vnic>0</vnic> 
                      <originalAddress>10.112.196.116</originalAddress>
                      <translatedAddress>172.16.1.10</translatedAddress>
                      <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                      <loggingEnabled>true</loggingEnabled>   
                      <enabled>true</enabled>   
                      <description>my comments</description>   
                      <protocol>tcp</protocol>   
                      <originalPort>3389</originalPort>   
                      <translatedPort>3389</translatedPort>   
                      <dnatMatchSourcePort>any</dnatMatchSourcePort>
                    </natRule>
                    <natRule>
                      <ruleTag>65538</ruleTag>   
                      <action>snat</action>
                      <vnic>1</vnic> 
                      <originalAddress>172.16.1.10</originalAddress>
                      <translatedAddress>10.112.196.116</translatedAddress>
                      <snatMatchDestinationAddress>any</snatMatchDestinationAddress>
                      <loggingEnabled>false</loggingEnabled>   
                      <enabled>true</enabled>   
                      <description>no comments</description>   
                      <snatMatchDestinationPort>any</snatMatchDestinationPort>
                    </natRule>
                  </natRules>
                </nat>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: edgeNatRead
      description: >+
        Retrieve SNAT and DNAT rules for the specified NSX Edge.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. **dnatMatchSourceAddress**,
        **snatMatchDestinationAddress**, **dnatMatchSourcePort**,
        **snatMatchDestinationPort** parameters added. <br>**protocol**,
        **originalPort**, and **translatedPort** now supported in SNAT rules.



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: edgeNatDelete
      description: |+
        Delete all NAT rules for the specified NSX Edge.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/nat/config/rules:
    post:
      tags:
        - edges
      summary: edgeNatRulesCreate
      description: >+
        Add a NAT rule above a specific rule in the NAT rules table (using

        **aboveRuleId** query parameter) or append NAT rules to the bottom.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. **dnatMatchSourceAddress**,
        **snatMatchDestinationAddress**, **dnatMatchSourcePort**,
        **snatMatchDestinationPort** parameters added. <br>**protocol**,
        **originalPort**, and **translatedPort** now supported in SNAT rules.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <natRule>
                  <action>dnat</action>
                  <vnic>0</vnic>
                  <originalAddress>10.112.196.116</originalAddress>
                  <translatedAddress>172.16.1.10</translatedAddress>
                  <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                  <loggingEnabled>true</loggingEnabled>
                  <enabled>true</enabled>
                  <description>my comments</description>
                  <protocol>tcp</protocol>
                  <translatedPort>3389</translatedPort>
                  <originalPort>3389</originalPort>
                  <dnatMatchSourcePort>any</dnatMatchSourcePort>
                </natRule>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: aboveRuleId
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/nat/config/rules/{ruleID}:
    put:
      tags:
        - edges
      summary: edgeNatRuleUpdate
      description: >+
        Update the specified NAT rule.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. **dnatMatchSourceAddress**,
        **snatMatchDestinationAddress**, **dnatMatchSourcePort**,
        **snatMatchDestinationPort** parameters added. <br>**protocol**,
        **originalPort**, and **translatedPort** now supported in SNAT rules.



        Parameters:


        ruleID: Specified rule ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <natRule>
                  <action>dnat</action>
                  <vnic>0</vnic>
                  <originalAddress>10.112.196.116</originalAddress>
                  <translatedAddress>172.16.1.10</translatedAddress>
                  <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                  <loggingEnabled>true</loggingEnabled>
                  <enabled>true</enabled>
                  <description>my comments</description>
                  <protocol>tcp</protocol>
                  <translatedPort>3389</translatedPort>
                  <originalPort>3389</originalPort>
                  <dnatMatchSourcePort>any</dnatMatchSourcePort>
                </natRule>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: edgeNatRuleDelete
      description: |+
        Delete the specified NAT rule.

        Parameters:

        ruleID: Specified rule ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config:
    get:
      tags:
        - edges
      summary: routingConfigRead
      description: >+
        Retrieve routes.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **isis** configuration section removed. 

        6.3.0 | Method updated. Parameter **defaultOriginate** removed for
        logical router NSX Edges.  <br>Parameter **translateType7ToType5** added
        to OSPF section. <br>Parameters **localASNumber** and **remoteASNumber**
        added to BGP section.



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: routingConfigUpdate
      description: >+
        Configure NSX Edge global routing configuration, static routing, and

        dynamic routing (OSPF and BGP).


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **isis** configuration section removed. 

        6.3.0 | Method updated. Parameter **defaultOriginate** removed for
        logical router NSX Edges.  <br>Parameter **translateType7ToType5** added
        to OSPF section. <br>Parameters **localASNumber** and **remoteASNumber**
        added to BGP section.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <routing>
                  <routingGlobalConfig>
                    <routerId>1.1.1.1</routerId>   
                    <logging>   
                      <enable>false</enable>
                      <logLevel>info</logLevel>
                    </logging>
                    <ipPrefixes>   
                      <ipPrefix>
                        <name>a</name>
                        <ipAddress>192.168.10.0/24</ipAddress>
                      </ipPrefix>
                    </ipPrefixes>
                  </routingGlobalConfig>
                  <staticRouting>
                    <staticRoutes>   
                      <route>
                        <description>route1</description>
                        <vnic>0</vnic>
                        <network>3.1.1.0/22</network>
                        <nextHop>172.16.1.14</nextHop>
                        <mtu>1500</mtu>   
                      </route>
                    </staticRoutes>
                    <defaultRoute>   
                    <description>defaultRoute</description>
                    <vnic>0</vnic>
                    <gatewayAddress>172.16.1.12</gatewayAddress>
                    <mtu>1500</mtu>   
                    </defaultRoute>
                  </staticRouting>
                  <ospf>    
                    <enabled>true</enabled>   
                    <forwardingAddress>192.168.10.2</forwardingAddress> 
                    <protocolAddress>192.168.10.3</protocolAddress>
                    <ospfAreas>
                      <ospfArea>
                        <areaId>100</areaId> 
                        <translateType7ToType5>true</translateType7ToType5>
                        <type>normal</type> 
                        <authentication>    
                          <type>password</type>   
                          <value>vmware123</value>
                        </authentication>
                      </ospfArea>
                    </ospfAreas>
                    <ospfInterfaces>
                      <ospfInterface>
                        <vnic>0</vnic>
                        <areaId>100</areaId>
                        <helloInterval>10</helloInterval> 
                        <deadInterval>40</deadInterval>  
                        <priority>128</priority> 
                        <cost>10</cost> 
                        <mtuIgnore>false</mtuIgnore>
                      </ospfInterface>
                    </ospfInterfaces>
                    <redistribution>
                      <enabled>true</enabled>
                      <rules>
                        <rule>
                          <prefixName>a</prefixName>   
                          <from>
                            <ospf>false</ospf>       
                            <bgp>false</bgp>        
                            <static>false</static> 
                            <connected>true</connected>
                          </from>
                          <action>deny</action> 
                        </rule>
                        <rule>
                          <prefixName>b</prefixName> 
                          <from>
                            <ospf>false</ospf>         
                            <bgp>true</bgp>           
                            <static>false</static>     
                            <connected>false</connected>  
                          </from>
                          <action>permit</action>     
                        </rule>
                      </rules>
                    </redistribution>
                  </ospf> 
                  <bgp>      
                    <enabled>true</enabled>     
                    <localAS>65535</localAS>          
                    <localASNumber>65535</localASNumber>          
                    <bgpNeighbours>
                      <bgpNeighbour>
                        <ipAddress>192.168.10.10</ipAddress>  
                        <forwardingAddress>192.168.1.10</forwardingAddress>   
                        <protocolAddress>192.168.1.11</protocolAddress>      
                        <remoteAS>65500</remoteAS> 
                        <remoteASNumber>65500</remoteASNumber> 
                        <weight>60</weight>  
                        <holdDownTimer>180</holdDownTimer> 
                        <keepAliveTimer>60</keepAliveTimer>     
                        <password>vmware123</password>   
                        <bgpFilters>              
                          <bgpFilter>
                            <direction>in</direction>  
                            <action>permit</action> 
                            <network>10.0.0.0/8</network> 
                            <ipPrefixGe>17</ipPrefixGe>  
                            <ipPrefixLe>32</ipPrefixLe> 
                          </bgpFilter>
                        </bgpFilters>
                      </bgpNeighbour>
                    </bgpNeighbours>
                    <redistribution>
                      <enabled>true</enabled> 
                      <rules>
                        <rule>
                          <from>
                            <ospf>true</ospf> 
                            <bgp>false</bgp> 
                            <static>true</static>
                            <connected>false</connected> 
                          </from>
                          <action>deny</action> 
                        </rule>
                      </rules>
                    </redistribution>
                  </bgp>
                </routing>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: routingConfigDelete
      description: |+
        Delete the routing config stored in the NSX Manager database and the
        default routes from the specified NSX Edge appliance.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/global:
    put:
      tags:
        - edges
      summary: routingGlobalConfigUpdate
      description: |+
        Configure global route.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <routingGlobalConfig>
                  <routerId></routerId>
                  <ecmp></ecmp>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <ipPrefixes>
                    <ipPrefix>
                      <name></name>
                      <ipAddress></ipAddress>
                    </ipPrefix>
                  </ipPrefixes>
                </routingGlobalConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: routingGlobalConfigRead
      description: |+
        Retrieve routing info from NSX Manager database (default route
        settings, static route configurations).


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/static:
    get:
      tags:
        - edges
      summary: routingConfigStaticRead
      description: |+
        Read static and default routes.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: routingConfigStaticUpdate
      description: |+
        Configure static and default routes.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <staticRouting>
                  <staticRoutes>
                    <route>
                      <description></description>
                      <vnic></vnic>
                      <network></network>
                      <nextHop></nextHop>
                      <mtu></mtu>
                    </route>
                  </staticRoutes>
                  <defaultRoute>
                    <description></description>
                    <vnic></vnic>
                    <gatewayAddress></gatewayAddress>
                    <mtu></mtu>
                  </defaultRoute>
                </staticRouting>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: routingConfigStaticDelete
      description: |+
        Delete both static and default routing config stored in the NSX
        Manager database.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/ospf:
    get:
      tags:
        - edges
      summary: routingOSPFRead
      description: >+
        Retrieve OSPF configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **isis** configuration section removed. 

        6.3.0 | Method updated. Parameter **defaultOriginate** removed for
        logical router NSX Edges.  <br>Parameter **translateType7ToType5** added
        to OSPF section. 



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: routingOSPFUpdate
      description: >+
        Configure OSPF.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **isis** configuration section removed. 

        6.3.0 | Method updated. Parameter **defaultOriginate** removed for
        logical router NSX Edges.  <br>Parameter **translateType7ToType5** added
        to OSPF section. 



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ospf>
                  <enabled></enabled>
                  <ospfAreas>
                    <ospfArea>
                      <areaId></areaId>
                      <translateType7ToType5></translateType7ToType5>
                      <type></type>
                      <authentication>
                        <type></type>
                        <value></value>
                      </authentication>
                    </ospfArea>
                  </ospfAreas>
                  <ospfInterfaces>
                    <ospfInterface>
                      <vnic></vnic>
                      <areaId></areaId>
                      <helloInterval></helloInterval>
                      <deadInterval></deadInterval>
                      <priority></priority>
                      <cost></cost>
                    </ospfInterface>
                  </ospfInterfaces>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </ospf>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: routingOSPFDelete
      description: |+
        Delete OSPF routing.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/bgp:
    get:
      tags:
        - edges
      summary: routingBGPRead
      description: >+
        Retrieve BGP configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **isis** configuration section removed. 

        6.3.0 | Method updated. Parameter **defaultOriginate** removed for
        logical router NSX Edges.  <br>Parameters **localASNumber** and
        **remoteASNumber** added to BGP section.



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: routingBGPUpdate
      description: >+
        Configure BGP.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **isis** configuration section removed. 

        6.3.0 | Method updated. Parameter **defaultOriginate** removed for
        logical router NSX Edges. <br>Parameters **localASNumber** and
        **remoteASNumber** added to BGP section.



        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <bgp>
                  <enabled></enabled>
                  <localAS></localAS>
                  <localASNumber></localASNumber>
                  <bgpNeighbours>
                    <bgpNeighbour>
                      <ipAddress></ipAddress>
                      <remoteAS></remoteAS>
                      <remoteASNumber></remoteASNumber>
                      <weight></weight>
                      <holdDownTimer></holdDownTimer>
                      <keepAliveTimer></keepAliveTimer>
                      <password></password>
                      <bgpFilters>
                        <bgpFilter>
                          <direction></direction>
                          <action></action>
                          <network></network>
                          <ipPrefixGe></ipPrefixGe>
                          <ipPrefixLe></ipPrefixLe>
                        </bgpFilter>
                      </bgpFilters>
                    </bgpNeighbour>
                  </bgpNeighbours>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </bgp>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: routingBGPDelete
      description: |+
        Delete BGP Routing

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/bridging/config:
    get:
      tags:
        - edges
      summary: bridgingRead
      description: |+
        Retrieve bridge configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: bridingUpdate
      description: |+
        Configure a bridge.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <bridges>
                  <version></version>
                  <enabled></enabled>
                  <bridge>
                    <name></name>
                    <virtualWire></virtualWire>
                    <dvportGroup></dvportGroup>
                  </bridge>
                </bridges>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: bridgingDelete
      description: |+
        Delete bridges.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config:
    get:
      tags:
        - edges
      summary: loadBalancerRead
      description: |+
        Get load balancer configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: loadBalancerConfig
      description: |+
        Configure load balancer.

        The input contains five parts: application profile, virtual server,
        pool, monitor and application rule.

        For the data path to work, you need to add firewall rules to allow
        required traffic as per the load balancer configuration.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <loadBalancer>
                  <enabled></enabled>
                  <enableServiceInsertion></enableServiceInsertion>
                  <accelerationEnabled></accelerationEnabled>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <virtualServer>
                    <virtualServerId></virtualServerId>
                    <name></name>
                    <description></description>
                    <enabled></enabled>
                    <ipAddress></ipAddress>
                    <protocol></protocol>
                    <port></port>
                    <connectionLimit></connectionLimit>
                    <connectionRateLimit></connectionRateLimit>
                    <applicationProfileId></applicationProfileId>
                    <defaultPoolId></defaultPoolId>
                    <enableServiceInsertion></enableServiceInsertion>
                    <accelerationEnabled></accelerationEnabled>
                    <applicationRuleId></applicationRuleId>
                  </virtualServer>
                  <applicationProfile>
                    <applicationProfileId></applicationProfileId>
                    <name></name>
                    <insertXForwardedFor></insertXForwardedFor>
                    <sslPassthrough></sslPassthrough>
                    <template></template>
                    <persistence>
                      <method></method>
                      <cookieName></cookieName>
                      <cookieMode></cookieMode>
                    </persistence>
                    <serverSslEnabled></serverSslEnabled>
                    <clientSsl>
                      <clientAuth></clientAuth>
                      <serviceCertificate></serviceCertificate>
                    </clientSsl>
                  </applicationProfile>
                  <pool>
                    <poolId></poolId>
                    <name></name>
                    <description></description>
                    <transparent></transparent>
                    <algorithm></algorithm>
                    <monitorId></monitorId>
                    <member>
                      <memberId></memberId>
                      <ipAddress></ipAddress>
                      <weight></weight>
                      <port></port>
                      <monitorPort></monitorPort>
                      <minConn></minConn>
                      <maxConn></maxConn>
                      <name></name>
                    </member>
                  </pool>
                  <monitor>
                    <monitorId></monitorId>
                    <type></type>
                    <interval></interval>
                    <timeout></timeout>
                    <maxRetries></maxRetries>
                    <method></method>
                    <url></url>
                    <name></name>
                  </monitor>
                  <applicationRule>
                    <name></name>
                    <script></script>
                  </applicationRule>
                </loadBalancer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: loadBalancerDelete
      description: |+
        Delete load balancer configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationprofiles:
    post:
      tags:
        - edges
      summary: applicationProfilesCreate
      description: |+
        Add an application profile.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationProfile>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                </applicationProfile>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: applicationProfilesRead
      description: |+
        Retrieve all application profiles on the specified Edge.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: applicationProfilesDelete
      description: |+
        Delete all application profiles on the specified Edge.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationprofiles/{appProfileID}:
    put:
      tags:
        - edges
      summary: applicationProfileUpdate
      description: |+
        Modify an application profile.

        Parameters:

        appProfileID: Specified application profile.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationProfile>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                </applicationProfile>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: appProfileID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: applicationProfileRead
      description: |+
        Retrieve an application profile.

        Parameters:

        appProfileID: Specified application profile.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: appProfileID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: applicationProfileDelete
      description: |+
        Delete an application profile.

        Parameters:

        appProfileID: Specified application profile.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: appProfileID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationrules:
    post:
      tags:
        - edges
      summary: appRulesCreate
      description: |+
        Add an application rule.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: appRulesRead
      description: |+
        Retrieve all application rules.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: appRulesDelete
      description: |+
        Delete all application rules.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationrules/{appruleID}:
    get:
      tags:
        - edges
      summary: appRuleRead
      description: |+
        Retrieve an application rule.

        Parameters:

        appruleID: Specified application rule.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: appruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: appRuleUpdate
      description: |+
        Modify an application rule.

        Parameters:

        appruleID: Specified application rule.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: appruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: appRuleDelete
      description: |+
        Delete an application rule.

        Parameters:

        appruleID: Specified application rule.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: appruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/monitors:
    post:
      tags:
        - edges
      summary: lbMonitorsCreate
      description: |+
        Add a load balancer monitor.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <monitor>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: lbMonitorsRead
      description: |+
        Retrieve all load balancer monitors.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: lbMonitorsDelete
      description: |+
        Delete all load balancer monitors.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/monitors/{monitorID}:
    get:
      tags:
        - edges
      summary: lbMonitorRead
      description: |+
        Retrieve a load balancer monitor.

        Parameters:

        monitorID: Specified monitor.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: monitorID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: lbMonitorUpdate
      description: |+
        Modify a load balancer monitor.

        Parameters:

        monitorID: Specified monitor.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <monitor>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: monitorID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: lbMonitorDelete
      description: |+
        Delete a load balancer monitor.

        Parameters:

        monitorID: Specified monitor.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: monitorID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/virtualservers:
    post:
      tags:
        - edges
      summary: virtualServersCreate
      description: |+
        Add a virtual server.

        You can add an NSX Edge internal or uplink interface as a virtual
        server.

        Parameter |  Description | Comments
        ---|---|---
         **name**      |Name of virtual server.|Required.
         **description**     |Description of virtual server.|Optional.
         **enabled**    |Whether the virtual server is enabled.|Optional. Boolean. Options are *true* or *false*. Default is *true*.
         **ipAddress**      |IP address that the load balancer is listening on. |Required. A valid NSX Edge vNic IP address (IPv4 or IPv6).
         **protocol**      |Virtual server protocol.|Required. Options are: *HTTP*, *HTTPS*, *TCP*, *UDP*.
         **port**      |Port number or port range.|Required. Port number such as *80*, port range such as *80,443* or *1234-1238*, or a combination such as *443,6000-7000*.
         **connectionLimit**      |Maximum concurrent connections.|Optional. Long.
         **connectionRateLimit**      |Maximum incoming new connection requests per second.|Optional. Long.
         **defaultPoolId**      |Default backend server pool identifier.|Optional.
         **applicationProfileId**      |Application profile identifier.|Optional.
         **accelerationEnabled**      |Use the faster L4 load balancer  engine rather than L7 load  balancer engine.|Optional. Boolean. Options are *true* or *false*. If a virtual server configuration such as application rules, HTTP type, or cookie persistence, is using the L7 load balancer engine, then the L7 load balancer engine is used, even if **accelerationEnabled** is not set to true.
         **applicationRuleId**      |Application rule identifier list.|Optional. Each item should be a valid **applicationRuleId**.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <virtualServer>
                  <name>http_vip_2</name>
                  <description>http virtualServer 2</description>
                  <enabled>true</enabled>
                  <ipAddress>10.117.35.172</ipAddress>
                  <protocol>http</protocol>
                  <port>443,6000-7000</port>
                  <connectionLimit>123</connectionLimit>
                  <connectionRateLimit>123</connectionRateLimit>
                  <applicationProfileId>applicationProfile-1</applicationProfileId>
                  <defaultPoolId>pool-1</defaultPoolId>
                  <enableServiceInsertion>false</enableServiceInsertion>
                  <accelerationEnabled>true</accelerationEnabled>
                </virtualServer>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: virtualServersRead
      description: |+
        Retrieve all virtual servers.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: virtualServersDelete
      description: |+
        Delete all virtual servers.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/virtualservers/{virtualserverID}:
    get:
      tags:
        - edges
      summary: virtualServerRead
      description: |+
        Retrieve details for the specified virtual server.

        Parameters:

        virtualserverID: Specified virtual server ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: virtualserverID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: virtualServerDelete
      description: |+
        Delete the specified virtual server.

        Parameters:

        virtualserverID: Specified virtual server ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: virtualserverID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/pools:
    post:
      tags:
        - edges
      summary: poolsCreate
      description: |+
        Add a load balancer server pool to the Edge.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method updated. Member **condition** can be set to *drain*.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <pool>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <port></port>
                    <minConn></minConn>
                    <maxConn></maxConn>
                    <name></name>
                    <monitorPort></monitorPort>
                  </member>
                </pool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: poolsRead
      description: |+
        Get all server pools on the specified NSX Edge.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: poolsDelete
      description: |+
        Delete all server pools configured on the specified NSX Edge.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/pools/{poolID}:
    get:
      tags:
        - edges
      summary: poolRead
      description: |+
        Retrieve information about the specified server pool.

        Parameters:

        poolID: Specified pool ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: poolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: poolUpdate
      description: |+
        Update the specified server pool.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method updated. Member **condition** can be set to *drain*.


        Parameters:

        poolID: Specified pool ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <pool>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <monitorPort></monitorPort>
                    <port></port>
                    <maxConn></maxConn>
                    <minConn></minConn>
                    <condition>enabled</condition>
                    <name></name>
                  </member>
                </pool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: poolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: poolDelete
      description: |+
        Delete the specified server pool.

        Parameters:

        poolID: Specified pool ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: poolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/members/{memberID}:
    post:
      tags:
        - edges
      summary: lbMemberCondToggle
      description: |+
        Update enabled status of the specified member.

        Parameters:

        memberID: Member ID.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: enable
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: memberID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/statistics:
    get:
      tags:
        - edges
      summary: lbStatisticsRead
      description: |+
        Retrieve load balancer statistics.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/acceleration:
    post:
      tags:
        - edges
      summary: undefined
      description: |+


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: enable
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dns/config:
    get:
      tags:
        - edges
      summary: edgeDnsRead
      description: |+
        Retrieve DNS configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: edgeDnsUpdate
      description: |+
        Configure DNS servers.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <dns>
                  <version>2</version>
                  <enabled>true</enabled>
                  <cacheSize>128</cacheSize>
                  <listeners>
                    <ipAddress>192.168.100.1</ipAddress>
                    <ipAddress>192.168.100.2</ipAddress>
                  </listeners>
                  <dnsViews>
                    <dnsView>
                      <viewId>view-0</viewId>
                      <name>vsm-default-view</name>
                      <enabled>true</enabled>
                      <viewMatch>
                        <ipAddress>any</ipAddress>
                        <vnic>any</vnic>
                      </viewMatch>
                      <recursion>false</recursion>
                      <forwarders>
                        <ipAddress>10.117.0.1</ipAddress>
                      </forwarders>
                    </dnsView>
                  </dnsViews>
                  <logging>
                    <enable>true</enable>
                    <logLevel>info</logLevel>
                  </logging>
                </dns>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: edgeDnsDelete
      description: |+
        Delete DNS configuration

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dns/statistics:
    get:
      tags:
        - edges
      summary: edgeDnsStatsRead
      description: |+
        Get DNS server statistics

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config:
    get:
      tags:
        - edges
      summary: dhcpRead
      description: |+
        Get DHCP configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: dhcpUpdate
      description: |+
        Configure DHCP service.

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. DHCP options added.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <dhcp>
                  <enabled>true</enabled>
                  <staticBindings>
                    <staticBinding> 
                      <macAddress>12:34:56:78:90:AB</macAddress> 
                      <vmId>vm-111</vmId> 
                      <vnicId>1</vnicId>
                      <hostname>abcd</hostname>
                      <ipAddress>192.168.4.2</ipAddress> 
                      <subnetMask>255.255.255.0</subnetMask> 
                      <defaultGateway>192.168.4.1</defaultGateway> 
                      <domainName>eng.vmware.com</domainName> 
                      <primaryNameServer>192.168.4.1</primaryNameServer> 
                      <secondaryNameServer>4.2.2.4</secondaryNameServer> 
                      <leaseTime>infinite</leaseTime> 
                      <autoConfigureDNS>true</autoConfigureDNS> 
                    </staticBinding>
                  </staticBindings>
                  <ipPools>
                    <ipPool>
                      <ipRange>192.168.4.192-192.168.4.220</ipRange> 
                      <defaultGateway>192.168.4.1</defaultGateway> 
                      <subnetMask>255.255.255.0</subnetMask> 
                      <domainName>eng.vmware.com</domainName> 
                      <primaryNameServer>192.168.4.1</primaryNameServer> 
                      <secondaryNameServer>4.2.2.4</secondaryNameServer> 
                      <leaseTime>3600</leaseTime> 
                      <autoConfigureDNS>true</autoConfigureDNS> 
                      <nextServer>11.11.18.105</nextServer>  
                      <dhcpOptions> 
                        <option121> 
                          <staticRoute> 
                            <destinationSubnet>1.1.1.4/30</destinationSubnet>  
                            <router>10.10.10.254</router> 
                          </staticRoute>  
                          <staticRoute> 
                            <destinationSubnet>2.2.2.4/30</destinationSubnet>  
                            <router>10.10.10.210</router> 
                          </staticRoute> 
                        </option121>  
                        <option66>boot.tftp.org</option66>  
                        <option67>/opt/tftpServer</option67>  
                        <option150> 
                          <server>10.10.10.1</server>  
                          <server>100.100.100.1</server> 
                        </option150>  
                        <option26>2048</option26>  
                        <other> 
                          <code>80</code>  
                          <value>2F766172</value> 
                        </other>  
                        <other> 
                          <code>85</code>  
                          <value>01010101</value> 
                        </other> 
                      </dhcpOptions> 
                    </ipPool>
                  </ipPools>
                  <logging> 
                    <enable>false</enable> 
                    <logLevel>info</logLevel> 
                  </logging>
                </dhcp>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: dhcpDelete
      description: |+
        Delete the DHCP configuration, restoring it to factory default.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/ippools:
    post:
      tags:
        - edges
      summary: dhcpPoolCreate
      description: |+
        Add an IP pool to the DHCP configuration. Returns a pool ID within
        a Location HTTP header.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. DHCP options added.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipPool>
                  <ipRange>192.168.5.2-192.168.5.20</ipRange>
                  <defaultGateway>192.168.5.1</defaultGateway>
                  <domainName>eng.vmware.com</domainName>
                  <primaryNameServer>1.2.3.4</primaryNameServer>
                  <secondaryNameServer>4.3.2.1</secondaryNameServer>
                  <leaseTime>3600</leaseTime>
                  <autoConfigureDNS>true</autoConfigureDNS>
                  <nextServer>11.11.18.105</nextServer>  
                  <dhcpOptions> 
                    <option121> 
                      <staticRoute> 
                        <destinationSubnet>1.1.1.4/30</destinationSubnet>  
                        <router>10.10.10.254</router> 
                      </staticRoute>  
                      <staticRoute> 
                        <destinationSubnet>2.2.2.4/30</destinationSubnet>  
                        <router>10.10.10.210</router> 
                      </staticRoute> 
                    </option121>  
                    <option66>boot.tftp.org</option66>  
                    <option67>/opt/tftpServer</option67>  
                    <option150> 
                      <server>10.10.10.1</server>  
                      <server>100.100.100.1</server> 
                    </option150>  
                    <option26>2048</option26>  
                    <other> 
                      <code>80</code>  
                      <value>2F766172</value> 
                    </other>  
                    <other> 
                      <code>85</code>  
                      <value>01010101</value> 
                    </other> 
                  </dhcpOptions> 
                </ipPool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/ippools/{poolID}:
    delete:
      tags:
        - edges
      summary: dhcpPoolIDDelete
      description: |+
        Delete a pool specified by pool ID

        Parameters:

        poolID: Specified DHCP IP pool

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: poolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/bindings:
    post:
      tags:
        - edges
      summary: dhcpStaticBindingCreate
      description: |+
        Append a static-binding to DHCP config. A static-binding ID is
        returned within a Location HTTP header.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. DHCP options added.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <staticBinding>
                  <vmId></vmId>
                  <vnicId></vnicId>
                  <hostname></hostname>
                  <ipAddress></ipAddress>
                  <defaultGateway></defaultGateway>
                  <domainName></domainName>
                  <primaryNameServer></primaryNameServer>
                  <secondaryNameServer></secondaryNameServer>
                  <leaseTime></leaseTime>
                  <autoConfigureDNS></autoConfigureDNS>
                  <nextServer>11.11.18.105</nextServer>  
                  <dhcpOptions> 
                    <option121> 
                      <staticRoute> 
                        <destinationSubnet>1.1.1.4/30</destinationSubnet>  
                        <router>10.10.10.254</router> 
                      </staticRoute>  
                      <staticRoute> 
                        <destinationSubnet>2.2.2.4/30</destinationSubnet>  
                        <router>10.10.10.210</router> 
                      </staticRoute> 
                    </option121>  
                    <option66>boot.tftp.org</option66>  
                    <option67>/opt/tftpServer</option67>  
                    <option150> 
                      <server>10.10.10.1</server>  
                      <server>100.100.100.1</server> 
                    </option150>  
                    <option26>2048</option26>  
                    <other> 
                      <code>80</code>  
                      <value>2F766172</value> 
                    </other>  
                    <other> 
                      <code>85</code>  
                      <value>01010101</value> 
                    </other> 
                  </dhcpOptions> 
                </staticBinding>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/bindings/{bindingID}:
    delete:
      tags:
        - edges
      summary: dhcpStaticBindingIDDelete
      description: |+
        Delete the static-binding by ID

        Parameters:

        bindingID: Specified static-binding ID

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: bindingID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/relay:
    get:
      tags:
        - edges
      summary: dhcpRelayRead
      description: |+
        Query DHCP relay

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: dhcpRelayUpdate
      description: |+
        Configure DHCP relay

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <relay>
                  <relayServer>
                    <groupingObjectId></groupingObjectId>
                    <groupingObjectId></groupingObjectId>
                    <ipAddress></ipAddress>
                    <fqdn></fqdn>
                  </relayServer>
                  <relayAgents>
                    <relayAgent>
                      <vnicIndex></vnicIndex>
                      <giAddress></giAddress>
                    </relayAgent>
                  </relayAgents>
                </relay>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: dhcpRelayDelete
      description: |+
        Delete DHCP relay configuration

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/leaseInfo:
    get:
      tags:
        - edges
      summary: dhcpLeaseRead
      description: |+
        Get DHCP lease information.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/highavailability/config:
    get:
      tags:
        - edges
      summary: highAvailabilityRead
      description: |+
        Get high availability configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: highAvailabilityCreate
      description: |+
        Configure high availability.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <highAvailability>
                  <vnic></vnic>
                  <ipAddresses>
                    <ipAddress></ipAddress>
                  </ipAddresses>
                  <declareDeadTime></declareDeadTime>
                  <enabled></enabled>
                </highAvailability>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: highAvailabilityDelete
      description: |+
        Delete high availability configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/syslog/config:
    get:
      tags:
        - edges
      summary: syslogRead
      description: |+
        Retrieve syslog servers information.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: syslogUpdate
      description: |+
        Configure syslog servers.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <syslog>
                  <protocol></protocol>
                  <serverAddresses>
                    <ipAddress></ipAddress>
                  </serverAddresses>
                </syslog>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: syslogDelete
      description: |+
        Delete syslog servers.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config:
    post:
      tags:
        - edges
      summary: sslVPNCreate
      description: |+
        Enable or disable SSL VPN on the NSX Edge appliance.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: enableService
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: sslVPNRead
      description: |+
        Retrieve SSL VPN details.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: sslVPNUpdate
      description: >+
        Update the entire SSL VPN configuration to the specified NSX Edge in a
        single call.



        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: sslVPNDelete
      description: |+
        Delete the SSL VPN configurations on the Edge.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/server:
    get:
      tags:
        - edges
      summary: serverSettingsRead
      description: |+
        Retrieve server settings.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: serverSettingsUpdate
      description: |+
        Update server settings.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <serverSettings>
                  <serverAddresses>
                    <ipAddress>10.112.243.109</ipAddress>
                  </serverAddresses>
                  <port>443</port>
                  <certificateId>certificate-1</certificateId>
                  <cipherList>
                    <cipher>AES128-SHA</cipher>
                    <cipher>AES256-SHA</cipher>
                  </cipherList>
                </serverSettings>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/privatenetworks:
    post:
      tags:
        - edges
      summary: privateNetworksCreate
      description: |+
        Configure a private network.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <privateNetwork>
                  <description></description>
                  <network></network>
                  <sendOverTunnel>
                    <ports></ports>
                    <optimize></optimize>
                  </sendOverTunnel>
                  <enabled></enabled>
                </privateNetwork>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: privateNetworksRead
      description: |+
        Retrieve all private network profiles in the SSL VPN instance.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: privateNetworksUpdate
      description: |+
        Update all private network configs of NSX Edge with the given list
        of private network configs. If the config is present, it is
        updated; otherwise, a new private network config is created.
        Existing configs not included in the call body are deleted.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: privateNetworksDelete
      description: |+
        Delete all private networks from the SSL VPN instance.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/privatenetworks/{networkID}:
    get:
      tags:
        - edges
      summary: privateNetworkRead
      description: |+
        Retrieve the specified private network in the SSL VPN service.


        Parameters:

        networkID: Specified private network

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: networkID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: privateNetworkUpdate
      description: |+
        Update the specified private network in the SSL VPN service.


        Parameters:

        networkID: Specified private network

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <privateNetwork>
                  <description></description>
                  <network></network>
                  <sendOverTunnel>
                    <ports></ports>
                    <optimize></optimize>
                  </sendOverTunnel>
                  <enabled></enabled>
                </privateNetwork>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: networkID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: privateNetworkDelete
      description: |+
        Delete private network

        Parameters:

        networkID: Specified private network

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: networkID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/ippools:
    post:
      tags:
        - edges
      summary: netExtipPoolsCreate
      description: |+
        Create an IP pool.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: netExtipPoolsRead
      description: |+
        Retrieve all IP pools configured on SSL VPN.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: netExtipPoolsUpdate
      description: |+
        Update all IP pools with the given list of pools. If the pool is
        present, it is updated; otherwise, a new pool is created. Existing
        pools not in the body are deleted.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: netExtipPoolsDelete
      description: |+
        Delete all IP pools configured on SSL VPN

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/ippools/{ippoolID}:
    get:
      tags:
        - edges
      summary: netExtipPoolRead
      description: |+
        Retrieve details of specified IP pool.

        Parameters:

        ippoolID: Specified IP pool ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ippoolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: netExtipPoolUpdate
      description: |+
        Update specified IP pool.

        Parameters:

        ippoolID: Specified IP pool ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressPool>
                  <description>description</description>
                  <ipRange>10.112.243.11-10.112.243.57</ipRange>
                  <netmask>255.0.0.0</netmask>
                  <gateway>192.168.1.1</gateway>
                  <primaryDns>192.168.10.1</primaryDns>
                  <secondaryDns>4.2.2.2</secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer>10.112.243.201</winsServer>
                  <enabled>true</enabled>
                </ipAddressPool>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ippoolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: netExtipPoolDelete
      description: |+
        Delete the specified IP pool.

        Parameters:

        ippoolID: Specified IP pool ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: ippoolID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/clientconfig:
    put:
      tags:
        - edges
      summary: clientConfigUpdate
      description: |+
        Set advanced parameters for full access client configurations,
        such as whether client should auto-reconnect in case of network
        failures or network unavailability, or whether the client should be
        uninstalled after logout.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clientConfiguration>
                  <autoReconnect>true</autoReconnect>
                  <fullTunnel>
                    <excludeLocalSubnets>false</excludeLocalSubnets>
                    <gatewayIp>10.112.243.11</gatewayIp>
                  </fullTunnel>
                  <upgradeNotification>false</upgradeNotification>
                </clientConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: clientConfigRead
      description: |+
        Retrieve client configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/installpackages:
    post:
      tags:
        - edges
      summary: installPackagesCreate
      description: |+
        Creates setup executables (installers) for full access network
        clients. These setup binaries are later downloaded by remote
        clients and installed on their systems. The primary parameters
        needed to configure this setup are hostname of the gateway, and
        its port and a profile name which is shown to the user to identify
        this connection. Administrator can also set few other parameters
        such as whether to automatically start the application on windows
        login, hide the system tray icon etc.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clientInstallPackage>
                  <profileName></profileName>
                  <gatewayList>
                    <gateway>
                      <hostName></hostName>
                      <port></port>
                    </gateway>
                  </gatewayList>
                  <startClientOnLogon></startClientOnLogon>
                  <hideSystrayIcon></hideSystrayIcon>
                  <rememberPassword></rememberPassword>
                  <silentModeOperation></silentModeOperation>
                  <silentModeInstallation></silentModeInstallation>
                  <hideNetworkAdaptor></hideNetworkAdaptor>
                  <createDesktopIcon></createDesktopIcon>
                  <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                  <createLinuxClient></createLinuxClient>
                  <createMacClient></createMacClient>
                  <description></description>
                  <enabled></enabled>
                </clientInstallPackage>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: installPackagesRead
      description: |+
        Retrieve information about all installation packages.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: installPackagesUpdate
      description: |+
        Update all installation packages with the given list. If the
        package is present, it is updated; otherwise a new installation
        package is created. Existing packages not included in the body are
        deleted.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: installPackagesDelete
      description: |+
        Delete all client installation packages.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/installpackages/{packageID}:
    get:
      tags:
        - edges
      summary: installPackageRead
      description: |+
        Get information about the specified installation package.


        Parameters:

        packageID: Specified installation package ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: packageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: installPackageUpdate
      description: |+
        Modify the specified installation package.

        Parameters:

        packageID: Specified installation package ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clientInstallPackage>
                  <profileName></profileName>
                  <gatewayList>
                    <gateway>
                      <hostName></hostName>
                      <port></port>
                    </gateway>
                  </gatewayList>
                  <startClientOnLogon></startClientOnLogon>
                  <hideSystrayIcon></hideSystrayIcon>
                  <rememberPassword></rememberPassword>
                  <silentModeOperation></silentModeOperation>
                  <silentModeInstallation></silentModeInstallation>
                  <hideNetworkAdaptor></hideNetworkAdaptor>
                  <createDesktopIcon></createDesktopIcon>
                  <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                  <createLinuxClient></createLinuxClient>
                  <createMacClient></createMacClient>
                  <description></description>
                  <enabled></enabled>
                </clientInstallPackage>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: packageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: installPackageDelete
      description: |+
        Delete the specified installation package.

        Parameters:

        packageID: Specified installation package ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: packageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/layout:
    get:
      tags:
        - edges
      summary: layoutRead
      description: |+
        Retrieve layout configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: layoutUpdate
      description: |+
        Update the portal layout.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <layout>
                  <portalTitle></portalTitle>
                  <companyName></companyName>
                  <logoBackgroundColor></logoBackgroundColor>
                  <titleColor></titleColor>
                  <topFrameColor></topFrameColor>
                  <menuBarColor></menuBarColor>
                  <rowAlternativeColor></rowAlternativeColor>
                  <bodyColor></bodyColor>
                  <rowColor></rowColor>
                </layout>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/layout/images/{imageType}:
    post:
      tags:
        - edges
      summary: layoutIconsUpload
      description: >+
        Upload images for use with SSL VPN portal and client.


        You can upload a logo to use in the SSL VPN portal, and a banner

        and icons to use in the SSL VPN client.


        You must upload the image files using the form-data content-type.

        Consult the documentation for your REST client for instructions. 


        Do not set other Content-type headers in your request, for

        example, *Content-type: application/xml*.


        When you upload a file as form-data, you must provide a **key**

        and a **value** for the file. See the table below for the

        form-data **key** to use for each image type. The **value** is the

        path to the image file.


        Image Type | form-data key | Image format requirements

        ----|------|----

        portallogo | layoutFile | n/a

        phatbanner | banner | bmp

        connecticon | icon | ico

        disconnecticon | icon | ico

        erroricon | icon | ico

        desktopicon | icon | ico


        **Example using curl**


        ```

        /usr/bin/curl -v -k -i -F layoutFile=@/tmp/portalLogo.jpg -H
        'Authorization: Basic YWRtaW46ZGXXXXXXXX==' 

        https://192.168.110.42/api/4.0/edges/edge-3/sslvpn/config/layout/images/portallogo

        ```



        Parameters:


        imageType: Type of image to upload. Choice of *portallogo*,
        *phatbanner*,

        *connecticon*, *disconnecticon*, *desktopicon*, or *erroricon*.


      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: imageType
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/localserver/users:
    post:
      tags:
        - edges
      summary: usersCreate
      description: |+
        Add a new portal user.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: usersUpdate
      description: |+
        Modify the portal user specified in the request body.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: usersDelete
      description: |+
        Delete all users on the specifed SSL VPN instance

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/localserver/users/{userID}:
    get:
      tags:
        - edges
      summary: userRead
      description: |+
        Get information about the specified user.

        Parameters:

        userID: User ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: userDelete
      description: |+
        Delete the specified user.

        Parameters:

        userID: User ID.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/settings:
    get:
      tags:
        - edges
      summary: authSettingsRead
      description: |+
        Retrieve information about authentication settings.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: authSettingsUpdate
      description: |+
        Update authentication settings for remote users. Specify
        username/password authentication, active directory, ldap, radius,
        client certificate based authentication.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <authenticationConfig>
                  <passwordAuthentication>
                  <authenticationTimeout></authenticationTimeout>
                    <primaryAuthServers>
                      <com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <enableSsl></enableSsl>
                        <searchBase></searchBase>
                        <bindDomainName></bindDomainName>
                        <bindPassword></bindPassword>
                        <loginAttributeName></loginAttributeName>
                        <searchFilter></searchFilter>
                        <enabled></enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <secret></secret>
                        <nasIp></nasIp>
                        <retryCount></retryCount>
                      </com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                        <enabled></enabled>
                        <passwordPolicy>
                          <minLength></minLength>
                          <maxLength></maxLength>
                          <minAlphabets></minAlphabets>
                          <minDigits></minDigits>
                          <minSpecialChar></minSpecialChar>
                          <allowUserIdWithinPassword></allowUserIdWithinPassword>
                          <passwordLifeTime></passwordLifeTime>
                          <expiryNotification></expiryNotification>
                        </passwordPolicy>
                        <accountLockoutPolicy>
                          <retryCount></retryCount>
                          <retryDuration></retryDuration>
                          <lockoutDuration></lockoutDuration>
                        </accountLockoutPolicy>
                      </com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                        <timeOut></timeOut>
                        <sourceIp></sourceIp>
                      </com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                    </primaryAuthServers>
                    <secondaryAuthServer>
                      <com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                        <ip>1.1.1.1</ip>
                        <port>90</port>
                        <timeOut>20</timeOut>
                        <enableSsl>false</enableSsl>
                        <searchBase>searchbasevalue</searchBase>
                        <bindDomainName>binddnvalue</bindDomainName>
                        <bindPassword>password</bindPassword>
                        <loginAttributeName>cain</loginAttributeName>
                        <searchFilter>found</searchFilter>
                        <terminateSessionOnAuthFails>false</terminateSessionOnAuthFails>
                        <enabled>true</enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                    </secondaryAuthServer>
                  </passwordAuthentication>
                </authenticationConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/settings/rsaconfigfile:
    post:
      tags:
        - edges
      summary: rsaConfigCreate
      description: |+
        Upload RSA config file (See "Generate the Authentication Manager
        Configuration File" section of the RSA Authentication Manager
        Administrator's guide for instructions on how to configure and
        download the RSA config file from RSA Authentication Manager).


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/advancedconfig:
    get:
      tags:
        - edges
      summary: advancedConfigRead
      description: |+
        Retrieve SSL VPN advanced configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: advancedConfigUpdate
      description: |+
        Update SSL VPN advanced configuration.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <advancedConfig>
                  <enableCompression></enableCompression>
                  <forceVirtualKeyboard></forceVirtualKeyboard>
                  <preventMultipleLogon></preventMultipleLogon>
                  <randomizeVirtualkeys></randomizeVirtualkeys>
                  <timeout>
                    <forcedTimeout></forcedTimeout>
                    <sessionIdleTimeout></sessionIdleTimeout>
                  </timeout>
                  <clientNotification></clientNotification>
                  <enableLogging></enableLogging>
                </advancedConfig>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/script:
    post:
      tags:
        - edges
      summary: scriptCreate
      description: |+
        Configure parameters associated with the uploaded script file.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: scriptRead
      description: |+
        Retrieve all script configurations.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: scriptUpdate
      description: |+
        Update all script configurations with the given list of
        configurations. If the config is present, its is updated;
        otherwise, a new config is created. Existing configs not included
        in the body are deleted.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: scriptDelete
      description: |+
        Delete all script configurations

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/script/{fileID}:
    get:
      tags:
        - edges
      summary: scriptFileIDRead
      description: |+
        Retrieve parameters associated with the specified script file.


        Parameters:

        fileID: Specified script file.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: fileID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: scriptFileIDUpdate
      description: |+
        Update parameters associated with the specified script file.


        Parameters:

        fileID: Specified script file.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: fileID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: scriptFileIDDelete
      description: |+
        Delete script parameters.

        Parameters:

        fileID: Specified script file.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: fileID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/script/file/:
    post:
      tags:
        - edges
      summary: scriptFileCreate
      description: >+
        You can add multiple login or logoff scripts. For example, you can

        bind a login script for starting Internet Explorer with gmail.com.

        When the remote user logs in to the SSL client, Internet Explorer

        opens up gmail.com. This method returns a *scriptFileId* which

        can be used to update parameters associated with the script file.


        You must upload the script files using the form-data content-type.

        Consult the documentation for your REST client for instructions.


        Do not set other Content-type headers in your request, for

        example, *Content-type: application/xml*.


        When you upload a file as form-data, you must provide a **key**

        and a **value** for the file. The **key** is *file*, and the

        **value** is the location of the script file.


        **Example using curl**

        ```

        /usr/bin/curl -v -k -i -F file=@/tmp/script.sh -H 'Authorization: Basic
        YWRtaW46ZGXXXXXXXX=='

        https://192.168.110.42/api/4.0/edges/edge-3/sslvpn/config/script/file/

        ```



        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/auth/localusers/users:
    put:
      tags:
        - edges
      summary: allUsersUpdate
      description: |+
        Update all users with the given list of users. If the user is
        present, it is updated. Otherwise, and new user is created. Existing
        users not included in the body are deleted.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <users>
                  <user>
                    <userId></userId>
                    <password></password>
                    <firstName></firstName>
                    <lastName></lastName>
                    <description></description>
                    <disableUserAccount></disableUserAccount>
                    <passwordNeverExpires></passwordNeverExpires>
                    <allowChangePassword>
                      <changePasswordOnNextLogin></changePasswordOnNextLogin>
                    </allowChangePassword>
                  </user>
                </users>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/activesessions:
    get:
      tags:
        - edges
      summary: sslVPNActiveClientsRead
      description: |+
        Retrieve a list of active clients for the SSL VPN session.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/activesessions/{sessionID}:
    delete:
      tags:
        - edges
      summary: sessionDelete
      description: |+
        Disconnect an active client.

        Parameters:

        sessionID: Specified client session.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: sessionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/dashboard/sslvpn:
    get:
      tags:
        - edges
      summary: sslVPNStatsRead
      description: |+
        Retrieve SSL VPN statistics on the specified NSX Edge.

        Parameters:

      parameters:
        - name: interval
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/dashboard/ipsec:
    get:
      tags:
        - edges
      summary: ipsecTrafficStatsRead
      description: |+
        Retrieve tunnel traffic statistics for specified time interval.


        Parameters:

      parameters:
        - name: interval
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/dashboard/interface:
    get:
      tags:
        - edges
      summary: vnicDashStatsRead
      description: |+
        Retrieves dashboard statistics between the specified start and end
        times. When start and end time are not specified, all statistics
        since the Edge deployed are displayed. When no end time is specified,
        the current Edge Manager time is set as endTime. Each record has the
        stats of 5 minutes granularity.


        Parameters:

      parameters:
        - name: interval
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/interfaces:
    get:
      tags:
        - edges
      summary: vnicStatsRead
      description: |+
        Retrieve interface statistics.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/interfaces/uplink:
    get:
      tags:
        - edges
      summary: uplinkVNICStatsRead
      description: |+
        Retrieve uplink interface statistics.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/interfaces/internal:
    get:
      tags:
        - edges
      summary: internalVNICStatsRead
      description: |+
        Retrieve internal interface statistics.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/l2vpn/config:
    post:
      tags:
        - edges
      summary: l2VPNCreate
      description: |+
        Enable or disable L2 VPN service.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: enableService
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: l2VPNRead
      description: |+
        Retrieve the current L2VPN configuration for NSX Edge.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: l2VPNUpdate
      description: |+
        Configure L2VPN for server or client.

        You first enable the L2 VPN service on the NSX Edge instance and then
        configure a server and a client.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <l2Vpn>
                  <enabled>true</enabled>
                  <logging>
                    <enable>false</enable>
                    <logLevel>info</logLevel>
                    </logging>
                    <l2VpnSites>
                    <l2VpnSite>
                      <server>
                        <configuration>
                          <listenerIp></listenerIp>
                          <listenerPort></listenerPort>
                          <encryptionAlgorithm></encryptionAlgorithm>
                          <serverCertificate></serverCertificate>
                          <peerSites>
                            <peerSite>
                              <name></name>
                              <description></description>
                              <l2VpnUser>
                                <userId></userId>
                                <password></password>
                              </l2VpnUser>
                              <vnics>
                                <index></index>
                              </vnics>
                              <egressOptimization>
                                <gatewayIpAddress></gatewayIpAddress>
                              </egressOptimization>
                              <enabled></enabled>
                            </peerSite>
                          </peerSites>
                        </configuration>
                      </server>
                    </l2VpnSite>
                  </l2VpnSites>
                </l2Vpn>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: l2VPNDelete
      description: |+
        Delete the L2 VPN configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/l2vpn/config/statistics:
    get:
      tags:
        - edges
      summary: statisticsRead
      description: |+
        Retrieve L2 VPN statistics, which has information such as tunnel status,
        sent bytes, received bytes for the specified Edge.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/ipsec/config:
    get:
      tags:
        - edges
      summary: ipsecConfigRead
      description: |+
        Retrieve IPsec configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: ipsecConfigUpdate
      description: |+
        Update IPsec VPN configuration.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipsec>
                  <enabled></enabled>
                  <logLevel></logLevel>
                  <enable></enable>
                  <global>
                    <psk></psk>
                    <serviceCertificate></serviceCertificate>
                    <caCertificates>
                      <caCertificate></caCertificate>
                    </caCertificates>
                    <crlCertificates>
                      <crlCertificate></crlCertificate>
                    </crlCertificates>
                  </global>
                  <sites>
                    <site>
                      <enabled></enabled>
                      <name></name>
                      <description></description>
                      <localId></localId>
                      <localIp></localIp>
                      <peerId></peerId>
                      <peerIp></peerIp>
                      <encryptionAlgorithm></encryptionAlgorithm>
                      <authenticationMode>psk</authenticationMode>
                      <psk></psk>
                      <enablePfs></enablePfs>
                      <dhGroup></dhGroup>
                      <localSubnets>
                        <subnet></subnet>
                      </localSubnets>
                      <peerSubnets>
                        <subnet></subnet>
                      </peerSubnets>
                    </site>
                  </sites>
                </ipsec>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: ipsecConfigDelete
      description: |+
        Delete the IPsec configuration.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/ipsec/statistics:
    get:
      tags:
        - edges
      summary: ipsecStatsRead
      description: |+
        Retrieve IPsec statistics.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/autoconfiguration:
    get:
      tags:
        - edges
      summary: autoConfigRead
      description: |+
        Retrieve the auto configuration settings for the NSX Edge.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: autoConfigUpdate
      description: |+
        Update the auto configuration settings for the NSX Edge.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <autoConfiguration>
                  <enabled></enabled>
                  <rulePriority></rulePriority>
                </autoConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/appliances:
    post:
      tags:
        - edges
      summary: appliancesCreate
      description: |+
        Change the size of both appliances.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: size
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: appliancesRead
      description: >+
        Retrieve appliance configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **haAdminState**, **configuredResourcePool**,
        **configuredDataStore**, **configuredHost**, **configuredVmFolder**
        parameters added. 



        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: appliancesUpdate
      description: |+
        You can retrieve the configuration of both appliances by using the
        GET call and replace the size, resource pool, datastore, and custom
        parameters of the appliances by using a PUT call. If there were two
        appliances earlier and you PUT only one appliance, the other
        appliance is deleted.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. **haAdminState** parameter added.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/appliances/{haIndex}:
    post:
      tags:
        - edges
      summary: applianceExecute
      description: |+
        Used to send CLI Commands to the Edge Gw. To use CLI commands you also
        need to add an additional Accept Header with type text\plain, as well as
        the query parameter action=execute


        Parameters:

        haIndex: Specified appliance HA index

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <cliCmd>
                  <cmdStr>show ip ospf neighbours</cmdStr>
                </cliCmd>
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: haIndex
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: applianceRead
      description: >+
        Retrieve the configuration of the specified appliance.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.3 | Method updated. **haAdminState**, **configuredResourcePool**,
        **configuredDataStore**, **configuredHost**, **configuredVmFolder**
        parameters added. 



        Parameters:


        haIndex: Specified appliance HA index

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: haIndex
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: applianceUpdate
      description: |+
        Update the configuration of the specified appliance.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. **haAdminState** parameter added.


        Parameters:

        haIndex: Specified appliance HA index

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <appliance>
                  <haAdminState>up</haAdminState>
                  <resourcePoolId>domain-c41</resourcePoolId>
                  <datastoreId>datastore-29</datastoreId>
                  <hostId>host-203</hostId>
                  <vmFolderId>group-v242</vmFolderId>
                  <cpuReservation>
                    <limit>-1</limit>
                    <reservation>1000</reservation>
                  </cpuReservation>
                  <memoryReservation>
                    <limit>-1</limit>
                    <reservation>512</reservation>
                  </memoryReservation>
                  <edgeId>edge-3</edgeId>
                </appliance>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: haIndex
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: applianceDelete
      description: |+
        Delete the appliance

        Parameters:

        haIndex: Specified appliance HA index

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: haIndex
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/vnics:
    post:
      tags:
        - edges
      summary: vnicsCreate
      description: |+
        Add an interface or sub interface.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vnics>
                  <vnic>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <secondaryAddresses>
                          <ipAddress></ipAddress>
                        </secondaryAddresses>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <index></index>
                    <portgroupId></portgroupId>
                    <portgroupName></portgroupName>
                    <macAddress>
                      <edgeVmHaIndex></edgeVmHaIndex>
                      <value></value>
                    </macAddress>
                    <fenceParameter>
                      <key></key>
                      <value></value>
                    </fenceParameter>
                    <enableProxyArp></enableProxyArp>
                    <enableSendRedirects></enableSendRedirects>
                    <enableBridgeMode></enableBridgeMode>
                    <isConnected></isConnected>
                    <inShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </inShapingPolicy>
                    <outShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </outShapingPolicy>
                  </vnic>
                </vnics>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: vnicsRead
      description: |+
        Retrieve all interfaces for the specified Edge Services Gateway.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/vnics/{index}:
    get:
      tags:
        - edges
      summary: vnicRead
      description: |+
        Retrieve the specified interface.

        Parameters:

        index: Specified interface

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: index
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: vnicUpdate
      description: |+
        Update the specified interface.

        Parameters:

        index: Specified interface

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vnics>
                  <vnic>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <secondaryAddresses>
                          <ipAddress></ipAddress>
                        </secondaryAddresses>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <index></index>
                    <portgroupId></portgroupId>
                    <portgroupName></portgroupName>
                    <macAddress>
                      <edgeVmHaIndex></edgeVmHaIndex>
                      <value></value>
                    </macAddress>
                    <fenceParameter>
                      <key></key>
                      <value></value>
                    </fenceParameter>
                    <enableProxyArp></enableProxyArp>
                    <enableSendRedirects></enableSendRedirects>
                    <enableBridgeMode></enableBridgeMode>
                    <isConnected></isConnected>
                    <inShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </inShapingPolicy>
                    <outShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </outShapingPolicy>
                  </vnic>
                </vnics>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: index
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: vnicDelete
      description: |+
        Delete interface

        Parameters:

        index: Specified interface

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: index
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/mgmtinterface:
    get:
      tags:
        - edges
      summary: mgmtInterfaceRead
      description: |+
        Retrieve the management interface configuration for the logical
        router.


        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: mgmtInterfaceUpdate
      description: |+
        Configure high availability (management) interface for logical
        (distributed) router.  See *Working with NSX Edge* for descriptions
        of parameters used to configure the logical router HA interface.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <mgmtInterface>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <connectedToId></connectedToId>
                </mgmtInterface>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/interfaces:
    post:
      tags:
        - edges
      summary: interfacesCreate
      description: |+
        Add interfaces for a logical router. 


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <interfaces>
                  <interface>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <isConnected></isConnected>
                    <connectedToId></connectedToId>
                  </interface>
                </interfaces>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - edges
      summary: interfacesRead
      description: |+
        Retrieve all interfaces on the logical router.

        Parameters:

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: interfacesDelete
      description: |+
        Delete all interfaces on the logical router.

        Parameters:

      parameters:
        - name: index
          in: query
          schema:
            type: string
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/interfaces/{index}:
    get:
      tags:
        - edges
      summary: interfaceRead
      description: |+
        Retrieve information about the specified logical router interface.


        Parameters:

        index: Specified router interface.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: index
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - edges
      summary: interfaceDelete
      description: |+
        Delete interface configuration and reset to factory default.


        Parameters:

        index: Specified router interface.

      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: index
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edges
      summary: interfaceUpdate
      description: |+
        Update interface configuration for the specified logical router
        interface.


        Parameters:

        index: Specified router interface.

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: edgeId
          in: path
          schema:
            type: string
          required: true
        - name: index
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/jobs:
    get:
      tags:
        - edges
      summary: nsxEdgeJobsRead
      description: |+
        Retrieve NSX Edge job status.


        Parameters:

      parameters:
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/jobs/{jobId}:
    get:
      tags:
        - edges
      summary: nsxEdgeJobRead
      description: |+
        Retrieve job status for the specified job.


        Parameters:

        jobId: Job ID

      parameters:
        - name: jobId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edgePublish/tuningConfiguration:
    get:
      tags:
        - edgePublish
      summary: nsxEdgePublishTuningRead
      description: |+
        Retrieve the NSX Edge tuning configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - edgePublish
      summary: nsxEdgePublishTuningUpdate
      description: |+
        Update the NSX Edge tuning configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <tuningConfiguration>
                  <lockUpdatesOnEdge>false</lockUpdatesOnEdge>
                  <aggregatePublishing>true</aggregatePublishing>
                  <edgeVMHealthCheckIntervalInMin>0</edgeVMHealthCheckIntervalInMin>
                  <healthCheckCommandTimeoutInMs>120000</healthCheckCommandTimeoutInMs>
                  <maxParallelVixCallsForHealthCheck>25</maxParallelVixCallsForHealthCheck>
                  <publishingTimeoutInMs>1200000</publishingTimeoutInMs>
                  <edgeVCpuReservationPercentage>0</edgeVCpuReservationPercentage>
                  <edgeMemoryReservationPercentage>0</edgeMemoryReservationPercentage>
                  <megaHertzPerVCpu>1000</megaHertzPerVCpu>
                </tuningConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/defaultconfig:
    get:
      tags:
        - firewall
      summary: dfwConfigDefaultRead
      description: >+
        Retrieve the default firewall configuration.


        The output of this method can be used to restore the firewall config

        back to default. For example, to replace the layer 2 or layer 3

        default section, use the relevant default section from the `GET

        /api/4.0/firewall/globalroot-0/defaultconfig` response body to create

        the request body of `PUT

        /api/4.0/firewall/globalroot-0/config/layer2sections|layer3sections/{sectionId}`.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method introduced.



        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config:
    get:
      tags:
        - firewall
      summary: dfwConfigShow
      description: |+
        Retrieve distributed firewall rule configuration.

        If no query parameters are used, all rule configuration is retrieved.
        Use the query parameters to filter the rule configuration information.


        Parameters:

      parameters:
        - name: ruleType
          in: query
          schema:
            type: string
        - name: source
          in: query
          schema:
            type: string
        - name: destination
          in: query
          schema:
            type: string
        - name: ruleId
          in: query
          schema:
            type: string
        - name: comment
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: siProfile
          in: query
          schema:
            type: string
        - name: edgeId
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwConfigUpdate
      description: >+
        Update the complete firewall configuration in all sections.


        * Retrieve the configuration with `GET
        /api/4.0/firewall/globalroot-0/config`.

        * Retrieve the Etag value from the response headers.

        * Extract and modify the configuration from the response body as needed.

        * Set the If-Match header to the Etag value, and submit the request.


        Not all fields are required while sending the request. All the optional
        fields

        are safe to be ignored while sending the configuration to server. For
        example,

        if an IP set is referenced in the rule only IPSet and Type is needed in
        the

        Source/Destination objects and not Name and isValid tags.


        When updating the firewall configuration:

        * IDs for new objects (rule/section) should be removed or set to zero.

        * If new entities (sections/rules) have been sent in the request, the
        response
          will contain the system-generated IDs, which are assigned to these new
          entities.
        * **appliedTo** can be any valid firewall rule element.

        * **action** can be *ALLOW*, *BLOCK*, or *REJECT*. REJECT sends reject
        message for
          unaccepted packets; RST packets are sent for TCP connections and ICMP
          unreachable code packets are sent for UDP, ICMP, and other IP connections
        * source and destination can have an exclude flag. For example, if you
        add an
          exclude tag for 1.1.1.1 in the source parameter, the rule looks for traffic
          originating from all IPs other than 1.1.1.1.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallConfiguration timestamp="1359979620727">
                  <contextId>globalroot-0</contextId>
                  <layer3Sections>
                    <section id="2" name="defaultSectionLayer3" generationNumber="1359979620727" timestamp="1359979620727">
                      <rule disabled="false" logged="true">
                        <name>okn-1</name>
                        <action>ALLOW</action>
                        <sources excluded="false">
                          <source>
                            <value>datacenter-57</value>
                            <type>Datacenter</type>
                          </source>
                          <source>
                            <value>domain-c62</value>
                            <type>ClusterComputeResource</type>
                          </source>
                          <source>
                            <value>10.112.1.1</value>
                            <type>Ipv4Address</type>
                          </source>
                        </sources>
                        <services>
                          <service>
                            <destinationPort>80</destinationPort>
                            <protocol>6</protocol>
                            <subProtocol>6</subProtocol>
                          </service>
                          <service>
                            <value>application-161</value>
                            <type>Application</type>
                          </service>
                        </services>
                        <appliedToList>
                          <appliedTo>
                            <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                            <type>Vnic</type>
                          </appliedTo>
                          <appliedTo>
                            <value>vm-126</value>
                            <type>VirtualMachine</type>
                          </appliedTo>
                        </appliedToList>
                      </rule>
                      <rule disabled="true" logged="true">
                        <name>Matru-1</name>
                        <action>ALLOW</action>
                        <sectionId>2</sectionId>
                      </rule>
                      <rule disabled="true" logged="true">
                        <name>Matru-2</name>
                        <action>ALLOW</action>
                        <sectionId>2</sectionId>
                      </rule>
                      <rule disabled="true" logged="true">
                        <name>Matru-3</name>
                        <action>ALLOW</action>
                        <sectionId>2</sectionId>
                      </rule>
                      <rule id="2" disabled="true" logged="false">
                        <name>Default Rule</name>
                        <action>DENY</action>
                        <sectionId>2</sectionId>
                      </rule>
                    </section>
                  </layer3Sections>
                  <layer2Sections>
                    <section id="1" name="defaultSectionLayer2" generationNumber="1359979620727" timestamp="1359979620727">
                      <rule id="1" disabled="false" logged="false">
                        <name>Default Rule</name>
                        <action>ALLOW</action>
                        <sectionId>1</sectionId>
                      </rule>
                    </section>
                  </layer2Sections>
                </firewallConfiguration>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwConfigDelete
      description: |+
        Restores default configuration, which means one defaultLayer3 section
        with three default allow rules and one defaultLayer2Section with one
        default allow rule.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections:
    get:
      tags:
        - firewall
      summary: dfwL3SectionRead
      description: |+
        Retrieve rules from the layer 3 section specified by section
        **name**.


        Parameters:

      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - firewall
      summary: dfwL3SectionCreate
      description: |+
        Create a layer 3 distributed firewall section.

        By default, the section is created at the top of the firewall table.
        You can specify a location for the section with the **operation**
        and **anchorId** query parameters.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section name="TestSection">
                  <rule disabled="false" logged="true">
                    <name>okn-2</name>
                    <action>ALLOW</action>
                    <appliedToList>
                      <appliedTo>
                        <name>vm1 - Network adapter 1</name>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                        <isValid>true</isValid>
                      </appliedTo>
                      <appliedTo>
                        <name>Small XP-2</name>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sources excluded="false">
                      <source>
                        <name>5.1 ESX</name>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <name>5.1</name>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                        <isValid>true</isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <name>VMware-VDM2.x-Ephemeral</name>
                        <value>application-161</value>
                        <isValid>true</isValid>
                      </service>
                    </services>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>ALLOW</action>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>test-3</name>
                    <action>ALLOW</action>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>test-2</name>
                    <action>ALLOW</action>
                  </rule>
                  <rule disabled="true" logged="false">
                    <name>test-1</name>
                    <action>DENY</action>
                  </rule>
                </section>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: operation
          in: query
          schema:
            type: string
        - name: anchorId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections/{sectionId}:
    get:
      tags:
        - firewall
      summary: dfwL3SectionIdRead
      description: |+
        Retrieve information about the specified layer 3 section.

        Parameters:

        sectionId: The ID of the section to modify.

      parameters:
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - firewall
      summary: dfwL3SectionIdAction
      description: >+
        Move the specified layer 3 section.


        Use the **action**, **operation**, and optionally **achorId**

        query parameters to specify the destination for the section.


        `POST /api/4.0/firewall/globalroot-0/config/layer3sections/1007

        ?action=revise&operation=insert_before&anchorId=1006`


        `If-Match: 1477989118875` 


        ```

        <section id="1007" name="Web Section" generationNumber="1477989118875"
        timestamp="1477989118875" type="LAYER3">
          ...
        </section>

        ```



        Parameters:


        sectionId: The ID of the section to modify.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: operation
          in: query
          schema:
            type: string
        - name: anchorId
          in: query
          schema:
            type: string
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwL3SectionIdUpdate
      description: >+
        Update the specified layer 3 section in distributed firewall.


        * Retrieve the configuration for the specified section.

        * Retrieve the Etag value from the response headers.

        * Extract and modify the configuration from the response body as needed.

        * Set the If-Match header to the Etag value, and submit the request.


        Not all fields are required while sending the request. All the optional
        fields

        are safe to be ignored while sending the configuration to server. For
        example,

        if an IP set is referenced in the rule only IPSet and Type is needed in
        the

        Source/Destination objects and not Name and isValid tags.


        When updating the firewall configuration:

        * IDs for new objects (rule/section) should be removed or set to zero.

        * If new entities (sections/rules) have been sent in the request, the
        response
          will contain the system-generated IDs, which are assigned to these new
          entities.
        * **appliedTo** can be any valid firewall rule element.

        * **action** can be *ALLOW*, *BLOCK*, or *REJECT*. REJECT sends reject
        message for
          unaccepted packets; RST packets are sent for TCP connections and ICMP
          unreachable code packets are sent for UDP, ICMP, and other IP connections
        * source and destination can have an exclude flag. For example, if you
        add an
          exclude tag for 1.1.1.1 in the source parameter, the rule looks for traffic
          originating from all IPs other than 1.1.1.1.

        When Distributed Firewall is used with Service Composer, firewall

        sections created by Service Composer contain an additional attribute

        in the XML called managedBy. You should not modify Service Composer

        firewall sections using Distributed Firewall REST APIs. If you do, you

        must synchronize firewall rules from Service Composer using the `GET

        /api/2.0/services/policy/serviceprovider/firewall` API.



        Parameters:


        sectionId: The ID of the section to modify.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: >
                <section id="4" name="TestSectionRenamed"
                generationNumber="1336034461743" timestamp="1360149234572">
                  <rule id="16" disabled="false" logged="false">
                    <name>okn-2</name>
                    <action>ALLOW</action>
                    <appliedToList>
                      <appliedTo>
                        <name>vm1 - Network adapter 1</name>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                        <isValid>true</isValid>
                      </appliedTo>
                      <appliedTo>
                        <name>Small XP-2</name>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>4</sectionId>
                    <sources excluded="false">
                      <source>
                        <name>5.1 ESX</name>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <name>5.1</name>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                        <isValid>true</isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <name>VMware-VDM2.x-Ephemeral</name>
                        <value>application-161</value>
                        <isValid>true</isValid>
                      </service>
                    </services>
                  </rule>
                  <rule id="15" disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="14" disabled="true" logged="true">
                    <name>test-3</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="13" disabled="true" logged="true">
                    <name>test-2</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="12" disabled="true" logged="false">
                    <name>test-1</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                </section>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwL3SectionIdDelete
      description: >+
        Delete the specified layer 3 distributed firewall section.


        If the default layer 3 firewall section is selected, the request is

        rejected. See `GET /api/4.0/firewall/globalroot-0/defaultconfig`

        for information on resetting the default firewall section.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. When deleting the default firewall rule section,
        the method previously removed all rules except for the default rule. The
        method now returns status 400 and the message `Cannot delete default
        section <sectionId>`.



        Parameters:


        sectionId: The ID of the section to modify.

      parameters:
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections/{sectionId}/rules:
    post:
      tags:
        - firewall
      summary: dfwL3RulesAdd
      description: >+
        Add rules to the specified layer 2 section in distributed firewall.


        You add firewall rules at the global scope. You can then narrow down the
        scope

        (datacenter, cluster, distributed virtual port group, network, virtual
        machine,

        vNIC, or logical switch) at which you want to apply the rule. Firewall
        allows

        you to add multiple objects at the source and destination levels for
        each rule,

        which helps reduce the total number of firewall rules to be added.  To
        add a

        identity based firewall rule, first create a security group based on
        Directory

        Group objects. Then create a firewall rule with the security group as
        the

        source or destination.  Rules that direct traffic to a third part
        service are

        referred to as layer3 redirect rules, and are displayed in the layer3
        redirect

        tab.


        When Distributed Firewall is used with Service Composer, firewall

        rules created by Service Composer contain an additional attribute

        in the XML called managedBy.


        Follow this procedure to add a rule:


        * Retrieve the configuration for the specified section.

        * Retrieve the Etag value from the response headers.
          **Note**: Each section contains its own Etag, generationNumber, and
          timestamp. When adding a new rule, you must use the Etag value of the
          firewall section to which you wish to add the rule.
        * Extract and modify the configuration from the response body as needed.

        * Set the If-Match header to the section Etag value, and submit the
        request.


        Not all fields are required while sending the request. All the optional
        fields

        are safe to be ignored while sending the configuration to server. For
        example,

        if an IP set is referenced in the rule only IPSet and Type is needed in
        the

        Source/Destination objects and not Name and isValid tags.


        When updating the firewall configuration:


        * IDs for new rules should be removed or set to zero.

        * If new rules have been sent in the request, the response
          will contain the system-generated IDs, which are assigned to these new
          entities.
        * **appliedTo** can be any valid firewall rule element.

        * **action** can be *ALLOW*, *BLOCK*, or *REJECT*. REJECT sends reject
        message for
          unaccepted packets; RST packets are sent for TCP connections and ICMP
          unreachable code packets are sent for UDP, ICMP, and other IP connections
        * source and destination can have an exclude flag. For example, if you
        add an
          exclude tag for 1.1.1.1 in the source parameter, the rule looks for traffic
          originating from all IPs other than 1.1.1.1.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule disabled="false" logged="false">
                  <name>AddRuleTest</name>
                  <action>allow</action>
                  <notes></notes>
                  <appliedToList>
                    <appliedTo>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </appliedTo>
                  </appliedToList>
                  <sectionId>2</sectionId>
                  <sources excluded="true">
                    <source>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </source>
                  </sources>
                  <services>
                    <service>
                      <value>application-216</value>
                    </service>
                  </services>
                </rule>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections/{sectionId}/rules/{ruleId}:
    get:
      tags:
        - firewall
      summary: dfwL3RuleRead
      description: |+
        Retrieve information about the specified distributed firewall rule.


        Parameters:

        ruleId: The ID of the rule beeing read, updated or deleted

      parameters:
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwL3RuleUpdate
      description: >+
        Update a distributed firewall rule in a layer 3 section.


        * Retrieve the configuration for the section that contains the rule you
        want
          to modify.
        * Retrieve the Etag value from the response headers.
          **Note**: This is the Etag value of the firewall section to which you want
          to add the rule. If you are keeping this rule in the same section, you must
          keep the same Etag number.
        * Extract and modify the rule configuration from the response body as
        needed.

        * Set the If-Match header to the section Etag value, and submit the
        request.


        Not all fields are required while sending the request. All the optional
        fields

        are safe to be ignored while sending the configuration to server. For
        example,

        if an IP set is referenced in the rule only IPSet and Type is needed in
        the

        Source/Destination objects and not Name and isValid tags.



        Parameters:


        ruleId: The ID of the rule beeing read, updated or deleted

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule id="23" disabled="enabled" logged="true">
                  <name>AddRuleTestUpdated</name>
                  <action>allow</action>
                  <notes></notes>
                  <appliedToList>
                    <appliedTo>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </appliedTo>
                  </appliedToList>
                  <sectionId>2</sectionId>
                  <sources excluded="true">
                    <source>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </source>
                  </sources>
                  <services>
                    <service>
                      <value>application-216</value>
                    </service>
                  </services>
                </rule>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwL3RuleDelete
      description: |+
        Delete the specified distributed firewall rule.

        Parameters:

        ruleId: The ID of the rule beeing read, updated or deleted

      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections:
    get:
      tags:
        - firewall
      summary: dfwL2SectionRead
      description: |+
        Retrieve rules from the layer 2 section specified by section
        **name**.


        Parameters:

      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - firewall
      summary: dfwL2SectionCreate
      description: |+
        Create a layer 2 distributed firewall section.

        By default, the section is created at the top of the firewall table.
        You can specify a location for the section with the **operation**
        and **anchorId** query parameters.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section name="" managedBy="" type="">
                  <rule disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <destinations excluded="">
                      <destination>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </destination>
                    </destinations>
                    <services>
                      <service>
                        <destinationPort></destinationPort>
                        <protocol></protocol>
                        <subProtocol></subProtocol>
                      </service>
                    </services>
                  </rule>
                </section>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: operation
          in: query
          schema:
            type: string
        - name: anchorId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections/{sectionId}:
    get:
      tags:
        - firewall
      summary: dfwL2SectionIdRead
      description: |+
        Retrieve information about the specified layer 2 section.

        Parameters:

        sectionId: The ID of the section to modify.

      parameters:
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - firewall
      summary: dfwL2SectionIdAction
      description: >+
        Move the specified layer 2 section.


        Use the **action**, **operation**, and optionally **achorId**

        query parameters to specify the destination for the section.


        `POST /api/4.0/firewall/globalroot-0/config/layer2sections/1009

        ?action=revise&operation=insert_before&anchorId=1008`


        `If-Match: 1478307787160`


        ```

        <section id="1009" name="Test Section" generationNumber="1478307787160"
        timestamp="1478307787160" type="LAYER2">
          ...
        </section>

        ```



        Parameters:


        sectionId: The ID of the section to modify.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: action
          in: query
          schema:
            type: string
        - name: operation
          in: query
          schema:
            type: string
        - name: anchorId
          in: query
          schema:
            type: string
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwL2SectionIdUpdate
      description: >+
        Update the specified layer 2 section in distributed firewall.


        * Retrieve the configuration for the specified section.

        * Retrieve the Etag value from the response headers.

        * Extract and modify the configuration from the response body as needed.

        * Set the If-Match header to the Etag value, and submit the request.


        Not all fields are required while sending the request. All the optional
        fields

        are safe to be ignored while sending the configuration to server. For
        example,

        if an IP set is referenced in the rule only IPSet and Type is needed in
        the

        Source/Destination objects and not Name and isValid tags.


        When updating the firewall configuration:

        * IDs for new objects (rule/section) should be removed or set to zero.

        * If new entities (sections/rules) have been sent in the request, the
        response
          will contain the system-generated IDs, which are assigned to these new
          entities.
        * **appliedTo** can be any valid firewall rule element.

        * **action** can be *ALLOW*, *BLOCK*, or *REJECT*. REJECT sends reject
        message for
          unaccepted packets; RST packets are sent for TCP connections and ICMP
          unreachable code packets are sent for UDP, ICMP, and other IP connections
        * source and destination can have an exclude flag. For example, if you
        add an
          exclude tag for 1.1.1.1 in the source parameter, the rule looks for traffic
          originating from all IPs other than 1.1.1.1.

        When Distributed Firewall is used with Service Composer, firewall

        sections created by Service Composer contain an additional attribute

        in the XML called managedBy. You should not modify Service Composer

        firewall sections using Distributed Firewall REST APIs. If you do, you

        must synchronize firewall rules from Service Composer using the `GET

        /api/2.0/services/policy/serviceprovider/firewall` API.



        Parameters:


        sectionId: The ID of the section to modify.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort></destinationPort>
                        <protocol></protocol>
                        <subProtocol></subProtocol>
                      </service>
                    </services>
                  </rule>
                </section>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwL2SectionIdDelete
      description: >+
        Delete the specified layer 2 section and its contents.


        If the default layer 2 firewall section is selected, the request is

        rejected. See `GET /api/4.0/firewall/globalroot-0/defaultconfig`

        for information on resetting the default firewall section.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method updated. When deleting the default firewall rule section,
        the method previously removed all rules except for the default rule. The
        method now returns status 400 and the message `Cannot delete default
        section <sectionId>`.



        Parameters:


        sectionId: The ID of the section to modify.

      parameters:
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections/{sectionId}/rules:
    post:
      tags:
        - firewall
      summary: dfwL2RulesAdd
      description: >+
        Add rules to the specified layer 2 section in distributed firewall.


        You add firewall rules at the global scope. You can then narrow down the
        scope

        (datacenter, cluster, distributed virtual port group, network, virtual
        machine,

        vNIC, or logical switch) at which you want to apply the rule. Firewall
        allows

        you to add multiple objects at the source and destination levels for
        each rule,

        which helps reduce the total number of firewall rules to be added.  To
        add a

        identity based firewall rule, first create a security group based on
        Directory

        Group objects. Then create a firewall rule with the security group as
        the

        source or destination.  Rules that direct traffic to a third part
        service are

        referred to as layer3 redirect rules, and are displayed in the layer3
        redirect

        tab.


        When Distributed Firewall is used with Service Composer, firewall

        rules created by Service Composer contain an additional attribute

        in the XML called managedBy.


        Follow this procedure to add a rule:


        * Retrieve the configuration for the specified section.

        * Retrieve the Etag value from the response headers.
          **Note**: Each section contains its own Etag, generationNumber, and
          timestamp. When adding a new rule, you must use the Etag value of the
          firewall section to which you wish to add the rule.
        * Extract and modify the configuration from the response body as needed.

        * Set the If-Match header to the section Etag value, and submit the
        request.


        Not all fields are required while sending the request. All the optional
        fields

        are safe to be ignored while sending the configuration to server. For
        example,

        if an IP set is referenced in the rule only IPSet and Type is needed in
        the

        Source/Destination objects and not Name and isValid tags.


        When updating the firewall configuration:


        * IDs for new rules should be removed or set to zero.

        * If new rules have been sent in the request, the response
          will contain the system-generated IDs, which are assigned to these new
          entities.
        * **appliedTo** can be any valid firewall rule element.

        * **action** can be *ALLOW*, *BLOCK*, or *REJECT*. REJECT sends reject
        message for
          unaccepted packets; RST packets are sent for TCP connections and ICMP
          unreachable code packets are sent for UDP, ICMP, and other IP connections
        * source and destination can have an exclude flag. For example, if you
        add an
          exclude tag for 1.1.1.1 in the source parameter, the rule looks for traffic
          originating from all IPs other than 1.1.1.1.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule disabled="" logged="">
                  <name></name>
                  <action></action>
                  <notes></notes>
                  <appliedToList>
                    <appliedTo>
                      <value></value>
                      <type></type>
                    </appliedTo>
                  </appliedToList>
                  <sources excluded="">
                    <source>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </source>
                  </sources>
                  <destinations excluded="">
                    <destination>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </destination>
                  </destinations>
                  <services>
                    <service>
                      <value></value>
                    </service>
                  </services>
                </rule>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections/{sectionId}/rules/{ruleId}:
    get:
      tags:
        - firewall
      summary: dfwL2RuleRead
      description: |+
        Retrieve the configuration of the specified rule.


        Parameters:

        ruleId: The ID of the rule.


      parameters:
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwL2RuleUpdate
      description: >+
        Update a distributed firewall rule in a layer 2 section.


        * Retrieve the configuration for the section that contains the rule you
        want
          to modify.
        * Retrieve the Etag value from the response headers.
          **Note**: This is the Etag value of the firewall section to which you want
          to add the rule. If you are keeping this rule in the same section, you must
          keep the same Etag number.
        * Extract and modify the rule configuration from the response body as
        needed.

        * Set the If-Match header to the section Etag value, and submit the
        request.


        Not all fields are required while sending the request. All the optional
        fields

        are safe to be ignored while sending the configuration to server. For
        example,

        if an IP set is referenced in the rule only IPSet and Type is needed in
        the

        Source/Destination objects and not Name and isValid tags.



        Parameters:


        ruleId: The ID of the rule.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule id="" disabled="" logged="">
                  <name></name>
                  <action></action>
                  <notes></notes>
                  <sources excluded="">
                    <source>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </source>
                  </sources>
                  <destinations excluded="">
                    <destination>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </destination>
                  </destinations>
                  <services>
                    <service>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </service>
                  </services>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                </rule>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwL2RuleDelete
      description: |+
        Delete the specified distributed firewall rule.

        Parameters:

        ruleId: The ID of the rule.


      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: sectionId
          in: path
          schema:
            type: string
          required: true
        - name: ruleId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections:
    post:
      tags:
        - firewall
      summary: layer3RedirectSectionsCreate
      description: |+
        Add L3 redirect section

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections/{section}:
    get:
      tags:
        - firewall
      summary: sectionRead
      description: |+
        Get L3 redirect section configuration

        Parameters:

        section: Specify section by ID or name

      parameters:
        - name: section
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: sectionUpdate
      description: |+
        Modify layer 3 redirect section. You will need to get the Etag
        value out of the GET first. Then pass the modified version of the
        whole redirect section configuration in the GET body.


        Parameters:

        section: Specify section by ID or name

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                  </rule>
                </section>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: section
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: sectionDelete
      description: |+
        Delete specified L3 redirect section

        Parameters:

        section: Specify section by ID or name

      parameters:
        - name: section
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections/{section}/rules:
    post:
      tags:
        - firewall
      summary: rulesCreate
      description: |+
        Add L3 redirect rule

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: section
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections/{section}/rules/{ruleID}:
    get:
      tags:
        - firewall
      summary: ruleRead
      description: |+
        Get L3 redirect rule

        Parameters:

        ruleID: Specified redirect rule

      parameters:
        - name: section
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: ruleUpdate
      description: |+
        Modify L3 redirect rule. You will need Etag value from the
        response header of GET call. Then, pass Etag value as the
        if-match header in PUT call


        Parameters:

        ruleID: Specified redirect rule

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule id="" disabled="" logged="">
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                </rule>
      parameters:
        - name: If-Match
          in: header
          schema:
            type: string
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: section
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: ruleDelete
      description: |+
        Delete specified L3 redirect rule

        Parameters:

        ruleID: Specified redirect rule

      parameters:
        - name: section
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirect/profiles:
    get:
      tags:
        - firewall
      summary: serviceInsertionProfilesRead
      description: |+
        Retrieve the Service Insertion profiles that can be applied to
        layer3 redirect rules.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/state:
    get:
      tags:
        - firewall
      summary: dfwUpgradeRead
      description: |+
        Retrieve current state of firewall functioning after NSX upgrade.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwUpgradeEnable
      description: |+
        Enable distributed firewall.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/status:
    get:
      tags:
        - firewall
      summary: dfwStatusRead
      description: >+
        Get firewall configuration status


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.4 | Method updated. Parameter **generationNumberObjects** added.
        Clusters not configured for firewall are excluded from the status
        output.



        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/status/layer3sections/{sectionID}:
    get:
      tags:
        - firewall
      summary: L3SectionStatusRead
      description: >+
        Retrieve status of the last publish action for the specified layer 3
        section.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.4 | Method updated. Parameter **generationNumberObjects** added.
        Clusters not configured for firewall are excluded from the status
        output.



        Parameters:


        sectionID: Section ID

      parameters:
        - name: sectionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/status/layer2sections/{sectionID}:
    get:
      tags:
        - firewall
      summary: L2SectionStatusRead
      description: >+
        Retrieve status of the last publish action for the specified layer 2
        section.


        **Method history:**


        Release | Modification

        --------|-------------

        6.2.4 | Method updated. Parameter **generationNumberObjects** added.
        Clusters not configured for firewall are excluded from the status
        output.



        Parameters:


        sectionID: Section ID

      parameters:
        - name: sectionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts:
    post:
      tags:
        - firewall
      summary: dfwDraftsCreate
      description: |+
        Save a firewall configuration.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDraft name="">
                  <description></description>
                  <preserve></preserve>
                  <mode></mode>
                  <config>
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" >
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                  </config>
                </firewallDraft>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - firewall
      summary: dfwSaveConfigRead
      description: |+
        Displays the draft IDs of all saved configurations.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts/{draftID}:
    get:
      tags:
        - firewall
      summary: dfwDraftRead
      description: >+
        Get a saved firewall configuration.


        Parameters:


        draftID: Specified draft ID. Use `GET /4.0/firewall/globalroot-0/drafts`
        to

        retrieve all drafts.


      parameters:
        - name: draftID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwDraftUpdate
      description: >+
        Update a saved firewall configuration.


        Parameters:


        draftID: Specified draft ID. Use `GET /4.0/firewall/globalroot-0/drafts`
        to

        retrieve all drafts.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDraft name="">
                  <description></description>
                  <preserve></preserve>
                  <mode></mode>
                  <config>
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" >
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                  </config>
                </firewallDraft>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: draftID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwDraftDelete
      description: >+
        Delete a configuration.


        Parameters:


        draftID: Specified draft ID. Use `GET /4.0/firewall/globalroot-0/drafts`
        to

        retrieve all drafts.


      parameters:
        - name: draftID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts/{draftID}/action/export:
    get:
      tags:
        - firewall
      summary: dfwConfigExportRead
      description: |+
        Export a configuration.

        Parameters:

      parameters:
        - name: getLatestForUniversal
          in: query
          schema:
            type: string
        - name: draftID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts/{draftID}/action/import:
    post:
      tags:
        - firewall
      summary: dfwConfigImportCreate
      description: |+
        Import a configuration.

        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDraft id="" name="" timestamp="">
                  <description></description>
                  <preserve></preserve>
                  <user></user>
                  <mode></mode>
                  <config timestamp="">
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                    <generationNumber></generationNumber>
                  </config>
                </firewallDraft>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: draftID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/timeouts:
    get:
      tags:
        - firewall
      summary: dfwTimeoutsList
      description: |+
        Retrieve Distributed Firewall session timer configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - firewall
      summary: dfwTimeoutCreate
      description: |+
        Create a Distributed Firewall session timer configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallTimeoutConfiguration>
                  <name>new VM timeout</name>
                  <appliedToList>
                    <appliedTo>
                      <value>vm-217</value>
                      <type>VirtualMachine</type>
                    </appliedTo>
                  </appliedToList>
                  <isDefault>false</isDefault>
                  <tcpFirstPacket>180</tcpFirstPacket>
                  <tcpOpen>30</tcpOpen>
                  <tcpEstablished>43200</tcpEstablished>
                  <tcpClosing>180</tcpClosing>
                  <tcpFinWait>45</tcpFinWait>
                  <tcpClosed>40</tcpClosed>
                  <udpFirstPacket>60</udpFirstPacket>
                  <udpSingle>30</udpSingle>
                  <udpMultiple>60</udpMultiple>
                  <icmpFirstPacket>30</icmpFirstPacket>
                  <icmpErrorReply>15</icmpErrorReply>
                </firewallTimeoutConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/timeouts/{configId}:
    get:
      tags:
        - firewall
      summary: dfwTimeoutConfigIdRead
      description: >+
        Retrieve the specified Distributed Firewall session timer configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method introduced.



        Parameters:


        configId: Session timer configuration ID
        (**firewallTimeoutConfiguration**

        id). For example, *1004*.


      parameters:
        - name: configId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwTimeoutConfigIdUpdate
      description: >+
        Update the specified Distributed Firewall session timer configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method introduced.



        Parameters:


        configId: Session timer configuration ID
        (**firewallTimeoutConfiguration**

        id). For example, *1004*.


      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallTimeoutConfiguration id="1004">
                  <name>new VM timeout</name>
                  <appliedToList>
                    <appliedTo>
                      <value>vm-217</value>
                      <type>VirtualMachine</type>
                      <isValid>true</isValid>
                    </appliedTo>
                    <appliedTo>
                      <value>vm-218</value>
                      <type>VirtualMachine</type>
                      <isValid>true</isValid>
                    </appliedTo>
                  </appliedToList>
                  <generationNumber>1490768692562</generationNumber>
                  <isDefault>false</isDefault>
                  <tcpFirstPacket>180</tcpFirstPacket>
                  <tcpOpen>30</tcpOpen>
                  <tcpEstablished>43200</tcpEstablished>
                  <tcpClosing>180</tcpClosing>
                  <tcpFinWait>45</tcpFinWait>
                  <tcpClosed>40</tcpClosed>
                  <udpFirstPacket>60</udpFirstPacket>
                  <udpSingle>30</udpSingle>
                  <udpMultiple>60</udpMultiple>
                  <icmpFirstPacket>30</icmpFirstPacket>
                  <icmpErrorReply>15</icmpErrorReply>
                </firewallTimeoutConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: configId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwTimeoutConfigIdDelete
      description: >+
        Delete the specified Distributed Firewall session timer configuration.


        **Method history:**


        Release | Modification

        --------|-------------

        6.3.0 | Method introduced.



        Parameters:


        configId: Session timer configuration ID
        (**firewallTimeoutConfiguration**

        id). For example, *1004*.


      parameters:
        - name: configId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/stats/eventthresholds:
    get:
      tags:
        - firewall
      summary: dfwThresholdsRead
      description: |+
        Retrieve threshold configuration for distributed firewall.


        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwThresholdsUpdate
      description: |+
        Update threshold configuration for distributed firewall.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <eventThresholds>
                  <cpu>
                    <percentValue>80</percentValue>
                  </cpu>
                  <memory>
                    <percentValue>90</percentValue>
                  </memory>
                  <connectionsPerSecond>
                    <value>250000</value>
                  </connectionsPerSecond>
                </eventThresholds>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/config/globalconfiguration:
    get:
      tags:
        - firewall
      summary: dfwPerformanceRead
      description: |+
        Retrieve performance configuration for distributed firewall.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwPerformanceUpdate
      description: |+
        Update the distributed firewall performance configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. **autoDraftDisabled** parameter added.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <globalConfiguration>
                  <layer3RuleOptimize>false</layer3RuleOptimize>
                  <layer2RuleOptimize>true</layer2RuleOptimize>
                  <tcpStrictOption>false</tcpStrictOption>
                  <autoDraftDisabled>true</autoDraftDisabled>
                </globalConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/forceSync/{ID}:
    post:
      tags:
        - firewall
      summary: dfwSyncExecute
      description: |+
        Force sync host or cluster.

        Parameters:

        ID: Specified host or cluster to synchronize

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: ID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/{domainID}/enable/{truefalse}:
    post:
      tags:
        - firewall
      summary: dfwEnableDisableToggle
      description: |+
        Enable or disable firewall components on a cluster

        Parameters:

        domainID: Specified cluster

        truefalse: Set parameter to true/false to enable/disable

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      parameters:
        - name: domainID
          in: path
          schema:
            type: string
          required: true
        - name: truefalse
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/{contextId}/config/ipfix:
    get:
      tags:
        - firewall
      summary: dfwIPFixRead
      description: |+
        Query IPFIX configuration.

        Parameters:

        contextId: Specified context

      parameters:
        - name: contextId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - firewall
      summary: dfwIPFixUpdate
      description: |+
        Configure IPFIX.

        Parameters:

        contextId: Specified context

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipfixConfiguration>
                  <contextId></contextId>
                  <ipfixEnabled></ipfixEnabled>
                  <observationDomainId></observationDomainId>
                  <flowTimeout></flowTimeout>
                  <collector>
                    <ip></ip>
                    <port></port>
                  </collector>
                </ipfixConfiguration>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: contextId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - firewall
      summary: dfwIPFixDelete
      description: |+
        Deleting IPFIX configuration resets the config to default values


        Parameters:

        contextId: Specified context

      parameters:
        - name: contextId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/services/spoofguard/policies:
    post:
      tags:
        - spoofguard
      summary: spoofGuardPoliciesCreate
      description: |+
        Create a SpoofGuard policy to specify the operation mode for networks.


        Parameters:

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <spoofguardPolicy>
                  <name></name>
                  <description></description>
                  <operationMode></operationMode>
                  <enforcementPoint>
                    <id></id>
                    <name></name>
                    <type></type>
                  </enforcementPoint>
                  <allowLocalIPs></allowLocalIPs>
                </spoofguardPolicy>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - spoofguard
      summary: spoofGuardPoliciesList
      description: |+
        Retrieve information about all SpoofGuard policies.

        Parameters:

      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/services/spoofguard/policies/{policyID}:
    get:
      tags:
        - spoofguard
      summary: spoofGuardPolicyRead
      description: |+
        Retrieve information about the specified SpoofGuard policy.


        Parameters:

        policyID: SpoofGuard policy ID.

      parameters:
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - spoofguard
      summary: spoofGuardPolicyUpdate
      description: |+
        Modify the specified SpoofGuard policy.

        Parameters:

        policyID: SpoofGuard policy ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <spoofguardPolicy>
                  <policyId></policyId>
                  <name></name>
                  <description></description>
                  <operationMode></operationMode>
                  <enforcementPoint>
                    <id></id>
                    <name></name>
                    <type></type>
                  </enforcementPoint>
                  <allowLocalIPs></allowLocalIPs>
                </spoofguardPolicy>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - spoofguard
      summary: spoofGuardPolicyDelete
      description: |+
        Delete the specified SpoofGuard policy.

        Parameters:

        policyID: SpoofGuard policy ID.

      parameters:
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/4.0/services/spoofguard/{policyID}:
    post:
      tags:
        - spoofguard
      summary: spoofGuardPolicyIPAction
      description: |+
        Approve or publish IP addresses.

        Parameters:

        policyID: SpoofGuard policy ID.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <spoofguardList>
                  <spoofguard>
                    <id></id>
                    <vnicUuid></vnicUuid>
                    <approvedIpAddress>
                      <ipAddress></ipAddress>
                    </approvedIpAddress>
                    <approvedMacAddress></approvedMacAddress>
                    <approvedBy></approvedBy>
                    <approvedOn></approvedOn>
                    <publishedIpAddress>
                      <ipAddress></ipAddress>
                    </publishedIpAddress>
                    <publishedMacAddress></publishedMacAddress>
                    <publishedBy></publishedBy>
                    <publishedOn></publishedOn>
                  </spoofguard>
                </spoofguardList>
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/xml
        - name: vnicId
          in: query
          schema:
            type: string
        - name: action
          in: query
          schema:
            type: string
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - spoofguard
      summary: spoofGuardPolicyIPRead
      description: |+
        Retrieve IP addresses for the specified state.


        Parameters:

        policyID: SpoofGuard policy ID.

      parameters:
        - name: list
          in: query
          schema:
            type: string
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
