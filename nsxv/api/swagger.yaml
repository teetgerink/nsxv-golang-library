openapi: 3.0.0
info:
  title: NSX-V
  version: 1.0.0
servers:
- url: "https://{{nsxmanager}}"
tags:
- name: "1.0"
- name: 1.0 > appliance-management
- name: 1.0 > cli
- name: 1.0 > directory
- name: 1.0 > eventcontrol
- name: 1.0 > identity
- name: 1.0 > syslog
- name: "2.0"
- name: 2.0 > alarms
- name: 2.0 > application
- name: 2.0 > applicationgroup
- name: 2.0 > auditlog
- name: 2.0 > capacity
- name: 2.0 > config
- name: 2.0 > controller
- name: 2.0 > deploy
- name: 2.0 > endpointsecurity
- name: 2.0 > hardwaregateways
- name: 2.0 > inventory
- name: 2.0 > ipset
- name: 2.0 > job
- name: 2.0 > macset
- name: 2.0 > network-features
- name: 2.0 > nwfabric
- name: 2.0 > policy
- name: 2.0 > pools
- name: 2.0 > securitygroup
- name: 2.0 > securitytags
- name: 2.0 > si
- name: 2.0 > snmp
- name: 2.0 > scopes
- name: 2.0 > ssoconfig
- name: 2.0 > switches
- name: 2.0 > systemalarms
- name: 2.0 > systemevent
- name: 2.0 > traceflow
- name: 2.0 > truststore
- name: 2.0 > universalsync
- name: 2.0 > usermgmt
- name: 2.0 > vcconfig
- name: 2.0 > virtualwires
- name: "2.1"
- name: 2.1 > excludelist
- name: 2.1 > flow
- name: "3.0"
- name: 3.0 > ai
- name: "4.0"
- name: 4.0 > edges
- name: 4.0 > edgePublish
- name: 4.0 > firewall
- name: 4.0 > spoofguard
paths:
  /api/1.0/appliance-management/global/info:
    get:
      tags:
      - 1.0 > appliance-management
      summary: globalInfoRead
      description: |+
        Retrieve global information containing version information as well as
        current logged in user.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/summary/system:
    get:
      tags:
      - 1.0 > appliance-management
      summary: summaryInfoRead
      description: "Retrieve system summary info such as address, dns name, version,\
        \ CPU,\nmemory and storage.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/summary/components:
    get:
      tags:
      - 1.0 > appliance-management
      summary: componentInfoRead
      description: |+
        Retrieve summary of all available components and their status info.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/restart:
    post:
      tags:
      - 1.0 > appliance-management
      summary: systemRebootExecute
      description: |+
        Reboot the NSX Manager appliance.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/cpuinfo:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemCPUInfoRead
      description: |+
        Retrieve NSX Manager CPU information.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/uptime:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemUptimeRead
      description: "Retrieve NSX Manager uptime information.\n\n**Example response:**\n\
        ```\n25 days, 22 hours, 11 minutes\n```\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/meminfo:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemMemoryInfoRead
      description: |+
        Retrieve NSX Manager memory information.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/storageinfo:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemStorageInfoRead
      description: |+
        Retrieve NSX Manager storage information.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/network:
    get:
      tags:
      - 1.0 > appliance-management
      summary: networkSettingsRead
      description: "Retrieve network information for the NSX Manager appliance. i.e.\
        \ host name, IP address, DNS settings\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 1.0 > appliance-management
      summary: networkSettingsUpdate
      description: |+
        Update network information for the NSX Manager appliance.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <network>
                  <hostName>nsxmgr-01a</hostName>
                  <networkIPv4AddressDto>
                    <ipv4Address>192.168.110.15</ipv4Address>
                    <ipv4NetMask>255.255.255.0</ipv4NetMask>
                    <ipv4Gateway>192.168.110.1</ipv4Gateway>
                  </networkIPv4AddressDto>
                  <networkIPv6AddressDto>
                    <ipv6Address>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:5332</ipv6Address>
                    <ipv6PrefixLength>64</ipv6PrefixLength>
                    <ipv6Gateway>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:0002</ipv6Gateway>
                  </networkIPv6AddressDto>
                  <dns>
                    <ipv4Address>192.168.110.10</ipv4Address>
                    <ipv6Address>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:0010</ipv6Address>
                    <domainList>corp.local</domainList>
                  </dns>
                </network>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/network/dns:
    put:
      tags:
      - 1.0 > appliance-management
      summary: applianceDnsClientUpdate
      description: |+
        Configure DNS.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <dns>
                  <ipv4Address></ipv4Address>
                  <ipv6Address></ipv6Address>
                  <domainList></domainList>
                </dns>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 1.0 > appliance-management
      summary: applianceDnsClientDelete
      description: |+
        Delete DNS server configuration.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/securitysettings:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemSecSettingsRead
      description: |+
        Retrieve the NSX Manager FIPS and TLS settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 1.0 > appliance-management
      summary: systemSecSettingsUpdate
      description: "Update the NSX Manager security settings, including FIPS and TLS.\n\
        \nDo not enable FIPS until you have upgraded all NSX components to NSX\n6.3.0\
        \ or later. Enable FIPS on NSX Edges before enabling it on the NSX\nManager.\n\
        \nChanging the FIPS mode will reboot the NSX Manager appliance.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.3.0 | Method\
        \ introduced.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<securitySettings>\n  <fipsEnabled>true</fipsEnabled>\n  <tlsSettings>\n\
                \    <serverEnabledProtocols>TLSv1.1,TLSv1.2</serverEnabledProtocols>\n\
                \    <clientEnabledProtocols>TLSv1.1,TLSv1.2</clientEnabledProtocols>\n\
                \  </tlsSettings>\n</securitySettings>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/tlssettings:
    get:
      tags:
      - 1.0 > appliance-management
      summary: tlsSettingsRead
      description: |+
        Retrieve TLS settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 1.0 > appliance-management
      summary: tlsSettingsUpdate
      description: "Update TLS settings.\n\nInclude a comma separated list of the\
        \ TLS versions you want to enable,\nfor both server and client.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ introduced.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<tlsSettings>\n  <serverEnabledProtocols>TLSv1.1,TLSv1.2</serverEnabledProtocols>\n\
                \  <clientEnabledProtocols>TLSv1.1,TLSv1.2</clientEnabledProtocols>\n\
                </tlsSettings>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/timesettings:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemTimeRead
      description: "Retrieve time settings, like timezone or current date and time\
        \ with\nNTP server, if configured.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 1.0 > appliance-management
      summary: systemTimeUpdate
      description: |+
        Configure time or specify the NTP server to use for time
        synchronization.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <timeSettings>
                  <ntpServer>
                    <string>192.168.110.1</string>
                  </ntpServer>
                  <datetime>04/19/2017 06:53:57</datetime>
                  <timezone>UTC</timezone>
                </timeSettings>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/timesettings/ntp:
    delete:
      tags:
      - 1.0 > appliance-management
      summary: ntpDelete
      description: |+
        Delete NTP server.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/locale:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemLocaleRead
      description: |+
        Retrieve locale info.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 1.0 > appliance-management
      summary: systemLocaleUpdate
      description: |+
        Configure locale.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <locale>
                  <language>ja</language>
                  <country>JP</country>
                </locale>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/system/syslogserver:
    get:
      tags:
      - 1.0 > appliance-management
      summary: systemSyslogServerRead
      description: |+
        Retrieve syslog servers.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 1.0 > appliance-management
      summary: systemSyslogServerUpdate
      description: |+
        Configure syslog servers.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <syslogserver>
                  <syslogServer>192.168.110.20</syslogServer>
                  <port>514</port>
                  <protocol>UDP</protocol>
                </syslogserver>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 1.0 > appliance-management
      summary: systemSyslogServerDelete
      description: |+
        Delete syslog servers.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components:
    get:
      tags:
      - 1.0 > appliance-management
      summary: componentsManagementRead
      description: |+
        Retrieve all appliance manager components.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}:
    get:
      tags:
      - 1.0 > appliance-management
      summary: componentManagementRead
      description: "Retrieve details for the specified component.\n\nParameters:\n\
        \ncomponentID: Specified component ID.\n\n"
      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/dependencies:
    get:
      tags:
      - 1.0 > appliance-management
      summary: componentDependenciesRead
      description: |+
        Retrieve dependency details for the specified component.

        Parameters:

      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/dependents:
    get:
      tags:
      - 1.0 > appliance-management
      summary: componentDependentsRead
      description: |+
        Retrieve dependents for the specified component.

        Parameters:

      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/status:
    get:
      tags:
      - 1.0 > appliance-management
      summary: componentStatusRead
      description: |+
        Retrieve current status for the specified component.

        Parameters:

      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/{componentID}/toggleStatus/{command}:
    post:
      tags:
      - 1.0 > appliance-management
      summary: componentManagementToggleCommand
      description: "Start or stop a component.\n\nParameters:\n\ncommand: Use **command**\
        \ parameter *start* or *stop*.\n\n"
      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: command
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/components/component/APPMGMT/restart:
    post:
      tags:
      - 1.0 > appliance-management
      summary: componentAppMgmtRestartExecute
      description: |+
        Restart the appliance management web application.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings:
    get:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupSettingsRead
      description: |+
        Retrieve backup settings.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupSettingsUpdate
      description: |+
        Configure backups on the appliance manager.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <backupRestoreSettings>
                  <ftpSettings>
                    <transferProtocol>SFTP</transferProtocol>
                    <hostNameIPAddress>192.168.110.30</hostNameIPAddress>
                    <port>22</port>
                    <userName>admin</userName>
                    <password>testing123</password>
                    <backupDirectory>/backups</backupDirectory>
                    <filenamePrefix>nsxmgr-01a</filenamePrefix>
                    <passPhrase>testing456</passPhrase>
                    <passiveMode>true</passiveMode>
                    <useEPRT>false</useEPRT>
                    <useEPSV>true</useEPSV>
                  </ftpSettings>
                  <backupFrequency>
                    <frequency>WEEKLY</frequency>
                    <dayOfWeek>SUNDAY</dayOfWeek>
                    <hourOfDay>2</hourOfDay>
                    <minuteOfHour>15</minuteOfHour>
                  </backupFrequency>
                  <excludeTables>
                    <excludeTable>AUDIT_LOGS</excludeTable>
                  </excludeTables>
                </backupRestoreSettings>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupSettingsDelete
      description: |+
        Delete appliance manager backup configuration.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings/ftpsettings:
    put:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupSettingsFtpUpdate
      description: |+
        Configure FTP settings.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings/excludedata:
    put:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupSettingsExcludeUpdate
      description: |+
        Specify tables that need not be backed up.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backupsettings/schedule:
    put:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupSettingsScheduleUpdate
      description: |+
        Set backup schedule.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupSettingsScheduleDelete
      description: |+
        Delete backup schedule.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backup:
    post:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupCreate
      description: |+
        Start an on-demand NSX backup.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/backups:
    get:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupsRead
      description: |+
        Retrieve list of all backups available at configured backup location.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/backuprestore/restore:
    post:
      tags:
      - 1.0 > appliance-management
      summary: applianceMgrBackupRestoreExecute
      description: |+
        Restore data from a backup file.

        Retrive a list of restore files using `GET /api/1.0/appliance-management/backuprestore/backups`.


        Parameters:

      parameters:
      - name: restoreFile
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/techsupportlogs/{componentID}:
    post:
      tags:
      - 1.0 > appliance-management
      summary: techLogsCreate
      description: "Generate tech support logs. The location response header contains\
        \ the\nlocation of the created tech support file. \n\n\nParameters:\n\ncomponentID:\
        \ Specified component to generate tech support logs. For example,\n*NSX*.\n\
        \n\n"
      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/techsupportlogs/{filename}:
    get:
      tags:
      - 1.0 > appliance-management
      summary: techLogsDownloadRead
      description: "Download tech support logs\n\nParameters:\n\nfilename: Name of\
        \ log file to download.\n\n"
      parameters:
      - name: filename
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/notifications:
    get:
      tags:
      - 1.0 > appliance-management
      summary: notificationsRead
      description: |+
        Retrieve all system generated notifications.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 1.0 > appliance-management
      summary: notificationsDelete
      description: |+
        Delete all notifications.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/notifications/{ID}/acknowledge:
    post:
      tags:
      - 1.0 > appliance-management
      summary: notificationsAcknowledgeAck
      description: "Acknowledge a notification. The notification is then deleted from\n\
        the system.\n\n\nParameters:\n\nID: Notification ID.\n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/uploadbundle/{componentID}:
    post:
      tags:
      - 1.0 > appliance-management
      summary: upgradeBundleUpload
      description: "Upload upgrade bundle.\n\nParameters:\n\ncomponentID: Component\
        \ ID.\n\n"
      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/information/{componentID}:
    get:
      tags:
      - 1.0 > appliance-management
      summary: upgradeBundleDetails
      description: "Once you have uploaded an upgrade bundle, you must retrieve\n\
        information about the upgrade. This request contains pre-upgrade\nvalidation\
        \ warnings and error messages, along with pre-upgrade\nquestions with default\
        \ answers. Review the information and edit the\nanswers in the **preUpgradeQuestionsAnswers**\
        \ section if needed before\nproviding the section as the request body to the\
        \ `POST\n/api/1.0/appliance-management/upgrade/start/{componentID}` method.\n\
        \n\nParameters:\n\ncomponentID: \n\n"
      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/start/{componentID}:
    post:
      tags:
      - 1.0 > appliance-management
      summary: upgradeStartExecute
      description: "Start upgrade process.\n\nParameters:\n\ncomponentID: Component\
        \ ID\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<preUpgradeQuestionsAnswers>\n  <preUpgradeQuestionAnswer>\n\
                \    <questionId>preUpgradeChecks1:Q1</questionId>\n    <question>Do\
                \ you want to enable SSH ?</question>\n    <questionAnserType>YESNO</questionAnserType>\n\
                \    <answer>YES</answer>\n  </preUpgradeQuestionAnswer>\n  <preUpgradeQuestionAnswer>\n\
                \    <questionId>preUpgradeChecks1:Q2</questionId>\n    <question>This\
                \ product participates in VMware&apos;s Customer Experience Improvement\
                \ Program (&quot;CEIP&quot;). The CEIP provides VMware with information\
                \ that enables VMware to improve its products and services, to fix\
                \ problems, and to advise you on\n      how best to deploy and use\
                \ our products. As part of the CEIP, VMware collects technical information\
                \ about your organization&apos;s use of VMware products and services\
                \ on a regular basis in association with your organization&apos;s\
                \ VMware license\n      key(s). This information does not personally\
                \ identify any individual. For additional information regarding the\
                \ CEIP, please see the Trust and Assurance Center at http://www.vmware.com/trustvmware/ceip.html.\
                \ You can select your participation\n      preferences below. Do you\
                \ want to join the VMware Customer Experience Improvement Program\
                \ ?</question>\n    <questionAnserType>YESNO</questionAnserType>\n\
                \    <answer>YES</answer>\n  </preUpgradeQuestionAnswer>\n</preUpgradeQuestionsAnswers>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/upgrade/status/{componentID}:
    get:
      tags:
      - 1.0 > appliance-management
      summary: upgradeStatusRead
      description: "Query upgrade status.\n\nParameters:\n\ncomponentID: Component\
        \ ID.\n\n"
      parameters:
      - name: componentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/pkcs12keystore/nsx:
    post:
      tags:
      - 1.0 > appliance-management
      summary: certificatesKeystoreUpdate
      description: |+
        Upload keystore file.

        Input is PKCS#12 formatted NSX file along with password.


        Parameters:

      parameters:
      - name: password
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/certificates/nsx:
    get:
      tags:
      - 1.0 > appliance-management
      summary: certificateManagerCertificatesNsxRead
      description: |+
        Retrieve certificate information from NSX Manager.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/csr/nsx:
    get:
      tags:
      - 1.0 > appliance-management
      summary: certificateCsrRead
      description: |+
        Retrieve generated certificate signing request (CSR).


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 1.0 > appliance-management
      summary: certificateCsrCreate
      description: |+
        Create a certificate signing request (CSR) for NSX Manager.

        The response header contains the created file location.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced. Replaces `PUT /api/1.0/appliance-management/certificatemanager/csr/nsx`.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <csr>
                  <algorithm></algorithm>
                  <keySize></keySize>
                  <subjectDto>
                    <commonName></commonName>
                    <organizationUnit></organizationUnit>
                    <organizationName></organizationName>
                    <localityName></localityName>
                    <stateName></stateName>
                    <countryCode></countryCode>
                  </subjectDto>
                </csr>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/appliance-management/certificatemanager/uploadchain/nsx:
    post:
      tags:
      - 1.0 > appliance-management
      summary: certificateChainUpload
      description: |+
        Upload certificate chain.

        Input is certificate chain file which is a PEM encoded chain of
        certificates received from the CA after signing a CSR.


        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/nsx/cli:
    post:
      tags:
      - 1.0 > cli
      summary: nsxCliExecute
      description: "The central command-line interface (central CLI) commands are\
        \ run from the\nNSX Manager command line, and retrieve information from the\
        \ NSX Manager and other\ndevices. These commands can also be executed in the\
        \ API.\n\nYou can insert any valid Central CLI command as the **command**\n\
        parameter. For a complete list of the Central CLI commands executable\nthrough\
        \ the API, please see the Central CLI chapter of the *NSX Command\nLine Interface\
        \ Reference*.\n\n\nParameters:\n\n"
      parameters:
      - name: Accept
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nsxcli>
                  <command>show logical-switch list host host-21 vni</command>
                </nsxcli>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/updateDomain:
    post:
      tags:
      - 1.0 > directory
      summary: domainCreate
      description: |+
        Register or update a domain with NSX Manager

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <DirectoryDomain>
                  <name>example.com</name>
                  <netbiosName>Example</netbiosName>
                  <username>Administrator</username>
                  <password>xxx</password>
                </DirectoryDomain>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/listDomains:
    get:
      tags:
      - 1.0 > directory
      summary: domainListRead
      description: |+
        Retrieve all agent discovered (or configured) LDAP domains.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deleteDomain/{ID}:
    delete:
      tags:
      - 1.0 > directory
      summary: domainDeleteDelete
      description: "Delete domain.\n\nParameters:\n\nID: Domain ID.\n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/updateLdapServer:
    post:
      tags:
      - 1.0 > directory
      summary: ldapServerCreateCreate
      description: |+
        Create LDAP server.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <LDAPServer>
                  <domainId>4</domainId>
                  <hostName>10.142.72.70</hostName>
                  <enabled>true</enabled>
                </LDAPServer>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/listLdapServersForDomain/{domainID}:
    get:
      tags:
      - 1.0 > directory
      summary: ldapServerDomainRead
      description: "Query LDAP servers for a domain.\n\nParameters:\n\ndomainID: Specified\
        \ domain.\n\n"
      parameters:
      - name: domainID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/fullSync/{domainID}:
    put:
      tags:
      - 1.0 > directory
      summary: ldapServerSyncExecute
      description: "Start LDAP full sync.\n\nParameters:\n\ndomainID: Specified domain.\n\
        \n"
      parameters:
      - name: domainID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deltaSync/{domainID}:
    put:
      tags:
      - 1.0 > directory
      summary: ldapServerDeltaSyncExecute
      description: "Start LDAP delta sync.\n\nParameters:\n\ndomainID: Specified domain.\n\
        \n"
      parameters:
      - name: domainID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deleteLdapServer/{serverID}:
    delete:
      tags:
      - 1.0 > directory
      summary: ldapServerDeleteDelete
      description: "Delete LDAP server.\n\nParameters:\n\nserverID: Specified LDAP\
        \ server.\n\n"
      parameters:
      - name: serverID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/updateEventLogServer:
    post:
      tags:
      - 1.0 > directory
      summary: eLogServerCreateCreate
      description: |+
        Create EventLog server.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <EventlogServer>
                  <id>1</id>
                  <domainId>4</domainId>
                  <hostName>10.142.72.70</hostName>
                  <enabled>false</enabled>
                </EventlogServer>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/listEventLogServersForDomain/{domainID}:
    get:
      tags:
      - 1.0 > directory
      summary: eLogServerDomainReadRead
      description: "Query EventLog servers for a domain.\n\nParameters:\n\ndomainID:\
        \ Specified domain.\n\n"
      parameters:
      - name: domainID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/directory/deleteEventLogServer/{serverID}:
    delete:
      tags:
      - 1.0 > directory
      summary: eLogServerDeleteDelete
      description: "Delete EventLog server.\n\nParameters:\n\nserverID: Specified\
        \ EventLog server ID.\n\n"
      parameters:
      - name: serverID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/eventcontrol/vm/{vmID}/request:
    post:
      tags:
      - 1.0 > eventcontrol
      summary: dataCollectionVMCreate
      description: "Enable or disable data collection on a virtual machine\n\nSet\
        \ **value** to *enabled* or *disabled*.\n\n\nParameters:\n\nvmID: MOID of\
        \ the guest vm\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: vmID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <perVmConfig>
                  <actions>
                    <action>
                      <type>per_vm_config</type>
                      <value>enabled</value>
                    </action>
                  </actions>
                </perVmConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/eventcontrol/eventcontrol-root/request:
    post:
      tags:
      - 1.0 > eventcontrol
      summary: dataCollectionKillSwitchToggle
      description: "Turn data collection on or off at the global level.\n\nIn case\
        \ of an emergency such as a network overload, you can turn off\ndata collection\
        \ at a global level (kill switch). This overrides all\nother data collection\
        \ settings.\n\nSet **value** to *enabled* or *disabled*.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <request>
                  <actions>
                    <action>
                      <type>global_switch</type>
                      <value>disabled</value>
                    </action>
                  </actions>
                </request>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/eventcontrol/config/vm/{vmID}:
    get:
      tags:
      - 1.0 > eventcontrol
      summary: dataCollectionVMInfoRead
      description: "Retrieve per VM configuration for data collection.\n\n\nParameters:\n\
        \nvmID: MOID of the guest vm\n\n"
      parameters:
      - name: vmID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/userIpMapping:
    get:
      tags:
      - 1.0 > identity
      summary: userIpMappingRead
      description: |+
        Query user-to-ip mapping list from database.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/hostIpMapping:
    get:
      tags:
      - 1.0 > identity
      summary: hostIpMappingRead
      description: |+
        Query host-to-ip mapping list from database.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/ipToUserMapping:
    get:
      tags:
      - 1.0 > identity
      summary: ipToUserMappingRead
      description: "Retrieve set of users associated with a given set of IP addresses\
        \ during\na specified time period. Since more than one user can be associated\n\
        with a single IP address during the specified time period, each IP\naddress\
        \ can be associated with zero or more (i.e a SET of) users.\n\n\nParameters:\n\
        \n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/directoryGroupsForUser:
    get:
      tags:
      - 1.0 > identity
      summary: userDirGroupsRead
      description: |+
        Query set of Windows Domain Groups (AD Groups) to which the specified
        user belongs.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMapping/{userID}/{IP}:
    post:
      tags:
      - 1.0 > identity
      summary: staticUserMappingCreate
      description: "Create static user IP mapping.\n\nParameters:\n\nuserID: User\
        \ ID\n\nIP: IP address\n\n"
      parameters:
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: IP
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMappings:
    get:
      tags:
      - 1.0 > identity
      summary: staticUserMappingsRead
      description: |+
        Query static user IP mapping list.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMappingsbyUser/{userID}:
    get:
      tags:
      - 1.0 > identity
      summary: staticUserMappingsbyUserRead
      description: "Query static user IP mapping for specified user.\n\nParameters:\n\
        \nuserID: User ID\n\n"
      parameters:
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 1.0 > identity
      summary: staticUserMappingsbyUserDelete
      description: "Delete static user IP mapping for specified user.\n\nParameters:\n\
        \nuserID: User ID\n\n"
      parameters:
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/identity/staticUserMappingsbyIP/{IP}:
    get:
      tags:
      - 1.0 > identity
      summary: staticUserMappingsbyIPRead
      description: "Query static user IP mapping for specified IP.\n\nParameters:\n\
        \nIP: IP address\n\n"
      parameters:
      - name: IP
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 1.0 > identity
      summary: staticUserMappingsbyIPDelete
      description: "Delete static user IP mapping for specified IP.\n\nParameters:\n\
        \nIP: IP address\n\n"
      parameters:
      - name: IP
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/sam/syslog/enable:
    post:
      tags:
      - 1.0 > syslog
      summary: syslogEnableSet
      description: |+
        Enable syslog support.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/1.0/sam/syslog/disable:
    post:
      tags:
      - 1.0 > syslog
      summary: syslogDisableSet
      description: |+
        Disable syslog support.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/alarms/{sourceId}:
    get:
      tags:
      - 2.0 > alarms
      summary: servicesAlarmsSourceList
      description: "Retrive all alarms from the specified source.\n\n\nParameters:\n\
        \nsourceId: ID of the object for which you want to manage alarms. *sourceId*\n\
        can be the ID of a cluster, host, resource pool, security group, or\nedge.\n\
        \n\n"
      parameters:
      - name: sourceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > alarms
      summary: servicesAlarmsSourceUpdate
      description: "Resolve all alarms for the specified source.\n\nAlarms will resolve\
        \ automatically when the cause of the alarm is\nresolved.  For example, if\
        \ an NSX Edge appliance is powered off, this\nwill trigger an alarm. If you\
        \ power the NSX Edge appliance back on, the\nalarm will resolve. If however,\
        \ you delete the NSX Edge appliance, the\nalarm will persist, because the\
        \ alarm cause was never resolved. In this\ncase, you may want to manually\
        \ resolve the alarm. Resolving the alarms\nwill clear them from the NSX dashboard.\n\
        \nUse `GET /api/2.0/services/alarms/{sourceId}` to retrieve the list of\n\
        alarms for the source. Use this response as the request body for the\n`POST`\
        \ call.\n\n\nParameters:\n\nsourceId: ID of the object for which you want\
        \ to manage alarms. *sourceId*\ncan be the ID of a cluster, host, resource\
        \ pool, security group, or\nedge.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sourceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<systemAlarms>\n    <systemAlarm>\n        <eventId>79965</eventId>\n\
                \        <timestamp>1485556529744</timestamp>\n        <severity>High</severity>\n\
                \        <eventSource>edge-3</eventSource>\n        <eventCode>130027</eventCode>\n\
                \        <message>NSX Edge VM (vmId : vm-430) is powered off. Please\
                \ use vsphere client to power on Edge VM</message>\n        <module>NSX\
                \ Edge Communication Agent</module>\n        <objectId>edge-3</objectId>\n\
                \        <reporterName>vShield Manager</reporterName>\n        <reporterType>4</reporterType>\n\
                \        <sourceType>4</sourceType>\n        <isResourceUniversal>false</isResourceUniversal>\n\
                \        <eventMetadata>\n            <data>\n                <key>edgeVmVcUUId</key>\n\
                \                <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>\n\
                \            </data>\n        </eventMetadata>\n        <resolutionAttempted>false</resolutionAttempted>\n\
                \        <resolvable>true</resolvable>\n        <alarmId>79965</alarmId>\n\
                \        <alarmCode>130027</alarmCode>\n        <alarmSource>edge-3</alarmSource>\n\
                \        <target>\n            <objectId>vm-430</objectId>\n     \
                \       <objectTypeName>VirtualMachine</objectTypeName>\n        \
                \    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>\n   \
                \         <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>\n\
                \            <revision>18</revision>\n            <type>\n       \
                \         <typeName>VirtualMachine</typeName>\n            </type>\n\
                \            <name>Perimeter-Gateway-01-0</name>\n            <scope>\n\
                \                <id>domain-c41</id>\n                <objectTypeName>ClusterComputeResource</objectTypeName>\n\
                \                <name>Management &amp; Edge Cluster</name>\n    \
                \        </scope>\n            <clientHandle></clientHandle>\n   \
                \         <extendedAttributes/>\n            <isUniversal>false</isUniversal>\n\
                \            <universalRevision>0</universalRevision>\n        </target>\n\
                \        <alarmBeingResolved>false</alarmBeingResolved>\n        <alarmMetadata>\n\
                \            <data>\n                <key>edgeVmVcUUId</key>\n   \
                \             <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>\n\
                \            </data>\n        </alarmMetadata>\n    </systemAlarm>\n\
                \    <systemAlarm>\n        <eventId>79967</eventId>\n        <timestamp>1485556529774</timestamp>\n\
                \        <severity>High</severity>\n        <eventSource>edge-3</eventSource>\n\
                \        <eventCode>130033</eventCode>\n        <message>NSX Edge\
                \ VM (vmId : vm-430) is not responding to NSX manager health check.\
                \ Please check NSX manager logs for details.</message>\n        <module>NSX\
                \ Edge Health Check</module>\n        <objectId>edge-3</objectId>\n\
                \        <reporterName>vShield Manager</reporterName>\n        <reporterType>4</reporterType>\n\
                \        <sourceType>4</sourceType>\n        <isResourceUniversal>false</isResourceUniversal>\n\
                \        <eventMetadata>\n            <data>\n                <key>edgeVmVcUUId</key>\n\
                \                <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>\n\
                \            </data>\n            <data>\n                <key>edgeId</key>\n\
                \                <value>edge-3</value>\n            </data>\n    \
                \        <data>\n                <key>edgeVmName</key>\n         \
                \       <value>Perimeter-Gateway-01-0</value>\n            </data>\n\
                \            <data>\n                <key>edgeVmId</key>\n       \
                \         <value>vm-430</value>\n            </data>\n        </eventMetadata>\n\
                \        <resolutionAttempted>false</resolutionAttempted>\n      \
                \  <resolvable>true</resolvable>\n        <alarmId>79967</alarmId>\n\
                \        <alarmCode>130033</alarmCode>\n        <alarmSource>edge-3</alarmSource>\n\
                \        <target>\n            <objectId>vm-430</objectId>\n     \
                \       <objectTypeName>VirtualMachine</objectTypeName>\n        \
                \    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>\n   \
                \         <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>\n\
                \            <revision>18</revision>\n            <type>\n       \
                \         <typeName>VirtualMachine</typeName>\n            </type>\n\
                \            <name>Perimeter-Gateway-01-0</name>\n            <scope>\n\
                \                <id>domain-c41</id>\n                <objectTypeName>ClusterComputeResource</objectTypeName>\n\
                \                <name>Management &amp; Edge Cluster</name>\n    \
                \        </scope>\n            <clientHandle></clientHandle>\n   \
                \         <extendedAttributes/>\n            <isUniversal>false</isUniversal>\n\
                \            <universalRevision>0</universalRevision>\n        </target>\n\
                \        <alarmBeingResolved>false</alarmBeingResolved>\n        <alarmMetadata>\n\
                \            <data>\n                <key>edgeVmVcUUId</key>\n   \
                \             <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>\n\
                \            </data>\n            <data>\n                <key>edgeId</key>\n\
                \                <value>edge-3</value>\n            </data>\n    \
                \        <data>\n                <key>edgeVmName</key>\n         \
                \       <value>Perimeter-Gateway-01-0</value>\n            </data>\n\
                \            <data>\n                <key>edgeVmId</key>\n       \
                \         <value>vm-430</value>\n            </data>\n        </alarmMetadata>\n\
                \    </systemAlarm>\n</systemAlarms>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/application/scope/{scopeId}:
    get:
      tags:
      - 2.0 > application
      summary: servicesAppsScopeScopeRead
      description: "Retrieve services that have been created on the specified scope.\n\
        \nParameters:\n\nscopeId: Can be \"globalroot-0\", \"universalroot-0\" or\
        \ datacenterId in upgrade use\ncases.\n\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/application/{scopeId}:
    post:
      tags:
      - 2.0 > application
      summary: servicesAppsScopeCreate
      description: "Create a new service on the specified scope.\n\n\nParameters:\n\
        \nscopeId: \n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <application>
                  <objectId></objectId>
                  <type>
                    <typeName/>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <element>
                    <applicationProtocol>mandatory</applicationProtocol>
                    <value>mandatory</value>
                  </element>
                </application>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/application/{applicationId}:
    get:
      tags:
      - 2.0 > application
      summary: serviceAppRead
      description: "Retrieve details about the specified service.\n\nParameters:\n\
        \napplicationId: Application ID. You can get a list of application IDs from\
        \ `GET\n/api/2.0/services/application/scope/{scopeId}`.\n\n\n"
      parameters:
      - name: applicationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > application
      summary: serviceAppUpdate
      description: "Modify the name, description, applicationProtocol, or port value\
        \ of a\nservice.\n\n\nParameters:\n\napplicationId: Application ID. You can\
        \ get a list of application IDs from `GET\n/api/2.0/services/application/scope/{scopeId}`.\n\
        \n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: applicationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <application>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <element>
                    <applicationProtocol></applicationProtocol>
                    <value></value>
                  </element>
                </application>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > application
      summary: serviceAppDelete
      description: "Delete the specified service.\n\nParameters:\n\napplicationId:\
        \ Application ID. You can get a list of application IDs from `GET\n/api/2.0/services/application/scope/{scopeId}`.\n\
        \n\n"
      parameters:
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/scope/{scopeId}:
    get:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupsRead
      description: "Retrieve a list of service groups that have been created on the\
        \ scope.\n\n\nParameters:\n\nscopeId: The scopeId can be \"globalroot-0\"\
        , \"universalroot-0\" or datacenterId\nin upgrade use cases\n\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupsCreate
      description: "Create a new service group on the specified scope.\n\nParameters:\n\
        \nscopeId: The scopeId can be \"globalroot-0\", \"universalroot-0\" or datacenterId\n\
        in upgrade use cases\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationGroup>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <inheritanceAllowed></inheritanceAllowed>
                </applicationGroup>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/{applicationgroupId}:
    get:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupRead
      description: "Retrieve details about the specified service group.\n\nParameters:\n\
        \napplicationgroupId: Application group ID\n\n"
      parameters:
      - name: applicationgroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupUpdate
      description: "Modify the name, description, applicationProtocol, or port value\
        \ of\nthe specified service group.\n\n\nParameters:\n\napplicationgroupId:\
        \ Application group ID\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: applicationgroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationGroup>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <description></description>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <name></name>
                  </scope>
                  <extendedAttributes></extendedAttributes>
                  <inheritanceAllowed></inheritanceAllowed>
                  <member>
                    <objectId></objectId>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <revision></revision>
                    <objectTypeName></objectTypeName>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                  </member>
                </applicationGroup>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupDelete
      description: "Delete the specified service group from a scope.\n\nParameters:\n\
        \napplicationgroupId: Application group ID\n\n"
      parameters:
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: applicationgroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/{applicationgroupId}/members/{moref}:
    put:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupMembersCreate
      description: "Add a member to the service group.\n\nParameters:\n\nmoref: Managed\
        \ object reference to the member.\n\n"
      parameters:
      - name: applicationgroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: moref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupMembersDelete
      description: "Delete a member from the service group.\n\nParameters:\n\nmoref:\
        \ Managed object reference to the member.\n\n"
      parameters:
      - name: applicationgroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: moref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/applicationgroup/scope/{scopeId}/members:
    get:
      tags:
      - 2.0 > applicationgroup
      summary: serviceGroupMembersScopeList
      description: "Get a list of member elements that can be added to the service\
        \ groups\ncreated on a particular scope.\n\nSince service group allows only\
        \ either services or other service\ngroups as members to be added, this helps\
        \ you get a list of all\npossible valid elements that can be added to the\n\
        service.\n\n\nParameters:\n\nscopeId: globalroot-0 or datacenterId in upgrade\
        \ use cases\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/auditlog:
    get:
      tags:
      - 2.0 > auditlog
      summary: auditLogsRead
      description: |+
        Get NSX Manager audit logs

        Parameters:

      parameters:
      - name: startIndex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/licensing/capacityusage:
    get:
      tags:
      - 2.0 > capacity
      summary: capacityUsageRead
      description: "Retrieve capacity usage information on the usage of CPUs, VMs\
        \ and concurrent\nusers for the distributed firewall and VXLAN.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ introduced.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/segments:
    get:
      tags:
      - 2.0 > config
      summary: vdnSegmentPoolList
      description: |+
        Retrieve information about all segment ID pools.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > config
      summary: vdnSegmentPoolAdd
      description: |+
        Add a segment ID pool.

        * **name** - Required property.
        * **desc** - Optional property.
        * **begin** - Required property. Minimum value is *5000*
        * **end** - Required property. Maximum value is *16777216*


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: isUniversal
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <segmentRange>
                  <name>Segment 1</name>
                  <desc>Segment Range 1</desc>
                  <begin>5000</begin>
                  <end>12999</end>
                </segmentRange>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/segments/{segmentPoolId}:
    get:
      tags:
      - 2.0 > config
      summary: vdnSegmentPoolShow
      description: "Retrieve information about the specified segment ID pool.\n\n\n\
        Parameters:\n\nsegmentPoolId: A valid *segmentPoolId*\n\n"
      parameters:
      - name: segmentPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > config
      summary: vdnSegmentPoolChange
      description: "Update the specified segment ID pool.\n\nIf the segment ID pool\
        \ is universal you must send the API request to\nthe primary NSX Manager.\n\
        \n\nParameters:\n\nsegmentPoolId: A valid *segmentPoolId*\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: segmentPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <segmentRange>
                  <desc>Local Segment ID pool expanded</desc>
                  <end>6999</end>
                </segmentRange>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > config
      summary: vdnSegmentPoolDelete
      description: "Delete the specified segment ID pool.\n\nIf the segment ID pool\
        \ is universal you must send the API request to\nthe primary NSX Manager.\n\
        \n\nParameters:\n\nsegmentPoolId: A valid *segmentPoolId*\n\n"
      parameters:
      - name: segmentPoolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/multicasts:
    get:
      tags:
      - 2.0 > config
      summary: vdnMulticastPoolList
      description: |+
        Retrieve information about all configured multicast address ranges.

        Universal multicast address ranges have the property isUniversal
        set to *true*.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > config
      summary: vdnMulticastPoolAdd
      description: |+
        Add a multicast address range for logical switches.

        The address range includes the beginning and ending addresses.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: isUniversal
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <multicastRange>
                  <name>Range 2</name>
                  <begin>237.0.0.0</begin>
                  <end>237.255.255.255</end>
                </multicastRange>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/multicasts/{multicastAddresssRangeId}:
    get:
      tags:
      - 2.0 > config
      summary: vdnMulticastPoolShow
      description: "Retrieve information about the specified multicast address range.\n\
        \n\nParameters:\n\nmulticastAddresssRangeId: A valid multicast address range\
        \ ID\n\n"
      parameters:
      - name: multicastAddresssRangeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > config
      summary: vdnMulticastPoolChange
      description: "Update the specified multicast address range.\n\nIf the multicast\
        \ address range is universal you must send the API\nrequest to the primary\
        \ NSX Manager.\n\n\nParameters:\n\nmulticastAddresssRangeId: A valid multicast\
        \ address range ID\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: multicastAddresssRangeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <multicastRange>
                  <name>Extended range 2</name>
                  <desc>Extended range 2</desc>
                  <end>238.255.255.255</end>
                </multicastRange>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > config
      summary: vdnMulticastPoolDelete
      description: "Delete the specified multicast address range.\n\nIf the multicast\
        \ address range is universal you must send the API\nrequest to the primary\
        \ NSX Manager.\n\n\nParameters:\n\nmulticastAddresssRangeId: A valid multicast\
        \ address range ID\n\n"
      parameters:
      - name: multicastAddresssRangeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/vxlan/udp/port:
    get:
      tags:
      - 2.0 > config
      summary: vdnConfigUDPShow
      description: |+
        Retrieve the UDP port configured for VXLAN traffic.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/vxlan/udp/port/{portNumber}:
    put:
      tags:
      - 2.0 > config
      summary: vdnConfigUDPUpdateUpdate
      description: "Update the VXLAN port configuration to use port *portNumber*.\n\
        \nThis method changes the VXLAN port in a three phrase process, avoiding\n\
        disruption of VXLAN traffic. In a cross-vCenter NSX environment,\nchange the\
        \ VXLAN port on the primary NSX Manager to propagate this\nchange on all NSX\
        \ Managers and hosts in the cross-vCenter NSX\nenvironment.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method updated.\
        \ Port change is now non-disruptive, and propagates to secondary NSX Managers\
        \ if performed on the primary NSX Manager. Force parameter added.\n\n\nParameters:\n\
        \nportNumber: A valid UDP port for VXLAN\n\n"
      parameters:
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: portNumber
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/vxlan/udp/port/taskStatus:
    get:
      tags:
      - 2.0 > config
      summary: vdnConfigUDPUpdateStatusRead
      description: |+
        Retrieve the status of the VXLAN port configuration update.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/resources/allocated:
    get:
      tags:
      - 2.0 > config
      summary: allocatedResourcesRead
      description: |+
        Retrieve information about allocated segment IDs or multicast
        addresses.


        Parameters:

      parameters:
      - name: type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pagesize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startindex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/config/host/{hostId}/vxlan/vteps:
    post:
      tags:
      - 2.0 > config
      summary: hostVtepResolveAction
      description: "Resolve missing VXLAN VMKernel adapters.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\
        \n\nParameters:\n\nhostId: \n\n"
      parameters:
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: hostId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllersRead
      description: |+
        Retrieves details and runtime status for all controllers.  Runtime status
        can be one of the following:

          * **Deploying** - controller is being deployed and the procedure has not
          completed yet.
          * **Removing** - controller is being removed and the procedure has not
          completed yet.
          * **Running** - controller has been deployed and can respond to API
          invocation.
          * **Unknown** - controller has been deployed but fails to respond to API
          invocation.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > controller
      summary: nsxControllerCreate
      description: "Adds a new NSX controller on the specified given cluster. The\
        \ *hostId*\nparameter is optional. The *resourcePoolId* can be either the\n\
        *clusterId* or *resourcePoolId*.\n\nThe IP address of the controller node\
        \ will be allocated\nfrom the specified IP pool. The *deployType* property\
        \ determines the\ncontroller node memory size and can be small, medium, or\
        \ large. However,\ndifferent controller deployment types are not currently\
        \ supported because\nthe OVF overrides it and different OVF types require\
        \ changes in the\nmanager build scripts. Despite not being supported, an arbitrary\n\
        *deployType* size must still be specified or an error will be returned.\n\
        Request without body to upgrade controller cluster.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerSpec>
                  <name></name>
                  <description></description>
                  <ipPoolId></ipPoolId>
                  <resourcePoolId></resourcePoolId>
                  <hostId></hostId>
                  <datastoreId></datastoreId>
                  <deployType></deployType>
                  <networkId></networkId>
                  <password></password>
                </controllerSpec>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/upgrade-available:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllerUpgradeAvailabilityRead
      description: |+
        Retrieve controller upgrade availability.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/progress/{jobId}:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllerJobRead
      description: "Retrieves status of controller creation or removal. The progress\
        \ gives\na percentage indication of current deploy / remove procedure.\n\n\
        \nParameters:\n\njobId: Specified job Id\n\n"
      parameters:
      - name: jobId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}:
    post:
      tags:
      - 2.0 > controller
      summary: nsxControllerRemediateAction
      description: "If you power off or delete a controller from vCenter, NSX Manager\n\
        detects the change in controller status. You can remediate the\ncontroller,\
        \ which will power on a powered off controller, or remove the\ncontroller\
        \ from the NSX Manager database if the controller is deleted.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ introduced.\n\n\nParameters:\n\ncontrollerId: Specified controller ID.\n\
        \nTo retrieve the controller IDs, log in to the vSphere Web Client.\nNavigate\
        \ to Networking & Security > Installation > Management, and\nview the **NSX\
        \ Controller nodes** section. The controller ID is\nlisted in the **Controller\
        \ ID** or **Controller Node** column,\ndepending on NSX version. An example\
        \ controller ID is\n*controller-1*. \n\nIn a cross-vCenter NSX environment,\
        \ retrieve the controller IDs from\nrows where the NSX Manager column contains\
        \ the primary NSX Manager\nIP address.\n\n\n"
      parameters:
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > controller
      summary: nsxControllerDelete
      description: "Delete the NSX controller.\n\n\nParameters:\n\ncontrollerId: Specified\
        \ controller ID.\n\nTo retrieve the controller IDs, log in to the vSphere\
        \ Web Client.\nNavigate to Networking & Security > Installation > Management,\
        \ and\nview the **NSX Controller nodes** section. The controller ID is\nlisted\
        \ in the **Controller ID** or **Controller Node** column,\ndepending on NSX\
        \ version. An example controller ID is\n*controller-1*. \n\nIn a cross-vCenter\
        \ NSX environment, retrieve the controller IDs from\nrows where the NSX Manager\
        \ column contains the primary NSX Manager\nIP address.\n\n\n"
      parameters:
      - name: forceRemoval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/systemStats:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllerStatsList
      description: |+
        Retrieve NSX Controller system statistics.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/techsupportlogs:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllerLogsRead
      description: |+
        Retrieve controller logs. Response content type is
        application/octet-stream and response header is filename. This
        streams a fairly large bundle back (possibly hundreds of MB).


        Parameters:

      parameters:
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/syslog:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllerSyslogRead
      description: |+
        Retrieve details about the syslog exporter on the controller.


        Parameters:

      parameters:
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > controller
      summary: nsxControllerSyslogCreate
      description: |+
        Add controller syslog exporter on the controller.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerSyslogServer>
                  <syslogServer></syslogServer>
                  <port></port>
                  <protocol></protocol>
                  <level></level>
                </controllerSyslogServer>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > controller
      summary: nsxControllerSyslogDelete
      description: |+
        Deletes syslog exporter on the specified controller node.


        Parameters:

      parameters:
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/{controllerId}/snapshot:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllerSnapshotRead
      description: |+
        Take a snapshot of the control cluster from the specified controller
        node.


        Parameters:

      parameters:
      - name: controllerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/cluster:
    get:
      tags:
      - 2.0 > controller
      summary: nsxControllerClusterRead
      description: |+
        Retrieve cluster wide configuration information for controller.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > controller
      summary: nsxControllerClusterUpdate
      description: |+
        Modify cluster wide configuration information for controller.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerConfig>
                  <sslEnabled></sslEnabled>
                </controllerConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/controller/credential:
    put:
      tags:
      - 2.0 > controller
      summary: nsxControllerPasswordUpdate
      description: |+
        Change the NSX controller password.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <controllerCredential>
                  <apiPassword></apiPassword>
                </controllerCredential>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy:
    put:
      tags:
      - 2.0 > deploy
      summary: serviceUpgrade
      description: "Upgrade service to recent version.\n\nThe datastore, dvPortGroup,\
        \ and ipPool variables should either not be\nspecified or have same value\
        \ as provided at time of deployment.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: startTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clusterDeploymentConfigs>
                  <clusterDeploymentConfig>
                    <clusterId></clusterId>
                    <datastore></datastore>
                    <services>
                      <serviceDeploymentConfig>
                        <serviceId></serviceId>
                        <serviceInstanceId></serviceInstanceId>
                        <dvPortGroup></dvPortGroup>
                        <ipPool></ipPool>
                      </serviceDeploymentConfig>
                    </services>
                  </clusterDeploymentConfig>
                </clusterDeploymentConfigs>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > deploy
      summary: securityFabricCreate
      description: |+
        Deploy security fabric.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: startTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clusterDeploymentConfigs>
                  <clusterDeploymentConfig>
                    <clusterId></clusterId>
                    <datastore></datastore>
                    <services>
                      <serviceDeploymentConfig>
                        <serviceId></serviceId>
                        <dvPortGroup></dvPortGroup>
                        <ipPool></ipPool>
                      </serviceDeploymentConfig>
                    </services>
                  </clusterDeploymentConfig>
                </clusterDeploymentConfigs>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/service/{serviceID}:
    get:
      tags:
      - 2.0 > deploy
      summary: serviceRead
      description: "Retrieve all clusters on which the service is installed.\n\nParameters:\n\
        \nserviceID: Specified service.\n\n"
      parameters:
      - name: serviceID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > deploy
      summary: serviceDelete
      description: "Uninstall specified service from specified clusters.\n\nParameters:\n\
        \nserviceID: Specified service.\n\n"
      parameters:
      - name: clusters
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: serviceID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/service/{serviceID}/dependsOn:
    get:
      tags:
      - 2.0 > deploy
      summary: serviceDependencyRead
      description: |+
        Retrieve service on which the specified service depends.


        Parameters:

      parameters:
      - name: serviceID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/cluster/{clusterID}:
    get:
      tags:
      - 2.0 > deploy
      summary: serviceClusterRead
      description: "Retrieve all services deployed along with their status.\n\nParameters:\n\
        \nclusterID: Cluster ID\n\n"
      parameters:
      - name: clusterID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > deploy
      summary: serviceClusterDelete
      description: "Uninstall a service. Fails if you try to remove a service that\
        \ another\nservice depends on.\n\nIn order to uninstall services in any order,\
        \ set parameter ignoreDependency to true.\n\n\nParameters:\n\nclusterID: Cluster\
        \ ID\n\n"
      parameters:
      - name: services
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: clusterID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deploy/cluster/{clusterID}/service/{serviceID}:
    get:
      tags:
      - 2.0 > deploy
      summary: serviceDetailsRead
      description: "Retrieve detailed information about the service.\n\nParameters:\n\
        \nserviceID: Service ID on cluster\n\n"
      parameters:
      - name: clusterID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: serviceID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration:
    post:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionVendorCreate
      description: |+
        Register the vendor of an endpoint protection solution. Specify the
        following parameters in the request.

        | Name            | Comments |
        |-----------------|------------|
        |**vendorId**     | VMware-assigned ID for the vendor. |
        |**vendorTitle**  | Vendor-specified title. |
        |**vendorDescription** | Vendor-specified description. |


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <VendorInfo>
                  <id>vendorId</id>
                  <title>vendorTitle</title>
                  <description>vendorDescription</description>
                </VendorInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/vendors:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionVendorsInfoList
      description: |+
        Retrieve the list of all registered Guest Introspection vendors.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionVendorInfoRead
      description: "Retrieve registration information for a Guest Introspection vendor.\n\
        \nParameters:\n\nvendorID: VMware-assigned ID for the vendor.\n\n"
      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionCreate
      description: "Register an endpoint protection solution. Specify the following\
        \ parameters in the request.\n\n| Name            | Comments |\n|-----------------|------------|\n\
        |**solutionAltitude**     | VMware-assigned altitude for the solution. *Altitude*\
        \ is a number that VMware assigns to uniquely identify the solution. The altitude\
        \ describes the type of solution and the order in which the solution receives\
        \ events relative to other solutions on the same host. |\n|**solutionTitle**\
        \  | Vendor-specified title for the solution. |\n|**solutionDescription**\
        \ | Vendor-specified description of the solution. |\n\n\nParameters:\n\nvendorID:\
        \ VMware-assigned ID for the vendor.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <SolutionInfo>
                  <altitude>solutionAltitude</altitude>
                  <title>solutionTitle</title>
                  <description>solutionDescription</description>
                </SolutionInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionVendorDelete
      description: "Unregister a Guest Introspection vendor.\n\nParameters:\n\nvendorID:\
        \ VMware-assigned ID for the vendor.\n\n"
      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}/solutions:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionsInfoRead
      description: |+
        Get registration information for all endpoint protection solutions for a Guest Introspection vendor.


        Parameters:

      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}/{altitude}:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionInfoRead
      description: "Get registration information for an endpoint protection solution.\n\
        \nParameters:\n\naltitude: VMware-assigned number that uniquely identifies\
        \ a solution. Describes\nthe type of solution and the order in which the solution\
        \ receives\nevents relative to other solutions on the same host.\n\n\n"
      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionDelete
      description: "Unregister an endpoint protection solution.\n\nParameters:\n\n\
        altitude: VMware-assigned number that uniquely identifies a solution. Describes\n\
        the type of solution and the order in which the solution receives\nevents\
        \ relative to other solutions on the same host.\n\n\n"
      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/registration/{vendorID}/{altitude}/location:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionIPPortRead
      description: |+
        Get the IP address and port on the vNIC host for an endpoint
        protection solution.


        Parameters:

      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionIPPortUpdate
      description: |+
        Set the IP address and port on the vNIC host for an endpoint
        protection solution.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <LocationInfo>
                  <ip>solutionIpAddress</ip>
                  <port>solutionIPPort</port>
                </LocationInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionIPPortDelete
      description: |+
        Unset the IP address and port for an endpoint protection
        solution.


        Parameters:

      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionActivationRead
      description: |+
        Retrieve activation information for all activated security VMs on the
        specified host.


        Parameters:

      parameters:
      - name: hostId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation/{vendorID}/{solutionID}:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionActivatedVMsRead
      description: "Retrieve a list of activated security VMs for an endpoint protection\
        \ solution.\n\n\nParameters:\n\nvendorID: VMware-assigned ID for the vendor.\n\
        \nsolutionID: solution ID for the endpoint protection solution.\n\n"
      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: solutionID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation/{vendorID}/{altitude}:
    post:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionActivateRegistered
      description: "Activate an endpoint protection solution that has been registered\n\
        and located. Specify the following parameter in the request body.\n\n| Name\
        \            | Comments |\n|-----------------|------------|\n|**svmMoid**\
        \     | Managed object ID of the virtual machine of the activated endpoint\
        \ protection solution. |\n\n\nParameters:\n\nvendorID: VMware-assigned ID\
        \ for the vendor.\n\naltitude: VMware-assigned number to uniquely identify\
        \ a solution. Describes the\ntype of solution and the order in which the solution\
        \ receives events\nrelative to other solutions on the same host.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ActivationInfo>
                  <moid>svmMoid</moid>
                </ActivationInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/endpointsecurity/activation/{vendorID}/{altitude}/{moid}:
    get:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionActivationStatusRead
      description: "Retrieve the endpoint protection solution activation status, either\
        \ true (activated) or false (not activated).\n\nParameters:\n\nmoid: Managed\
        \ object reference of a VM.\n\n"
      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: moid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > endpointsecurity
      summary: guestIntrospectionSolutionDeactivate
      description: "Deactivate an endpoint protection solution on a host.\n\nParameters:\n\
        \nmoid: Managed object reference of a VM.\n\n"
      parameters:
      - name: vendorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: altitude
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: moid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewaysList
      description: |+
        Retrieve information about all hardware gateways.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayCreate
      description: |+
        Install a hardware gateway.

        **bfdEnabled** is true by default.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewaySpec>
                  <name></name>
                  <description></description>
                  <certificate></certificate>
                  <bfdEnabled></bfdEnabled>
                </hardwareGatewaySpec>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/{hardwareGatewayId}:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayRead
      description: "Retrieve information about the specified hardware gateway.\n\n\
        **Method history:**\n\nRelease | Modification\n--------|-------------\n6.2.3\
        \ | Method introduced.\n\n\nParameters:\n\nhardwareGatewayId: Object ID of\
        \ the hardware gateway.\n\n"
      parameters:
      - name: hardwareGatewayId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayUpdate
      description: "Update the specified hardware gateway.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\
        \n\nParameters:\n\nhardwareGatewayId: Object ID of the hardware gateway.\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: hardwareGatewayId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewaySpec>
                  <name></name>
                  <description></description>
                  <certificate></certificate>
                  <bfdEnabled></bfdEnabled>
                </hardwareGatewaySpec>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayDelete
      description: "Delete the specified hardware gateway.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\
        \n\nParameters:\n\nhardwareGatewayId: Object ID of the hardware gateway.\n\
        \n"
      parameters:
      - name: hardwareGatewayId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/{hardwareGatewayId}/switches:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewaySwitchesList
      description: |+
        Retrieve information about switches on the specified hardware
        gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: hardwareGatewayId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/{hardwareGatewayId}/switches/{switchName}/switchports:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewaySwitchPortsList
      description: |+
        Retrive information about the hardware gateway switch ports for
        the specified switch and hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: hardwareGatewayId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: switchName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/replicationcluster:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayReplicationClusterRead
      description: |+
        Retrieve information about the hardware gateway replication cluster.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayReplicationClusterUpdate
      description: |+
        Update the hardware gateway replication cluster.

        Add or remove hosts on a replication cluster.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: appplication/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <replicationCluster>
                  <hosts>
                    <basicinfo>
                      <objectId>host-20</objectId>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-21</objectId>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-26</objectId>
                    </basicinfo>
                  </hosts>
                </replicationCluster>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBindingsList
      description: |+
        Retrieve information about hardware gateway bindings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: hardwareGatewayId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: vni
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBindingCreate
      description: |+
        Create a hardware gateway binding.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayBinding>
                  <hardwareGatewayId></hardwareGatewayId>
                  <vlan></vlan>
                  <switchName></switchName>
                  <portName></portName>
                </hardwareGatewayBinding>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings/{bindingId}:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBindingRead
      description: "Retrieve information about the specified hardware gateway binding.\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.2.3 | Method introduced.\n\n\nParameters:\n\nbindingId: hardware gateway\
        \ binding ID.\n\n"
      parameters:
      - name: bindingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBindingUpdate
      description: "Update the specified hardware gateway binding.\n\nYou can update\
        \ the binding parameters. This API will fail if:\n* the specified *hardwareGatewayId*\
        \ does not exist.\n* the specified logical switch (*virtualWire*) is not present\
        \ or there is a software\n  gateway on the binding.\n* the new binding value\
        \ is a duplicate of an existing binding.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\n\n\
        Parameters:\n\nbindingId: hardware gateway binding ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: bindingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayBinding>
                  <hardwareGatewayId>hardwaregateway1</hardwareGatewayId>
                  <vlan>201</vlan>
                  <switchName>s1</switchName>
                  <portname>s1</portname>
                  <virtualWire>virtualwire-1</virtualWire>
                </hardwareGatewayBinding>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBindingDelete
      description: "Delete the specified hardware gateway binding.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\
        \n\nParameters:\n\nbindingId: hardware gateway binding ID.\n\n"
      parameters:
      - name: bindingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings/{bindingId}/statistic:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBindingStatisticRead
      description: |+
        Retrieve statistics for the specified hardware gateway binding.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: bindingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bindings/manage:
    post:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBindingsManageOperations
      description: "Manage hardware gateway binding objects.\n\nUse this API to attach,\
        \ detach, and update multiple bindings in a\nsingle API call.  This API accepts\
        \ three lists for add, update, and\ndelete. Each list accepts a hardwareGatewayManageBindingsItem\
        \ with a\nfull description of the new binding with its objectID. This API\n\
        handles a maximum of 100 HardwareGatewayManageBindingsItem objects\nfor each\
        \ of the Add/Update/Delete lists.\n\n**Method history:**\n\nRelease | Modification\n\
        --------|-------------\n6.2.3 | Method introduced.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayManageBindings>
                  <addItems>
                    <hardwareGatewayManageBindingItem>
                      <hardwareGatewayId></hardwareGatewayId>
                      <virtualWireId></virtualWireId>
                      <switchName></switchName>
                      <portname></portname>
                      <vlan></vlan>
                      <virtualWire></virtualWire>
                    </hardwareGatewayManageBindingItem>
                  </addItems>
                  <updateItems>
                    <hardwareGatewayManageBindingItem>
                      <objectId></objectId>
                      <hardwareGatewayId></hardwareGatewayId>
                      <virtualWireId></virtualWireId>
                      <switchName></switchName>
                      <portname></portname>
                      <vlan></vlan>
                      <virtualWire></virtualWire>
                    </hardwareGatewayManageBindingItem>
                  </updateItems>
                  <deleteItems>
                    <hardwareGatewayManageBindingItem>
                      <objectId></objectId>
                    </hardwareGatewayManageBindingItem>
                  </deleteItems>
                </hardwareGatewayManageBindings>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bfd/config:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBfdConfigRead
      description: |+
        Retrieve global hardware gateway BFD configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBfdConfigUpdate
      description: |+
        Update global hardware gateway BFD configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <hardwareGatewayBfdParams>
                  <bfdEnabled>true</bfdEnabled>
                  <probeInterval>100</probeInterval>
                </hardwareGatewayBfdParams>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/hardwaregateways/bfd/status:
    get:
      tags:
      - 2.0 > hardwaregateways
      summary: hardwareGatewayBfdStatusRead
      description: "Retrieve hardware gateway BFD tunnel status for all tunnel\nendpoints,\
        \ including hosts and hardware gateways.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\n\n\
        Parameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/inventory/host/{hostId}/connection/status:
    get:
      tags:
      - 2.0 > inventory
      summary: inventoryStatusHostRead
      description: "Retrieve the status of the specified host.\n\nHistory:\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method updated. Introduced\
        \ **hostToControllerConnectionErrors** array.<br>Deprecated **fullSyncCount**\
        \ parameter. Parameter is still present, but always has value of -1.\n\n\n\
        Parameters:\n\nhostId: ID of the host to check.\n\n"
      parameters:
      - name: hostId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/inventory/hosts/connection/status:
    get:
      tags:
      - 2.0 > inventory
      summary: inventoryStatusHostsList
      description: "Retrieve the status of a list of hosts.\n\nRelease | Modification\n\
        --------|-------------\n6.2.3 | Method updated. Introduced **hostToControllerConnectionErrors**\
        \ array.<br>Deprecated **fullSyncCount** parameter. Parameter is still present,\
        \ but always has value of -1.\n\n\nParameters:\n\n"
      parameters:
      - name: hostId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipset/scope/{scopeMoref}:
    get:
      tags:
      - 2.0 > ipset
      summary: ipsetListList
      description: "Retrieve all configured IPSets\n\nParameters:\n\nscopeMoref: For\
        \ scopeMoref use \"globalroot-0\" for non-universal IP sets and use\n\"universalroot-0\"\
        \ for universal IP sets.\n\n\n"
      parameters:
      - name: scopeMoref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipset/{scopeMoref}:
    post:
      tags:
      - 2.0 > ipset
      summary: ipsetCreateCreate
      description: "Create a new IP set.\n\nParameters:\n\nscopeMoref: For scopeMoref\
        \ use \"globalroot-0\" for non-universal IP sets and use\n\"universalroot-0\"\
        \ for universal IP sets.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeMoref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <value></value>
                  <inheritanceAllowed></inheritanceAllowed>
                </ipset>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipset/{ipsetId}:
    get:
      tags:
      - 2.0 > ipset
      summary: ipsetRead
      description: "Retrieve an individual IP set.\n\nParameters:\n\nipsetId: The\
        \ IP set to be queried or changed.\n\n"
      parameters:
      - name: ipsetId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > ipset
      summary: ipsetUpdate
      description: "Modify an existing IP set.\n\nParameters:\n\nipsetId: The IP set\
        \ to be queried or changed.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: ipsetId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <objectTypeName></objectTypeName>
                  <value></value>
                </ipset>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > ipset
      summary: ipsetDelete
      description: "Delete an IP set.\n\nParameters:\n\nipsetId: The IP set to be\
        \ queried or changed.\n\n"
      parameters:
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ipsetId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/taskservice/job:
    get:
      tags:
      - 2.0 > job
      summary: taskFrameworkCriteria
      description: |+
        Query job instances by criterion.

        Parameters:

      parameters:
      - name: startIndex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortOrderAscending
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/taskservice/job/{jobId}:
    get:
      tags:
      - 2.0 > job
      summary: taskFrameworkJobsRead
      description: "Retrieve all job instances for the specified job ID.\n\nParameters:\n\
        \njobId: Specified job ID.\n\n"
      parameters:
      - name: jobId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/macset/{macsetId}:
    get:
      tags:
      - 2.0 > macset
      summary: macsetRead
      description: "Retrieve details about a MAC address set.\n\nParameters:\n\nmacsetId:\
        \ Specified MAC address set ID (can be retrieved by listing the MAC\naddress\
        \ set on a scope).\n\n\n"
      parameters:
      - name: macsetId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > macset
      summary: macsetUpdate
      description: "Modify an existing MAC address set.\n\nParameters:\n\nmacsetId:\
        \ Specified MAC address set ID (can be retrieved by listing the MAC\naddress\
        \ set on a scope).\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: macsetId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <macset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <value></value>
                </macset>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > macset
      summary: macsetDelete
      description: "Delete a MAC address set.\n\nParameters:\n\nmacsetId: Specified\
        \ MAC address set ID (can be retrieved by listing the MAC\naddress set on\
        \ a scope).\n\n\n"
      parameters:
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: macsetId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/macset/scope/{scopeId}:
    get:
      tags:
      - 2.0 > macset
      summary: macsetScopesRead
      description: "List MAC address sets on the specified scope.\n\nParameters:\n\
        \nscopeId: Can be \"globalroot-0\", \"universalroot-0\" or datacenterId in\
        \ upgrade\nuse cases. Universal MAC address sets are read-only from secondary\n\
        managers.\n\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > macset
      summary: macsetScopesCreate
      description: "Create a MAC address set on the specified scope.\n\nParameters:\n\
        \nscopeId: Can be \"globalroot-0\", \"universalroot-0\" or datacenterId in\
        \ upgrade\nuse cases. Universal MAC address sets are read-only from secondary\n\
        managers.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <macset>
                  <objectId></objectId>
                  <type>
                    <typeName></typeName>
                  </type>
                  <description></description>
                  <name></name>
                  <revision></revision>
                  <objectTypeName></objectTypeName>
                  <value></value>
                </macset>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/xvs/networks/{ID}/features:
    get:
      tags:
      - 2.0 > network-features
      summary: arpMACRead
      description: "Retrieve IP discovery and MAC learning information.\n\nParameters:\n\
        \nID: dvPortGroup MOID or logical switch (virtual wire) ID.\n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > network-features
      summary: arpMACUpdate
      description: "Enable or disable IP discovery and MAC learning.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method updated.\
        \ IP discovery can be disabled on secondary NSX Managers.\n\n\nParameters:\n\
        \nID: dvPortGroup MOID or logical switch (virtual wire) ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <networkFeatureConfig>
                  <ipDiscoveryConfig>
                    <enabled></enabled>
                  </ipDiscoveryConfig>
                  <macLearningConfig>
                    <enabled></enabled>
                  </macLearningConfig>
                </networkFeatureConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/configure:
    put:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricConfigUpdate
      description: "Upgrade Network virtualization components.\n_\nThis API call can\
        \ be used to upgrade network virtualization components.\nAfter NSX Manager\
        \ is upgraded, previously prepared clusters must have\nthe 6.x network virtualization\
        \ components installed.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nwFabricFeatureConfig>
                  <resourceConfig>
                    <resourceId>CLUSTER MOID</resourceId>
                  </resourceConfig>
                </nwFabricFeatureConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricConfigCreate
      description: "Install network fabric or VXLAN.\n\nThis method can be used to\
        \ perform the following tasks: \n* Install Network Virtualization Components\n\
        * Configure VXLAN\n* Configure VXLAN with LACPv2\n* Reset Communication Between\
        \ NSX Manager and a Host or Cluster\n\n**Parameter Information**\n\n| Name\
        \ | Comments |\n|------|----------|\n|**resourceId** | vCenter MOB ID of cluster.\
        \ For example, *domain-7*. A host can be specified when resetting communication.\
        \ For example, *host-24*. |\n|**featureId** | Feature to act upon. Omit for\
        \ network virtualization components operations. Use *com.vmware.vshield.vsm.vxlan*\
        \ for VXLAN operations, *com.vmware.vshield.vsm.messagingInfra* for message\
        \ bus operations.|\n|**ipPoolId** | Used for VXLAN installation. If not specified,\
        \ DHCP is used for VTEP address assignment.|\n|**teaming** | Used for VXLAN\
        \ installation. Options are *FAILOVER_ORDER*, *ETHER_CHANNEL*, *LACP_ACTIVE*,\
        \ *LACP_PASSIVE*, *LOADBALANCE_LOADBASED*, *LOADBALANCE_SRCID*, *LOADBALANCE_SRCMAC*,\
        \ *LACP_V2*|\n|**uplinkPortName** | The *uplinkPortName* as specified in vCenter.|\n\
        \n### Install Network Virtualization Components\n\n`POST /api/2.0/nwfabric/configure`\n\
        \n```\n<nwFabricFeatureConfig>\n  <resourceConfig>\n    <resourceId>CLUSTER\
        \ MOID</resourceId>\n  </resourceConfig>\n</nwFabricFeatureConfig>\n```\n\n\
        ### Configure VXLAN\n\n`POST /api/2.0/nwfabric/configure`\n\n```\n<nwFabricFeatureConfig>\n\
        \  <featureId>com.vmware.vshield.vsm.vxlan</featureId>\n  <resourceConfig>\n\
        \    <resourceId>CLUSTER MOID</resourceId>\n    <configSpec class=\"clusterMappingSpec\"\
        >\n      <switch>\n        <objectId>DVS MOID</objectId></switch>\n      \
        \  <vlanId>0</vlanId>\n        <vmknicCount>1</vmknicCount>\n        <ipPoolId>IPADDRESSPOOL\
        \ ID</ipPoolId>\n    </configSpec>\n  </resourceConfig>\n  <resourceConfig>\n\
        \    <resourceId>DVS MOID</resourceId>\n    <configSpec class=\"vdsContext\"\
        >\n      <switch>\n          <objectId>DVS MOID</objectId>\n      </switch>\n\
        \      <mtu>1600</mtu>\n      <teaming>ETHER_CHANNEL</teaming>\n    </configSpec>\n\
        \  </resourceConfig>\n</nwFabricFeatureConfig>\n```\n\n### Configure VXLAN\
        \ with LACPv2\n\n`POST /api/2.0/nwfabric/configure`\n\n```\n<nwFabricFeatureConfig>\n\
        \  <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>\n  <resourceConfig>\n\
        \    <resourceId>CLUSTER MOID</resourceId>\n    <configSpec class=\"clusterMappingSpec\"\
        >\n      <switch>\n        <objectId>DVS MOID</objectId>\n      </switch>\n\
        \      <vlanId>0</vlanId>\n      <vmknicCount>1</vmknicCount>\n    </configSpec>\n\
        \  </resourceConfig>\n  <resourceConfig>\n    <resourceId>DVS MOID</resourceId>\n\
        \    <configSpec class=\"vdsContext\">\n      <switch>\n        <objectId>DVS\
        \ MOID</objectId>\n      </switch>\n      <mtu>1600</mtu>\n      <teaming>LACP_V2</teaming>\n\
        \      <uplinkPortName>LAG NAME</uplinkPortName>\n    </configSpec>\n  </resourceConfig>\n\
        </nwFabricFeatureConfig>\n```\n\n### Reset Communication Between NSX Manager\
        \ and a Host or Cluster\n\n`POST /api/2.0/nwfabric/configure?action=synchronize`\n\
        \n``` \n<nwFabricFeatureConfig>\n  <featureId>com.vmware.vshield.vsm.messagingInfra</featureId>\n\
        \  <resourceConfig>\n    <resourceId>resourceId</resourceId>\n  </resourceConfig>\n\
        </nwFabricFeatureConfig> \n```\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<nwFabricFeatureConfig>\n  <featureId>com.vmware.vshield.vsm.vxlan</featureId>\n\
                \  <resourceConfig>\n    <resourceId>CLUSTER MOID</resourceId>\n \
                \   <configSpec class=\"clusterMappingSpec\">\n      <switch>\n  \
                \      <objectId>DVS MOID</objectId></switch>\n        <vlanId>0</vlanId>\n\
                \        <vmknicCount>1</vmknicCount>\n        <ipPoolId>IPADDRESSPOOL\
                \ ID</ipPoolId>\n    </configSpec>\n  </resourceConfig>\n</nwFabricFeatureConfig>\
                \ \n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricConfigDelete
      description: "Remove VXLAN or network virtualization components.\n\nRemoving\
        \ network virtualization components removes previously\ninstalled VIBs, tears\
        \ down NSX Manager to ESXi messaging, and removes\nany other network fabric\
        \ dependent features such as logical switches.\nIf a feature such as logical\
        \ switches is being used in your\nenvironment, this call fails.\n\nRemoving\
        \ VXLAN does not remove the network virtualization components\nfrom the cluster.\n\
        \n| Name | Comments |\n|------|----------|\n|**resourceId** | vCenter MOB\
        \ ID of cluster. For example, domain-7.|\n|**featureId** | Feature to act\
        \ upon. Omit for network virtualization components operations. Use *com.vmware.vshield.vsm.vxlan*\
        \ for VXLAN operations.|\n\n### Remove Network Virtualization Components\n\
        \n```\n<nwFabricFeatureConfig>\n  <resourceConfig>\n    <resourceId>CLUSTER\
        \ MOID</resourceId>\n  </resourceConfig>\n</nwFabricFeatureConfig>\n```\n\n\
        ### Remove VXLAN\n\n```\n<nwFabricFeatureConfig>\n  <featureId>com.vmware.vshield.vsm.vxlan</featureId>\n\
        \  <resourceConfig>\n    <resourceId>CLUSTER MOID</resourceId>\n   </resourceConfig>\n\
        </nwFabricFeatureConfig>\n```\n\n### Remove VXLAN with vDS context\n\n```\n\
        <nwFabricFeatureConfig>\n  <featureId>com.vmware.vshield.vsm.vxlan</featureId>\n\
        \  <resourceConfig>\n    <resourceId>CLUSTER MOID</resourceId>\n    <configSpec\
        \ class=\"map\">\n      <entry>\n        <keyclass=\"java.lang.String\">vxlan</key>\n\
        \        <valueclass=\"java.lang.String\">cascadeDeleteVdsContext</value>\n\
        \      </entry>\n    </configSpec>\n  </resourceConfig>\n</nwFabricFeatureConfig>\n\
        ```\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/features:
    get:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricFeaturesList
      description: |+
        Retrieves all network fabric features available on the cluster. Multiple
        **featureInfo** sections may be returned.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/status:
    get:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricStatusRead
      description: |+
        Retrieve the network fabric status of the specified resource.


        Parameters:

      parameters:
      - name: resource
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/status/child/{parentResourceID}:
    get:
      tags:
      - 2.0 > nwfabric
      summary: childStatusRead
      description: "Retrieve the network fabric status of child resources of the specified\
        \ resource.\n\n\nParameters:\n\nparentResourceID: Parent resource ID\n\n"
      parameters:
      - name: parentResourceID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/status/alleligible/{resourceType}:
    get:
      tags:
      - 2.0 > nwfabric
      summary: statusResourceTypeRead
      description: "Retrieve status of resources by criterion.\n\n\nParameters:\n\n\
        resourceType: Valid resource type\n\n"
      parameters:
      - name: resourceType
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/clusters/{clusterID}:
    get:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricClustersRead
      description: "Retrieve the locale ID for the specified cluster.\n\nParameters:\n\
        \nclusterID: Cluster ID.\n\n"
      parameters:
      - name: clusterID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricClustersUpdate
      description: "Update the locale ID for the specified cluster.\n\nParameters:\n\
        \nclusterID: Cluster ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: clusterID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nwFabricClusterConfig>
                  <localeId></localeId>
                </nwFabricClusterConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricClustersDelete
      description: "Delete locale ID for the specified cluster.\n\nParameters:\n\n\
        clusterID: Cluster ID.\n\n"
      parameters:
      - name: clusterID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/nwfabric/hosts/{hostID}:
    get:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricHostsRead
      description: "Retrieve the locale ID for the specified host.\n\nParameters:\n\
        \nhostID: Host ID.\n\n"
      parameters:
      - name: hostID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricHostsUpdate
      description: "Update the locale ID for the specified host.\n\nParameters:\n\n\
        hostID: Host ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: hostID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nwFabricHostConfig>
                  <localeId></localeId>
                </nwFabricHostConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > nwfabric
      summary: nwfabricHostsDelete
      description: "Delete the locale ID for the specified host.\n\nParameters:\n\n\
        hostID: Host ID.\n\n"
      parameters:
      - name: hostID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy:
    post:
      tags:
      - 2.0 > policy
      summary: securityPolicyCreate
      description: "Create a security policy.\n\nWhen creating a security policy,\
        \ a parent security policy can be\nspecified if required. The security policy\
        \ inherits services from the\nparent security policy. Security group bindings\
        \ and actions can also\nbe specified while creating the policy. Note that\
        \ execution order of\nactions in a category is implied by their order in the\
        \ list. The\nresponse of the call has Location header populated with the URI\
        \ using\nwhich the created object can be fetched.\n\nEnsure that:\n* the required\
        \ VMware built in services (such as Distributed Firewall\n  and Endpoint)\
        \ are installed. See *NSX Installation Guide*.\n* the required partner services\
        \ have been registered with NSX Manager.\n* the required security groups have\
        \ been created.\n\nTags related to Service Composer, security policies, and\
        \ security\ngroups:\nCommon Tags\n* **actionType** - Defines the type of action\
        \ belonging to a given\nexecutionOrderCategory\n* **executionOrderCategory**\
        \ - Category to which the action belongs to\n(endpoint, firewall or traffic_steering)\n\
        * **isActive** - In a security policy hierarchy, an action within a policy\n\
        may or may not be active based on the\nprecedence of the policy or usage of\
        \ isActionEnforced flag in that\nhierarchy\n* **isActionEnforced** - Enforces\
        \ an action of a parent policy on its\nchild policies for a given actionType\
        \ and\nexecutionOrderCategory. Note that in a policy hierarchy, for a given\n\
        actionType and executionOrderCategory, there can be only one action\nwhich\
        \ can be marked as enforced.\n* **isEnabled** - Indicates whether an action\
        \ is enabled\n* **secondarySecurityGroup** - Applicable for actions which\
        \ need secondary\nsecurity groups, say a\nsource-destination firewall rule\n\
        * **securityPolicy** - Parent policy in an action\nOutput only Tags\n* **executionOrder**\
        \ - Defines the sequence in which actions belonging to\nan executionOrderCategory\
        \ are\nexecuted. Note that this is not an input parameter and its value is\n\
        implied by the index in the list.\nFirewall Category Tags\n* **action** -\
        \ Allow or block the traffic\n* **applications** - Applications / application\
        \ groups on which the rules\nare to be applied\n* **direction** - Direction\
        \ of traffic towards primary security group.\nPossible values: inbound, outbound,\
        \ intra\n* **logged** - Flag to enable logging of the traffic that is hit\
        \ by this\nrule\n* **outsideSecondaryContainer** - Flag to specify outside\
        \ i.e. outside\nsecuritygroup-3\nEndpoint Category Tags\n* **serviceId** -\
        \ ID of the service (as registered with the service\ninsertion module). If\
        \ this tag is null, the\nfunctionality type (as defined in actionType tag)\
        \ is not applied which\nwill also result in blocking the actions (of given\
        \ functionality type)\nthat are inherited from the parent security policy.\
        \ This is true if\nthere is no action of enforce type.\n* **invalidServiceId**\
        \ - Flag to indicate that the service that was\nreferenced in this rule is\
        \ deleted, which make\nthe rule ineffective (or deviate from the original\
        \ intent that existed\nwhile configuring the rule). You must either modify\
        \ this rule by\nadding correct Service or delete this rule.\n* **serviceName**\
        \ -Name of the service\n* **serviceProfile** - Profile to be referenced in\
        \ Endpoint rule.\n* **invalidServiceProfile** - Flag to indicate that the\
        \ service profile\nthat was referenced in this rule is deleted, which makes\n\
        the rule ineffective (or deviate from the original intent that existed\nwhile\
        \ configuring the rule). You must either modify this rule by\nadding correct\
        \ Service Profile or delete this rule.\nThe following tags are deprecated:\n\
        * **vendorTemplateId**\n* **invalidVendorTemplateId**\n* **vendorTemplateName**\n\
        Traffic Steering/NetX Category Tags\n* **redirect** - Flag to indicate whether\
        \ to redirect the traffic or not\n* **serviceProfile** - Service profile for\
        \ which redirection is being\nconfigured\n* **logged** - Flag to enable logging\
        \ of the traffic that is hit by this\nrule\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityPolicy>
                  <name>name</name>
                  <description>decription</description>
                  <precedence></precedence>
                  <parent>
                    <objectId></objectId>
                  </parent>
                  <securityGroupBinding>
                    <objectId></objectId>
                  </securityGroupBinding>
                  <securityGroupBinding>
                    ...
                  </securityGroupBinding>
                  ...
                  ...
                  <securityGroupBinding>
                    ...
                  </securityGroupBinding>
                  <actionsByCategory>
                    <category>firewall</category>
                    <action class="firewallSecurityAction">
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <secondarySecurityGroup>
                        <objectId></objectId>
                      </secondarySecurityGroup>
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      ...
                      ...
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      <applications>
                        <application>
                          <objectId></objectId>
                        </application>
                        <applicationGroup>
                          <objectId></objectId>
                        </applicationGroup>
                        ...
                        ...
                      </applications>
                      <logged></logged>
                      <action></action>
                      <direction></direction>
                      <outsideSecondaryContainer></outsideSecondaryContainer>
                    </action>
                    <action>
                      ...
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>endpoint</category>
                    <action class="endpointSecurityAction">
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <serviceId></serviceId>
                      <serviceProfile>
                        <objectId>serviceprofile-1</objectId>
                        ...
                      </serviceProfile>
                      <invalidServiceProfile>false</invalidServiceProfile>
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>traffic_steering</category>
                    <action class="trafficSteeringSecurityAction">
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <logged></logged>
                      <redirect></redirect>
                      <serviceProfile>
                        <objectId></objectId>
                      </serviceProfile>
                    </action>
                  </actionsByCategory>
                </securityPolicy>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/status:
    get:
      tags:
      - 2.0 > policy
      summary: securityPolicyStatusRead
      description: "Retrieve the consolidated status of Service Composer.\n\nThe possible\
        \ return of value for status are: *in_sync*,\n*in_progress*, *out_of_sync*,\
        \ and *pending*.\n\n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.2.3 | Method introduced.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/alarms/all:
    get:
      tags:
      - 2.0 > policy
      summary: securityPolicyAlarmsAllList
      description: |+
        Retrieve all system alarms that are raised at Service Composer
        level and policy level.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/serviceprovider/firewall:
    get:
      tags:
      - 2.0 > policy
      summary: serviceComposerFirewallAppliedToRead
      description: |+
        Retrieve the Service Composer firewall applied to setting.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > policy
      summary: serviceComposerFirewallAppliedToUpdate
      description: |+
        Update the Service Composer firewall applied to setting.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <SecurityPolicyFirewallConfig>
                  <appliedTo>policy_security_group</appliedTo>
                </SecurityPolicyFirewallConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/{ID}:
    get:
      tags:
      - 2.0 > policy
      summary: securityPolicyIDRead
      description: "Retrieve security policy information.\n\n\nParameters:\n\nID:\
        \ ID of desired security policy (or 'all' to for all security\npolicies).\n\
        \n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > policy
      summary: securityPolicyIDUpdate
      description: "Edit a security policy.\n\nTo update a security policy, you must\
        \ first fetch it.\nThen edit the received XML and pass it back as the input.\
        \ The\nspecified configuration replaces the current configuration.\n\nSecurity\
        \ group mappings provided in the PUT call replaces the\nsecurity group mappings\
        \ for the security policy. To remove all\nmappings, delete the securityGroupBindings\
        \ parameter.\n\nYou can add or update actions for the security policy by editing\
        \ the\nactionsByCategory parameter. To remove all actions (belonging to all\n\
        categories), delete the actionsByCategory parameter. To remove\nactions belonging\
        \ to a specific category, delete the block for that\ncategory.\n\n\nParameters:\n\
        \nID: ID of desired security policy (or 'all' to for all security\npolicies).\n\
        \n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityPolicy>
                  <securityPolicy>
                    <name></name>
                    <description></description>
                    <precedence></precedence>
                    <parent>
                      <objectId></objectId>
                    </parent>
                    <securityGroupBinding>
                      <objectId></objectId>
                    </securityGroupBinding>
                    <actionsByCategory>
                      <category></category>
                      <action class="">
                        <name></name>
                        <description></description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <secondarySecurityGroup>
                          <objectId></objectId>
                        </secondarySecurityGroup>
                        <applications>
                          <application>
                            <objectId></objectId>
                          </application>
                          <applicationGroup>
                            <objectId></objectId>
                          </applicationGroup>
                        </applications>
                        <logged></logged>
                        <scope>
                          <id></id>
                          <name></name>
                          <objectTypeName></objectTypeName>
                        </scope>
                      </action>
                      <direction></direction>
                      <outsideSecondaryContainer></outsideSecondaryContainer>
                    </actionsByCategory>
                  </securityPolicy>
                </securityPolicy>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > policy
      summary: securityPolicyIDDelete
      description: "Delete a security policy.\n\nWhen you delete a security policy,\
        \ its child security policies and\nall the actions in it are deleted as well.\n\
        \n\nParameters:\n\nID: ID of desired security policy (or 'all' to for all\
        \ security\npolicies).\n\n\n"
      parameters:
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/{ID}/securityactions:
    get:
      tags:
      - 2.0 > policy
      summary: securityActionsRead
      description: "Retrieve all security actions applicable on a security policy.\n\
        \nThis list includes security actions from associated parent\nsecurity policies,\
        \ if any. Security actions per Execution Order\nCategory are sorted based\
        \ on the weight of security actions in\ndescending order.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitypolicy/hierarchy:
    get:
      tags:
      - 2.0 > policy
      summary: hierarchyRead
      description: "Export a Service Composer configuration (along with the\nsecurity\
        \ groups to which the security policies are mapped).\nYou can save the response\
        \ to a file.  The saved configuration can be\nused as a backup for situations\
        \ where you may accidentally delete a\npolicy configuration, or it can be\
        \ exported for use in another NSX\nManager environment.\n\nIf a prefix is\
        \ specified, it is added before the names of the\nsecurity policy, security\
        \ action, and security group objects in the\nexported XML. The prefix can\
        \ thus be used to indicate the remote\nsource from where the hierarchy was\
        \ exported.\n\n\nParameters:\n\n"
      parameters:
      - name: policyIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: prefix
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > policy
      summary: hierarchyCreate
      description: "Import a security policy configuration\n\nYou can create multiple\
        \ security policies and parent-child\nhierarchies using the data fetched through\
        \ export. All objects\nincluding security policies, security groups and security\
        \ actions\nare created on a global scope.\n\nThe policy that is being imported\
        \ needs to be included in the\nrequest body.\n\nIf a suffix is specified,\
        \ it is added after the names of the\nsecurity policy, security action, and\
        \ security group objects in the\nexported XML. The suffix can thus be used\
        \ to differentiate locally\ncreated objects from imported ones.\n\nThe location\
        \ of the newly created security policy objects (multiple\nlocations are separated\
        \ by commas) is populated in the Location\nheader of the response.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: suffix
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityPolicyHierarchy>
                  <name></name>
                  <description></description>
                  <securityPolicy></securityPolicy>
                  <securityGroup></securityGroup>
                </securityPolicyHierarchy>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securityaction/category/virtualmachines:
    get:
      tags:
      - 2.0 > policy
      summary: securityActionVMRead
      description: |+
        Retrieve all VirtualMachine objects on which security action of a
        given category and attribute has been applied.


        Parameters:

      parameters:
      - name: attributeKey
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: attributeValue
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitygroup/{ID}/securityactions:
    get:
      tags:
      - 2.0 > policy
      summary: securityActionRead
      description: "Retrieve all security actions applicable on a security group.\n\
        \nRetrieve all security actions applicable on a security group for all\nExecutionOrderCategories.\
        \ The list is sorted based on the weight of\nsecurity actions in descending\
        \ order.  The **isActive** tag indicates\nif a securityaction will be applied\
        \ (by the enforcement engine) on the\nsecurity group.\n\n\nParameters:\n\n\
        ID: Specified security group.\n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/virtualmachine/{ID}/securityactions:
    get:
      tags:
      - 2.0 > policy
      summary: vmApplicableSecurityActionRead
      description: "Retrieve the security actions applicable on a virtual machine.\n\
        \n\nParameters:\n\nID: VM ID\n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/serviceprovider/firewall:
    get:
      tags:
      - 2.0 > policy
      summary: serviceComposerDFWRead
      description: "If Service Composer goes out of sync with Distributed Firewall,\
        \ you\nmust re-synchronize Service Composer rules with firewall rules. If\n\
        Service Composer stays out of sync, firewall configuration may not\nstay enforced\
        \ as expected.\n\nThis GET method can perform the following functions, depending\
        \ on the\nrequest body provided. **Note:** Some REST clients do not allow\
        \ you to\nspecify a request body with a GET request.\n\n### Check if Service\
        \ Composer firewall and Distributed Firewall are in sync\n\n**Note: Deprecated.**\
        \ Use `GET /2.0/services/policy/securitypolicy/status` instead. \n\n* If they\
        \ are in sync, the response body does not contain any data.  \n* If they are\
        \ out of sync, the response body contains the unix timestamp representing\
        \ the time since when Service Composer firewall is out of sync.\n\n```\n<keyValues>\n\
        \  <keyValue>\n    <key>getServiceComposerFirewallOutOfSyncTimestamp</key>\n\
        \  </keyValue>\n</keyValues>\n```\n\n### Synchronize Service Composer firewall\
        \ with Distributed Firewall\n\n```\n<keyValues>\n  <keyValue>\n    <key>forceSync</key>\n\
        \  </keyValue>\n</keyValues>\n```\n\n### Retrieve the state of the auto save\
        \ draft property in Service Composer\n\nRetrieve the state of the auto save\
        \ draft property in Service\nComposer. Response is true or false.\n\n```\n\
        <keyValues>\n  <keyValue>\n    <key>getAutoSaveDraft</key>\n  </keyValue>\n\
        </keyValues>\n```\n\n### Change the state of the auto save draft property\
        \ in Service Composer\n\n**Note: Deprecated.**\n\nChange the state of the\
        \ auto save draft property in Service Composer.\nProvide request body value\
        \ of true or false.\n\n```\n<keyValues>\n  <keyValue>\n    <key>autoSaveDraft</key>\n\
        \    <value>false</value>\n  </keyValue>\n</keyValues> \n```\n\n**Method history:**\n\
        \n  Release | Modification\n  --------|-------------\n  6.2.3 | Method updated\
        \ and some functions deprecated. Changing auto save draft with the **autoSaveDraft**\
        \ parameter is deprecated, and will be removed in a future release.  <br>The\
        \ default setting of **autoSaveDraft** is changed from *true* to *false*.<br>Method\
        \ to check if Service Composer and Distributed Firewall are in sync is deprecated,\
        \ and will be removed in a future release. Use `GET /2.0/services/policy/securitypolicy/status`\
        \ instead.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/policy/securitygroup/{ID}/securitypolicies:
    get:
      tags:
      - 2.0 > policy
      summary: secGroupPoliciesRead
      description: "Retrieve security policies mapped to a security group.\n\nParameters:\n\
        \nID: Specified security group ID\n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/scope/{scopeId}:
    get:
      tags:
      - 2.0 > pools
      summary: ipPoolsList
      description: "Retrieves all IP pools on the specified scope where the *scopeID*\
        \ is the\nreference to the desired scope. An example of the *scopeID* is\n\
        globalroot-0.\n\n\nParameters:\n\nscopeId: For *scopeID* use globalroot-0\
        \ or *datacenterId* in upgrade use\ncases.\n\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > pools
      summary: ipPoolCreate
      description: "Create a pool of IP addresses. For *scopeId* use globalroot-0\
        \ or\nthe *datacenterId* in upgrade use cases.\n\n\nParameters:\n\nscopeId:\
        \ For *scopeID* use globalroot-0 or *datacenterId* in upgrade use\ncases.\n\
        \n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipamAddressPool>
                  <name></name>
                  <prefixLength></prefixLength>
                  <gateway></gateway>
                  <dnsSuffix></dnsSuffix>
                  <dnsServer1></dnsServer1>
                  <dnsServer2></dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <startAddress></startAddress>
                      <endAddress></endAddress>
                    </ipRangeDto>
                  </ipRanges>
                </ipamAddressPool>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/{poolId}:
    get:
      tags:
      - 2.0 > pools
      summary: ipPoolRead
      description: "Retrieve details about a specific IP pool.\n\nParameters:\n\n\
        poolId: Specifiy the pool ID as *poolId* in the URI.\n\n"
      parameters:
      - name: poolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > pools
      summary: ipPoolUpdate
      description: "To modify an IP pool, query the IP pool first. Then modify the\
        \ output and\nsend it back as the request body.\n\n\nParameters:\n\npoolId:\
        \ Specifiy the pool ID as *poolId* in the URI.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: poolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipamAddressPool>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <vsmUuid></vsmUuid>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <extendedAttributes></extendedAttributes>
                  <prefixLength></prefixLength>
                  <gateway></gateway>
                  <dnsSuffix></dnsSuffix>
                  <dnsServer1></dnsServer1>
                  <dnsServer2></dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <id></id>
                      <startAddress></startAddress>
                      <endAddress></endAddress>
                    </ipRangeDto>
                  </ipRanges>
                </ipamAddressPool>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > pools
      summary: ipPoolDelete
      description: "Delete an IP pool.\n\nParameters:\n\npoolId: Specifiy the pool\
        \ ID as *poolId* in the URI.\n\n"
      parameters:
      - name: poolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/{poolId}/ipaddresses:
    get:
      tags:
      - 2.0 > pools
      summary: ipPoolIpsRead
      description: |+
        Retrieves all allocated IP addresses from the specified pool.


        Parameters:

      parameters:
      - name: poolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > pools
      summary: ipPoolAllocateIp
      description: |+
        Allocate an IP Address from the pool. Use *ALLOCATE* in the
        **allocationMode** field in the body to allocate the next available
        IP. To allocate a specific one use *RESERVE* and pass the IP to
        reserve in the **ipAddress** fields in the body.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: poolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressRequest>
                  <allocationMode>ALLOCATE</allocationMode>
                  <ipAddress>192.168.1.2</ipAddress>
                </ipAddressRequest>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ipam/pools/{poolId}/ipaddresses/{ipAddress}:
    delete:
      tags:
      - 2.0 > pools
      summary: ipAddressReleaseDelete
      description: "Release an IP address allocation in the pool.\n\nParameters:\n\
        \nipAddress: The IP address to release, e.g. '192.168.10.10'\n\n\n"
      parameters:
      - name: poolId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ipAddress
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/bulk/{scopeId}:
    post:
      tags:
      - 2.0 > securitygroup
      summary: secGroupBulkCreate
      description: "Create a new security group on a global scope or universal scope\
        \ with\nmembership information.\n\nUniversal security groups are read-only\
        \ when querying a secondary NSX\nmanager.\n\nWhen you create a universal security\
        \ group (on scope\n*universalroot-0*) by default **localMembersOnly** is set\
        \ to *false*\nwhich indicates that the universal security group will contain\
        \ members\nacross the cross-vCenter NSX environment.  This is the case in\
        \ an\nactive active environment. You can add the following\nobjects to a universal\
        \ security group with *localMembersOnly=false*\n(active active):\n* IP Address\
        \ Set\n* MAC Address Set\n* Universal Security Groups with *localMembersOnly=false*\n\
        \nWhen you create a universal security group (on scope\n*universalroot-0*)\
        \ you can set the extendedAttribute\n**localMembersOnly** to *true* to indicate\
        \ that the universal security\ngroup will contain members local to that NSX\
        \ Manager only.  This is\nthe case in an active standby environment, because\
        \ only one NSX\nenvironment is active at a time, and the same VMs are present\
        \ in each\nNSX environment. You can add the following objects to a universal\n\
        security group with *localMembersOnly=true* (active standby):\n* Universal\
        \ Security Tag\n* IP Address Set\n* MAC Address Set\n* Universal Security\
        \ Groups with *localMembersOnly=true*\n* Dynamic criteria using VM name\n\n\
        You can set the **localMembersOnly** attribute only when the universal\nsecurity\
        \ group is created, it cannot be modified afterwards.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.3.0 | Extended attribute\
        \ **localMembersOnly** introduced.\n\n\nParameters:\n\nscopeId: For the scopeId\
        \ use *globalroot-0* for non-universal security groups\nand *universalroot-0*\
        \ for universal security groups.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <vsmUuid></vsmUuid>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <name></name>
                    <revision></revision>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes>
                    <extendedAttribute>
                      <name>localMembersOnly</name>
                      <value>true</value>
                    </extendedAttribute>
                  </extendedAttributes>
                  <member>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes></extendedAttributes>
                  </member>
                  <excludeMember>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes></extendedAttributes>
                  </excludeMember>
                  <dynamicMemberDefinition>
                    <dynamicSet>
                      <operator></operator>
                      <dynamicCriteria>
                        <operator></operator>
                        <key></key>
                        <criteria></criteria>
                        <value></value>
                      </dynamicCriteria>
                    </dynamicSet>
                  </dynamicMemberDefinition>
                </securitygroup>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{scopeId}:
    post:
      tags:
      - 2.0 > securitygroup
      summary: secGroupScopeIdCreate
      description: "Create a new security group, with no membership information specified.\n\
        You can add members later with `PUT\n/2.0/services/securitygroup/bulk/{objectId}`\n\
        \nWhen you create a universal security group (on scope\n*universalroot-0*)\
        \ by default **localMembersOnly** is set to *false*\nwhich indicates that\
        \ the universal security group will contain members\nacross the cross-vCenter\
        \ NSX environment.  This is the case in an\nactive active environment. You\
        \ can add the following\nobjects to a universal security group with *localMembersOnly=false*\n\
        (active active):\n* IP Address Set\n* MAC Address Set\n* Universal Security\
        \ Groups with *localMembersOnly=false*\n\nWhen you create a universal security\
        \ group (on scope\n*universalroot-0*) you can set the extendedAttribute\n\
        **localMembersOnly** to *true* to indicate that the universal security\ngroup\
        \ will contain members local to that NSX Manager only.  This is\nthe case\
        \ in an active standby environment, because only one NSX\nenvironment is active\
        \ at a time, and the same VMs are present in each\nNSX environment. You can\
        \ add the following objects to a universal\nsecurity group with *localMembersOnly=true*\
        \ (active standby):\n* Universal Security Tag\n* IP Address Set\n* MAC Address\
        \ Set\n* Universal Security Groups with *localMembersOnly=true*\n* Dynamic\
        \ criteria using VM name\n\nYou can set the **localMembersOnly** attribute\
        \ only when the universal\nsecurity group is created, it cannot be modified\
        \ afterwards.\n\n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.3.0 | Extended attribute **localMembersOnly** introduced.\n\n\nParameters:\n\
        \nscopeId: For the scopeId use *globalroot-0* for non-universal security groups\n\
        and *universalroot-0* for universal security groups.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <name></name>
                  <extendedAttributes>
                    <extendedAttribute>
                      <name>localMembersOnly</name>
                      <value>true</value>
                    </extendedAttribute>
                  </extendedAttributes>
                </securitygroup>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/bulk/{objectId}:
    put:
      tags:
      - 2.0 > securitygroup
      summary: secGroupBulkObjectUpdate
      description: "Update configuration for the specified security group, including\
        \ membership information.\n\n\nParameters:\n\nobjectId: Security group ID.\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <vsmUuid></vsmUuid>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <name></name>
                    <revision></revision>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes></extendedAttributes>
                  <member>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                  </member>
                  <excludeMember>
                    <objectId></objectId>
                    <objectTypeName></objectTypeName>
                    <vsmUuid></vsmUuid>
                    <revision></revision>
                    <type>
                      <typeName></typeName>
                    </type>
                    <name></name>
                    <scope>
                      <id></id>
                      <objectTypeName></objectTypeName>
                      <name></name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes></extendedAttributes>
                  </excludeMember>
                  <dynamicMemberDefinition>
                    <dynamicSet>
                      <operator></operator>
                      <dynamicCriteria>
                        <operator></operator>
                        <key></key>
                        <criteria></criteria>
                        <value></value>
                      </dynamicCriteria>
                    </dynamicSet>
                  </dynamicMemberDefinition>
                </securitygroup>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupObjectRead
      description: "Retrieve all members of the specified security group.\n\nParameters:\n\
        \nobjectId: Security group ID.\n\n"
      parameters:
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > securitygroup
      summary: secGroupObjectUpdate
      description: "Update configuration for the specified security group. Members\
        \ are not\nupdated. You must use `PUT\n/2.0/services/securitygroup/bulk/{objectId}`\
        \ to update a security\ngroup membership.\n\n\nParameters:\n\nobjectId: Security\
        \ group ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securitygroup>
                  <objectId></objectId>
                  <objectTypeName></objectTypeName>
                  <revision></revision>
                  <type>
                    <typeName></typeName>
                  </type>
                  <name></name>
                  <scope>
                    <id></id>
                    <objectTypeName></objectTypeName>
                    <name></name>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes></extendedAttributes>
                  <isUniversal></isUniversal>
                  <inheritanceAllowed></inheritanceAllowed>
                </securitygroup>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > securitygroup
      summary: secGroupObjectDelete
      description: "Delete an existing security group.\n\nIf *force=true* is specified,\
        \ the object is deleted even if used in\nother configurations, such as firewall\
        \ rules. If *force=true* is not\nspecified, the object is deleted only if\
        \ it is not used by other\nconfiguration; otherwise the delete fails.\n\n\n\
        Parameters:\n\nobjectId: Security group ID.\n\n"
      parameters:
      - name: force
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/members/{memberId}:
    put:
      tags:
      - 2.0 > securitygroup
      summary: secGroupMemberUpdate
      description: "Add a new member to the specified security group.\n\n\nParameters:\n\
        \nmemberId: Security group member, can be a vSphere managed object ID or NSX\n\
        object ID.\n\n\n"
      parameters:
      - name: failIfExists
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: memberId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > securitygroup
      summary: secGroupMemberDelete
      description: "Delete member from the specified security group.\n\nParameters:\n\
        \nmemberId: Security group member, can be a vSphere managed object ID or NSX\n\
        object ID.\n\n\n"
      parameters:
      - name: failIfAbsent
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: memberId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/virtualmachines:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupVMNodesRead
      description: |+
        Retrieve list of virtual machine entities that belong to a specific security
        group.


        Parameters:

      parameters:
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/ipaddresses:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupIPNodesRead
      description: |+
        Retrieve list of IP addresses that belong to a specific security
        group.


        Parameters:

      parameters:
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/macaddresses:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupMacNodesRead
      description: |+
        Retrieve list of MAC addresses that belong to a specific security
        group.


        Parameters:

      parameters:
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/{objectId}/translation/vnics:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupVnicNodesRead
      description: |+
        Retrieve list of vNICs that belong to a specific security group.


        Parameters:

      parameters:
      - name: objectId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/lookup/virtualmachine/{virtualMachineId}:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupLookupVMRead
      description: "Retrieve list of security groups that the specified virtual machine\n\
        belongs to.\n\n\nParameters:\n\nvirtualMachineId: Specified virtual machine\n\
        \n"
      parameters:
      - name: virtualMachineId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/internal/scope/{scopeId}:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupInternalRead
      description: "Retrieve all internal security groups on the NSX Manager. These\
        \ are used\n internally by the system and should not be created or modified\
        \ by end\nusers.\n\n\nParameters:\n\nscopeId: Specified transport zone (scope)\n\
        \n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/scope/{scopeId}:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupScopeRead
      description: "List all the security groups created on a specific scope.\n\n\
        Parameters:\n\nscopeId: scopeId can be \"globalroot-0\", \"universalroot-0\"\
        \ or datacenterID /\nportgroupID in upgrade use cases\n\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/scope/{scopeId}/memberTypes:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupScopeMembersRead
      description: |+
        Retrieve a list of valid elements that can be added to a security
        group.


        Parameters:

      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitygroup/scope/{scopeId}/members/{memberType}:
    get:
      tags:
      - 2.0 > securitygroup
      summary: secGroupScopeMemberTypeRead
      description: "Retrieve members of a specific type in the specified scope.\n\n\
        Parameters:\n\nmemberType: Specific member type\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: memberType
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag:
    get:
      tags:
      - 2.0 > securitytags
      summary: securityTagRead
      description: |+
        Retrieve all security tags.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method updated. Added **isUniversal** query parameter to filter universal security tags.


        Parameters:

      parameters:
      - name: isUniversal
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > securitytags
      summary: securityTagCreate
      description: |+
        Create a new security tag.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method updated. **isUniversal** parameter can be set to create a universal security tag.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityTag>
                  <objectTypeName>SecurityTag</objectTypeName>
                  <type>
                    <typeName>SecurityTag</typeName>
                  </type>
                  <name>TAG_NAME</name>
                  <isUniversal>true</isUniversal>
                  <description>description of the tag</description>
                  <extendedAttributes></extendedAttributes>
                </securityTag>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}:
    delete:
      tags:
      - 2.0 > securitytags
      summary: securityTagDeleteDelete
      description: "Delete the specified security tag.\n\nParameters:\n\ntagId: Specified\
        \ security tag.\n\n"
      parameters:
      - name: tagId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}/vm:
    get:
      tags:
      - 2.0 > securitytags
      summary: securityTagVMsListList
      description: |+
        Retrieve the list of VMs that have the specified tag attached to
        them.


        Parameters:

      parameters:
      - name: tagId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > securitytags
      summary: securityTagVMsAction
      description: |+
        Attach or detach a security tag to a virtual machine.

        This operation does not check that the virtual machine exists in
        the local inventory. This allows you to attach a universal
        security tag to a virtual machine that is connected to a secondary
        NSX Manager (and therefore is not connected to the primary NSX
        Manager where the call is sent).

        Possible keys for the tagParameter are:
        * instance_uuid
        * bios_uuid
        * vmname

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tagId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityTagAssignment>
                  <tagParameter>
                   <key>instance_uuid</key>
                   <value>123e4567-e89b-12d3-a456-426655440000</value>
                  </tagParameter>
                </securityTagAssignment>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}/vm/{vmId}:
    put:
      tags:
      - 2.0 > securitytags
      summary: securityTagVMAttach
      description: "Apply a security tag to the specified virtual machine.\n\n**Note:**\
        \ this method can attach a universal security tag to a\nvirtual machine. However,\
        \ this method checks that the VM exists\non the NSX Manager to which the API\
        \ call is sent. In a\ncross-vCenter active active environment, the VM might\
        \ exist on\na secondary NSX Manager, and so the call would fail. \n\nYou can\
        \ instead use the `POST\n/api/2.0/services/securitytags/tag/{tagId}/vm?action=attach`\n\
        method to attach universal security tags to a VM that is not\nlocal to the\
        \ primary NSX Manager. This method does not check\nthat the VM is local to\
        \ the NSX Manager.\n\n\nParameters:\n\nvmId: Specify VM using VM managed object\
        \ ID or VM instance\nUUID.\n\n\n"
      parameters:
      - name: tagId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > securitytags
      summary: securityTagVMDetach
      description: "Detach a security tag from the specified virtual machine.\n\n\n\
        Parameters:\n\nvmId: Specify VM using VM managed object ID or VM instance\n\
        UUID.\n\n\n"
      parameters:
      - name: tagId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/tag/{tagId}/vmDetail:
    get:
      tags:
      - 2.0 > securitytags
      summary: securityTagVMDetailList
      description: |+
        Retrieve details about the VMs that are attached to the
        specified security tag.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      parameters:
      - name: tagId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/vm/{vmId}:
    get:
      tags:
      - 2.0 > securitytags
      summary: securitytagVmIdList
      description: "Retrieve all security tags associated with the specified virtual\n\
        machine.\n\n\nParameters:\n\nvmId: Specify VM using VM managed object ID or\
        \ VM instance\nUUID.\n\n\n"
      parameters:
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > securitytags
      summary: securitytagVmMoidAction
      description: "Update security tags associated with the specified virtual machine.\n\
        \nYou can assign multiple tags at a time to the specified VM, or clear\nall\
        \ assigned tags from the specified VM.\n\n**Method history:**\n\nRelease |\
        \ Modification\n--------|-------------\n6.3.0 | Method introduced.\n\n\nParameters:\n\
        \nvmId: Specify VM using VM managed object ID or VM instance\nUUID.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: vmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<securityTags>\n  <securityTag>\n    <objectId>securitytag-12</objectId>\n\
                \  </securityTag>\n  <securityTag>\n    <objectId>securitytag-13</objectId>\n\
                \  </securityTag>\n  <securityTag>\n    <objectId>securitytag-14</objectId>\n\
                \  </securityTag>\n</securityTags>                  \n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/securitytags/selection-criteria:
    get:
      tags:
      - 2.0 > securitytags
      summary: securitytagsCriteriaRead
      description: |+
        Retrieve unique ID section criteria configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > securitytags
      summary: securitytagsCriteriaUpdate
      description: "Configure the unique ID section criteria configuration.\n\nIf\
        \ you set the selection criteria and assign security tags to VMs, you\nmust\
        \ remove all security tags from VMs before you can change the\nselection criteria.\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.3.0 | Method introduced.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <securityTagAssignmentMetadata>
                  <metadata>instance_uuid</metadata>
                </securityTagAssignmentMetadata>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/host/{hostID}/agents:
    get:
      tags:
      - 2.0 > si
      summary: hostAgentsRead
      description: "Retrieves all agents on the specified host. The response body\
        \ contains\nagent IDs for each agent, which you can use to retrieve details\
        \ about\nthat agent.\n\n\nParameters:\n\nhostID: Specified host\n\n"
      parameters:
      - name: hostID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/agent/{agentID}:
    get:
      tags:
      - 2.0 > si
      summary: agentInformationRead
      description: "Retrieve agent (host components and appliances) details.\n\n\n\
        Parameters:\n\nagentID: Specified agent\n\n"
      parameters:
      - name: agentID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/deployment/{deploymentunitID}/agents:
    get:
      tags:
      - 2.0 > si
      summary: deploymentAgentsRead
      description: "Retrieve all agents for the specified deployment.\n\nParameters:\n\
        \ndeploymentunitID: Specified deployment.\n\n"
      parameters:
      - name: deploymentunitID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/si/fabric/sync/conflicts:
    get:
      tags:
      - 2.0 > si
      summary: agentConflictsRead
      description: "Retrieve conflicting deployment units and EAM agencies, if any,\
        \ and the\nallowed operations on them.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > si
      summary: agentConflictsUpdate
      description: "Create deployment units for conflicting EAM Agencies, delete\n\
        conflicting EAM agencies, or delete deployment units for conflicting\nEAM\
        \ agencies.\n\n### Create deployment units for conflicting EAM agencies\n\n\
        ```\n<conflictResolverInfo>\n  <agencyAction>RESTORE</agencyAction>\n</conflictResolverInfo>\n\
        ```\n\n### Delete conflicting EAM agencies\n\n```\n<conflictResolverInfo>\n\
        \  <agencyAction>DELETE</agencyAction>\n</conflictResolverInfo>\n```\n\n###\
        \ Delete deployment units for conflicting EAM agencies\n\n```\n<conflictResolverInfo>\n\
        \  <deploymentUnitAction>DELETE</deploymentUnitAction>\n</conflictResolverInfo>\n\
        ```\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <conflictResolverInfo>
                  <agencyAction></agencyAction>
                </conflictResolverInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/status:
    get:
      tags:
      - 2.0 > snmp
      summary: snmpStatusRead
      description: |+
        Retrieve SNMP status settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > snmp
      summary: snmpStatusUpdate
      description: |+
        Update SNMP status settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <snmpServiceStatus>
                  <serviceStatus>true</serviceStatus>
                  <groupedNotification>true</groupedNotification>
                </snmpServiceStatus>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/manager:
    get:
      tags:
      - 2.0 > snmp
      summary: snmpManagersList
      description: |+
        Retrieve information about SNMP managers.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > snmp
      summary: snmpManagerCreate
      description: |+
        Add an SNMP manager.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <snmpManager>
                  <ip>10.10.10.10</ip>
                  <port>162</port>
                  <communityString>NSXManager</communityString>
                  <enabled>true</enabled>
                </snmpManager>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/manager/{managerId}:
    get:
      tags:
      - 2.0 > snmp
      summary: snmpManagerRead
      description: "Retrieve information about the specified SNMP manager.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ introduced.\n\n\nParameters:\n\nmanagerId: ID of the SNMP manager.\n\n"
      parameters:
      - name: managerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > snmp
      summary: snmpManagerUpdate
      description: "Update an SNMP manager configuration.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\
        \n\nParameters:\n\nmanagerId: ID of the SNMP manager.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: managerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <snmpManager>
                  <managerId>1330</managerId>
                  <ip>10.10.10.10</ip>
                  <port>162</port>
                  <communityString>NSXManager</communityString>
                  <enabled>false</enabled>
                </snmpManager>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > snmp
      summary: snmpManagerDelete
      description: "Delete an SNMP manager configuration.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\
        \n\nParameters:\n\nmanagerId: ID of the SNMP manager.\n\n"
      parameters:
      - name: managerId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/trap:
    get:
      tags:
      - 2.0 > snmp
      summary: snmpTrapsList
      description: |+
        Retrieve information about SNMP traps.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/snmp/trap/{oid}:
    get:
      tags:
      - 2.0 > snmp
      summary: snmpTrapRead
      description: "Retrieve information about the specified SNMP trap.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ introduced.\n\n\nParameters:\n\noid: SNMP object identifier.\n\n"
      parameters:
      - name: oid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > snmp
      summary: snmpTrapUpdate
      description: "Update the specified SNMP trap.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method introduced.\n\n\n\
        Parameters:\n\noid: SNMP object identifier.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: oid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trapConfig>
                  <oid>1.3.6.1.4.1.6876.90.1.2.3.0.1</oid>
                  <enabled>false</enabled>
                </trapConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes:
    get:
      tags:
      - 2.0 > scopes
      summary: vdnScopesList
      description: |+
        Retrieve information about all transport zones (also known as network
        scopes).


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > scopes
      summary: vdnScopeCreate
      description: |+
        Create a transport zone.

        Request body parameters:

          * **name** - Required. The name of the transport zone.
          * **description** - Optional. Description of the transport zone.
          * **objectId** - Required. The cluster object ID from vSphere. One or more are
            required.
          * **controlPlaneMode** - Optional. The control plane mode. It can be
            one of the following:
              * *UNICAST_MODE*
              * *HYBRID_MODE*
              * *MULTICAST_MODE*


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: isUniversal
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdnScope>
                  <name>Local-Transport-Zone-B</name>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c7</objectId>
                      </cluster>
                    </cluster>
                  </clusters>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}:
    get:
      tags:
      - 2.0 > scopes
      summary: vdnScopeProperties
      description: "Retrieve information about the specified transport zone.\n\n\n\
        Parameters:\n\nscopeId: A valid transport zone ID (vdnScope objectId)\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > scopes
      summary: vdnScopeChange
      description: "Update the specified transport zone.\n\nYou can add a cluster\
        \ to or delete a cluster from a transport zone.\n\nYou can also repair missing\
        \ portgroups. For every logical switch\ncreated, NSX creates a corresponding\
        \ portgroup in vCenter. If the\nportgroup is lost for any reason, the logical\
        \ switch will stop\nfunctioning. The repair action recreates any missing portgroups.\n\
        \n\nParameters:\n\nscopeId: A valid transport zone ID (vdnScope objectId)\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdnScope>
                 <objectId>universalvdnscope</objectId>
                  <clusters>
                   <cluster>
                    <cluster>
                     <objectId>domain-c7</objectId>
                     </cluster>
                   </cluster>
                  </clusters>
                </vdnScope>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > scopes
      summary: vdnScopeDelete
      description: "Delete the specified transport zone.\n\n\nParameters:\n\nscopeId:\
        \ A valid transport zone ID (vdnScope objectId)\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}/attributes:
    put:
      tags:
      - 2.0 > scopes
      summary: vdnScopeAttribUpdateUpdate
      description: "Update the attributes of a transport zone.\n\nFor example, you\
        \ can update the name, description, or control plane\nmode. You must include\
        \ the cluster object IDs for the transport zone\nin the request body.\n\n\n\
        Parameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdnScope>
                  <objectId>vdnscope-1</objectId>
                  <name>Local-Transport-Zone Site-B</name>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c7</objectId>
                      </cluster>
                    </cluster>
                  </clusters>
                </vdnScope>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}/conn-check/multicast:
    post:
      tags:
      - 2.0 > scopes
      summary: vdnScopeConnCheckExecute
      description: "Test multicast group connectivity.\n\nTest multicast group connectivity\
        \ between two hosts connected to the\nspecified transport zone.\n\nParameter\
        \ **packetSizeMode** has one of the following values:\n* *0* - VXLAN standard\
        \ packet size\n* *1* - minimum packet size\n* *2* - customized packet size.\n\
        If you set **packetSizeMode** to *2*, you must specify the size using\nthe\
        \ **packetSize** parameter.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <testParameters>
                  <gateway>172.23.233.1</gateway>
                  <packetSizeMode>0</packetSizeMode>
                  <packetSize>1600</packetSize>
                  <sourceHost>
                    <hostId>host-9</hostId>
                    <switchId>dvs-22</switchId>
                    <vlanId>54</vlanId>
                  </sourceHost>
                  <destinationHost>
                    <hostId>host-92</hostId>
                    <switchId>dvs-22</switchId>
                    <vlanId>54</vlanId>
                  </destinationHost>
                </testParameters>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ssoconfig:
    get:
      tags:
      - 2.0 > ssoconfig
      summary: ssoConfigRead
      description: |+
        Retrieve SSO Configuration.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > ssoconfig
      summary: ssoConfigSet
      description: |+
        Register NSX Manager to SSO Services.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ssoConfig>
                  <ssoLookupServiceUrl></ssoLookupServiceUrl>
                  <ssoAdminUsername></ssoAdminUsername>
                  <ssoAdminUserpassword></ssoAdminUserpassword>
                  <certificateThumbprint></certificateThumbprint>
                </ssoConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > ssoconfig
      summary: ssoConfigDelete
      description: |+
        Deletes the NSX Manager SSO Configuration.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/ssoconfig/status:
    get:
      tags:
      - 2.0 > ssoconfig
      summary: ssoStatusRead
      description: |+
        Retrieve the SSO configuration status of NSX Manager.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/switches:
    get:
      tags:
      - 2.0 > switches
      summary: vdsList
      description: |+
        Retrieve information about all vSphere Distributed Switches.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > switches
      summary: vdsPrepare
      description: "Prepare a vSphere Distributed Switch.\n\nThe MTU is the maximum\
        \ amount of data that can be transmitted in one\npacket before it is divided\
        \ into smaller packets. VXLAN frames are slightly\nlarger in size because\
        \ of the traffic encapsulation, so the MTU required\nis higher than the standard\
        \ MTU. You must set the MTU for each switch to\n1602 or higher.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vdsContext>
                  <switch>
                    <objectId>dvs-26</objectId>
                    <type>
                      <typeName>DistributedVirtualSwitch</typeName>
                    </type>
                    <name></name>
                    <revision>0</revision>
                    <objectTypeName>DistributedVirtualSwitch</objectTypeName>
                  </switch>
                  <teaming>ETHER_CHANNEL</teaming>
                  <mtu>mtu-value</mtu>
                </vdsContext>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/switches/datacenter/{datacenterID}:
    get:
      tags:
      - 2.0 > switches
      summary: vdsListInDc
      description: "Retrieve information about all vSphere Distributed Switches in\
        \ the specified datacenter.\n\n\nParameters:\n\ndatacenterID: A valid datacenter\
        \ ID (e.g. datacenter-21)\n\n\n"
      parameters:
      - name: datacenterID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/switches/{vdsId}:
    get:
      tags:
      - 2.0 > switches
      summary: vdsShow
      description: "Retrieve information about the specified vSphere Distributed Switch.\n\
        \n\nParameters:\n\nvdsId: A valid vSphere Distributed Switch ID (e.g. dvs-35)\n\
        \n\n"
      parameters:
      - name: vdsId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > switches
      summary: vdsDelete
      description: "Delete the specified vSphere Distributed Switch.\n\n\nParameters:\n\
        \nvdsId: A valid vSphere Distributed Switch ID (e.g. dvs-35)\n\n\n"
      parameters:
      - name: vdsId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/systemalarms/{alarmId}:
    get:
      tags:
      - 2.0 > systemalarms
      summary: servicesSystemAlarmsIdRead
      description: "Retrieve information about the specified alarm.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.3.0 | Method introduced.\n\
        \n\nParameters:\n\nalarmId: The alarm ID you want to manage. Find the alarm\
        \ ID using the\n`GET /api/2.0/services/alarms/{source-Id}` method.\n\n\n"
      parameters:
      - name: alarmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > systemalarms
      summary: servicesSystemAlarmsIdAction
      description: "Resolve the specified alarm.\n\nAlarms will resolve automatically\
        \ when the cause of the alarm is\nresolved.  For example, if an NSX Edge appliance\
        \ is powered off, this\nwill trigger an alarm. If you power the NSX Edge appliance\
        \ back on, the\nalarm will resolve. If however, you delete the NSX Edge appliance,\
        \ the\nalarm will persist, because the alarm cause was never resolved. In\
        \ this\ncase, you may want to manually resolve the alarm. Resolving the alarm\
        \ \nwill clear it from the NSX dashboard.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.3.0 | Method introduced.\n\n\n\
        Parameters:\n\nalarmId: The alarm ID you want to manage. Find the alarm ID\
        \ using the\n`GET /api/2.0/services/alarms/{source-Id}` method.\n\n\n"
      parameters:
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: alarmId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/systemevent:
    get:
      tags:
      - 2.0 > systemevent
      summary: systemEventsRead
      description: |+
        Get NSX Manager system events

        Parameters:

      parameters:
      - name: startIndex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/api/2.0/vdn/traceflow:
    post:
      tags:
      - 2.0 > traceflow
      summary: traceflowCreate
      description: |+
        Create a traceflow.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <traceflowRequest>
                  <vnicId>74eb1145-d40b-4061-8e64-1caddf2dbf81.001</vnicId>
                  <timeout>10000</timeout>
                  <routed>true</routed>
                  <packet class="fieldsPacketData">
                    <resourceType>FieldsPacketData</resourceType>
                    <ethHeader>
                      <srcMac>00:50:56:83:7e:87</srcMac>
                      <dstMac>00:50:56:83:fa:6c</dstMac>
                      <ethType>2048</ethType>
                    </ethHeader>
                    <ipHeader>
                      <ttl>64</ttl>
                      <srcIp>172.32.1.5</srcIp>
                      <dstIp>172.34.1.5</dstIp>
                    </ipHeader>
                  </packet>
                </traceflowRequest>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/api/2.0/vdn/traceflow/{traceflowId}:
    get:
      tags:
      - 2.0 > traceflow
      summary: traceflowRead
      description: "Query a specific traceflow by *tracflowId* which is the value\
        \ returned\nafter executing the create Traceflow API call.\n\n\nParameters:\n\
        \ntraceflowId: Traceflow ID.\n\n"
      parameters:
      - name: traceflowId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/api/2.0/vdn/traceflow/{traceflowId}/observations:
    get:
      tags:
      - 2.0 > traceflow
      summary: traceflowObservationsList
      description: |+
        Retrieve traceflow observations.

        Parameters:

      parameters:
      - name: traceflowId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate:
    post:
      tags:
      - 2.0 > truststore
      summary: certificateCreate
      description: |+
        Import a certificate or a certificate chain against a certificate
        signing request.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: csrId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trustObject>
                  <pemEncoding></pemEncoding>
                </trustObject>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate/scope/{scopeId}:
    get:
      tags:
      - 2.0 > truststore
      summary: certificateScopeRead
      description: "Retrieve all certificates on the specified scope.\n\nParameters:\n\
        \nscopeId: Scope ID. Specify the ID of an NSX Edge, e.g. *edge-5*, or\n*globalroot-0*.\n\
        \n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate/{scopeId}:
    post:
      tags:
      - 2.0 > truststore
      summary: certificateSelfSignedCreate
      description: "Create a single certificate\n\nYou can create a certificate for\
        \ a specific NSX Edge, or if you\nspecify a scope of *globalroot-0* you can\
        \ create a global certificate\nin NSX Manager which is available to all NSX\
        \ Edges.\n\n\nParameters:\n\nscopeId: Scope ID. Specify the ID of an NSX Edge,\
        \ e.g. *edge-5*, or\n*globalroot-0*.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trustObject>
                  <pemEncoding></pemEncoding>
                  <privateKey></privateKey>
                  <passphrase></passphrase>
                </trustObject>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/certificate/{certificateId}:
    get:
      tags:
      - 2.0 > truststore
      summary: certificateIdRead
      description: "Retrieve the certificate object specified by ID. If the ID specifies\n\
        a chain, multiple certificate objects are retrieved.\n\n\nParameters:\n\n\
        certificateId: Certificate ID\n\n"
      parameters:
      - name: certificateId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > truststore
      summary: certificateIdDelete
      description: "Delete the specified certificate.\n\nParameters:\n\ncertificateId:\
        \ Certificate ID\n\n"
      parameters:
      - name: certificateId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/csr/{scopeId}:
    post:
      tags:
      - 2.0 > truststore
      summary: csrCreate
      description: "Create a certificate signing request (CSR).\n\nParameters:\n\n\
        scopeId: Specified scope ID\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <csr>
                  <subject>
                    <attribute>
                      <key>CN</key>
                      <value>VSM</value>
                    </attribute>
                    <attribute>
                      <key>O</key>
                      <value>VMware</value>
                    </attribute>
                    <attribute>
                      <key>OU</key>
                      <value>IN</value>
                    </attribute>
                    <attribute>
                      <key>C</key>
                      <value>IN</value>
                    </attribute>
                  </subject>
                  <algorithm>RSA</algorithm>
                  <keySize>1024</keySize>
                </csr>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/csr/{csrId}:
    get:
      tags:
      - 2.0 > truststore
      summary: csrSelfSignedRead
      description: "Retrieve the specified certificate signing request (CSR).\n\n\n\
        Parameters:\n\ncsrId: CSR ID\n\n"
      parameters:
      - name: csrId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > truststore
      summary: csrSelfSignedUpdate
      description: "Create a self-signed certificate for CSR.\n\n\nParameters:\n\n\
        csrId: CSR ID\n\n"
      parameters:
      - name: noOfDays
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: csrId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/csr/scope/{scopeId}:
    get:
      tags:
      - 2.0 > truststore
      summary: csrScopeRead
      description: "Retrieve certificate signing requests (CSR) on the specified scope.\n\
        \nParameters:\n\nscopeId: Specified scope.\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/crl/{scopeId}:
    post:
      tags:
      - 2.0 > truststore
      summary: crlCreate
      description: "Create a certificate revocation list (CRL) on the specified scope.\n\
        \n\nParameters:\n\nscopeId: Specified scope.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <trustObject>
                  <pemEncoding></pemEncoding>
                </trustObject>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/crl/scope/{scopeId}:
    get:
      tags:
      - 2.0 > truststore
      summary: crlScopeRead
      description: "Retrieve all certificates for the specified scope.\n\nParameters:\n\
        \nscopeId: Specified scope\n\n"
      parameters:
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/truststore/crl/{crlId}:
    get:
      tags:
      - 2.0 > truststore
      summary: crlIDRead
      description: "Retrieve certificate object for the specified certificate revocation\n\
        list (CRL).\n\n\nParameters:\n\ncrlId: CRL ID\n\n"
      parameters:
      - name: crlId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > truststore
      summary: crlIDDelete
      description: "Delete the specified certificate revocation list (CRL).\n\nParameters:\n\
        \ncrlId: CRL ID\n\n"
      parameters:
      - name: crlId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/configuration/role:
    get:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationRoleRead
      description: |+
        Retrieve the universal sync configuration role.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationRoleSet
      description: |+
        Set the universal sync configuration role.

        Parameters:

      parameters:
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/configuration/nsxmanagers:
    get:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationNsxManagersList
      description: "If run on a primary NSX Manager, it will list secondary NSX Managers\n\
        configured on the primary NSX Manager.\n\nIf run on a secondary NSX Manager,\
        \ it will list information about\nthe secondary NSX Manager and the primary\
        \ NSX Manager it is\nassociated with.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationNsxManagersCreate
      description: "Add a secondary NSX manager.\n\nRun this method on the primary\
        \ NSX Manager, providing details of the\nsecondary NSX Manager.\n\nRetrieve\
        \ the certificate thumbprint of the secondary NSX Manager\nusing the `GET\n\
        /api/1.0/appliance-management/certificatemanager/certificates/nsx`\nmethod.\
        \ The **sha1Hash** parameter contains the thumbprint.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nsxManagerInfo>
                  <nsxManagerIp></nsxManagerIp>
                  <nsxManagerUsername></nsxManagerUsername>
                  <nsxManagerPassword></nsxManagerPassword>
                  <certificateThumbprint></certificateThumbprint>
                  <isPrimary></isPrimary>
                </nsxManagerInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationNsxManagersDelete
      description: |+
        Delete secondary NSX manager configuration.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/configuration/nsxmanagers/{nsxManagerID}:
    get:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationManagersRead
      description: "Retrieve information about the specified secondary NSX Manager.\n\
        \n\nParameters:\n\nnsxManagerID: NSX Manager UUID.\n\n"
      parameters:
      - name: nsxManagerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationManagersUpdate
      description: "Update the the specified secondary NSX manager IP or thumbprint\
        \ in\nthe universal sync configuration.\n\n\nParameters:\n\nnsxManagerID:\
        \ NSX Manager UUID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: nsxManagerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <nsxManagerInfo>
                  <uuid></uuid>
                  <nsxManagerIp></nsxManagerIp>
                  <certificateThumbprint></certificateThumbprint>
                </nsxManagerInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > universalsync
      summary: universalSyncConfigurationManagersDelete
      description: "Delete the specified secondary NSX Manager.\n\nParameters:\n\n\
        nsxManagerID: NSX Manager UUID.\n\n"
      parameters:
      - name: forceRemoval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nsxManagerID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/sync:
    post:
      tags:
      - 2.0 > universalsync
      summary: universalSyncSyncAction
      description: |+
        Sync all objects on the NSX Manager.

        Parameters:

      parameters:
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/entitystatus:
    get:
      tags:
      - 2.0 > universalsync
      summary: universalSyncEntityStatusRead
      description: |+
        Retrieve the status of a universal sync entity.

        Parameters:

      parameters:
      - name: objectType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: objectId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/universalsync/status:
    get:
      tags:
      - 2.0 > universalsync
      summary: universalSyncStatusRead
      description: |+
        Retrieve the universal sync status.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/user/{userId}:
    get:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtUserRead
      description: "Get information about a user.\n\nParameters:\n\nuserId: user ID\n\
        \n"
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtUserDelete
      description: "Remove the NSX role for a vCenter user.\n\nParameters:\n\nuserId:\
        \ user ID\n\n"
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/role/{userId}:
    get:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtRoleRead
      description: "Retrieve a user's role (possible roles are super_user, vshield_admin,\n\
        enterprise_admin, security_admin, and audit).\n\n\nParameters:\n\nuserId:\
        \ User to retrieve role information from.\n\n"
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtRoleUpdate
      description: "Change a user's role.\n\nParameters:\n\nuserId: User to retrieve\
        \ role information from.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <accessControlEntry>
                  <role></role>
                  <resource>
                    <resourceId></resourceId>
                  </resource>
                </accessControlEntry>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtRoleCreate
      description: "Add role and resources for a user.\n\nParameters:\n\nuserId: User\
        \ to retrieve role information from.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: isGroup
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <accessControlEntry>
                  <role></role>
                  <resource>
                    <resourceId></resourceId>
                  </resource>
                </accessControlEntry>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtRoleDelete
      description: "Delete the role assignment for specified vCenter user. Once this\
        \ role\nis deleted, the user is removed from NSX Manager. You cannot delete\
        \ the\nrole for a local user.\n\n\nParameters:\n\nuserId: User to retrieve\
        \ role information from.\n\n"
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/enablestate/{value}:
    put:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtStateUpdate
      description: "Enable or disable a user account.\n\nParameters:\n\nvalue: value\
        \ can be 0 to disable, or 1 to enable.\n\n"
      parameters:
      - name: value
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/users/vsm:
    get:
      tags:
      - 2.0 > usermgmt
      summary: userNSXManagerInfoRead
      description: |+
        Get information about users who have been assigned a NSX Manager role
        (local users as well as vCenter users with NSX Manager role).


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/roles:
    get:
      tags:
      - 2.0 > usermgmt
      summary: userMgmtRolesRead
      description: |+
        Read all possible roles in NSX Manager

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/usermgmt/scopingobjects:
    get:
      tags:
      - 2.0 > usermgmt
      summary: userScopingObjectsRead
      description: |+
        Retrieve a list of objects that can be used to define a user's access
        scope.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/vcconfig:
    get:
      tags:
      - 2.0 > vcconfig
      summary: vCenterConfigRead
      description: |+
        Get vCenter Server configuration details on NSX Manager.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > vcconfig
      summary: vCenterConfigUpdate
      description: |+
        Synchronize NSX Manager with vCenter server.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vcInfo>
                  <ipAddress>vc-l-01a.corp.local</ipAddress>
                  <userName>administrator@vsphere.local</userName>
                  <password>VMware123</password>
                  <certificateThumbprint>D2:75:61:24:52:CA:B2:8D:D3:25:3F:78:11:2A:8F:94:5A:30:57:0D</certificateThumbprint>
                  <assignRoleToUser>true</assignRoleToUser>
                  <pluginDownloadServer></pluginDownloadServer>
                  <pluginDownloadPort></pluginDownloadPort>
                </vcInfo>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/services/vcconfig/status:
    get:
      tags:
      - 2.0 > vcconfig
      summary: vCenterStatusRead
      description: |+
        Get default vCenter Server connection status.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires:
    get:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchesRead
      description: |+
        Retrieve information about all logical switches in all transport zones.


        Parameters:

      parameters:
      - name: startindex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pagesize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/vm/vnic:
    post:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchVmAttachCreate
      description: "Attach a VM vNIC to, or detach a VM vNIC from a logical switch.\n\
        \nSpecify the logical switch ID in the **portgroupId** parameter. To\ndetach\
        \ a VM vNIC from a logical switch, leave the **portgroupId** parameter\nempty.\n\
        \nTo find the ID of a VM vNIC, do the following:\n1. In the vSphere MOB, navigate\
        \ to the VM you want to connect or disconnect.\n2. Click **config** and take\
        \ note of the **instanceUuid**.\n3. Click **hardware** and take note of the\
        \ last three digits of the\nappropriate network interface device.\n\nUse these\
        \ two values to form the VM vNIC ID.  For example, if the\n**instanceUuid**\
        \ is *502e71fa-1a00-759b-e40f-ce778e915f16* and the\nappropriate **device**\
        \ value is *device[4000]*, the **objectId** and\n**vnicUuid** are both *502e71fa-1a00-759b-e40f-ce778e915f16.000*.\n\
        \n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <com.vmware.vshield.vsm.inventory.dto.VnicDto>
                  <objectId>502e71fa-1a00-759b-e40f-ce778e915f16.000</objectId>
                  <vnicUuid>502e71fa-1a00-759b-e40f-ce778e915f16.000</vnicUuid>
                  <portgroupId>virtualwire-2</portgroupId>
                </com.vmware.vshield.vsm.inventory.dto.VnicDto>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}:
    get:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchShow
      description: "Retrieve information about the specified logical switch.\n\nIf\
        \ the switch is a universal logical switch the **isUniversal**\nparameter\
        \ is set to true in the response body.\n\n\nParameters:\n\nvirtualWireID:\
        \ A logical switch id, e.g. virtualwire-1002\n\n"
      parameters:
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchUpdate
      description: "Update the specified logical switch.\n\nFor example, you can update\
        \ the name, description, or control plane\nmode.\n\n\nParameters:\n\nvirtualWireID:\
        \ A logical switch id, e.g. virtualwire-1002\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <virtualWire>
                  <name>ULS-Web-Tier-02 </name>
                  <description>Universal Web Logical Switch</description>
                  <tenantId>virtual wire tenant</tenantId>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </virtualWire>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchDelete
      description: "Delete the specified logical switch.\n\nParameters:\n\nvirtualWireID:\
        \ A logical switch id, e.g. virtualwire-1002\n\n"
      parameters:
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/backing:
    post:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchPortGroupFixAction
      description: "For every logical switch created, NSX creates a corresponding\
        \ port\ngroup in vCenter. If the port group is missing, the logical switch\n\
        will stop functioning.\n\nIf the port group backing a logical switch is deleted,\
        \ you can\nrecreate a new backing port group for the logical switch.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ introduced.\n\n\nParameters:\n\n"
      parameters:
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/conn-check/multicast:
    post:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchConnCheckExecute
      description: "Test multicast group connectivity.\n\nTest multicast group connectivity\
        \ between two hosts connected to the\nspecified logical switch.\n\nParameter\
        \ **packetSizeMode** has one of the following values:\n* *0* - VXLAN standard\
        \ packet size\n* *1* - minimum packet size\n* *2* - customized packet size.\n\
        If you set **packetSizeMode** to *2*, you must specify the size using\nthe\
        \ **packetSize** parameter.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <testParameters>
                  <gateway></gateway>
                  <packetSizeMode></packetSizeMode>
                  <packetSize></packetSize>
                  <sourceHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </sourceHost>
                  <destinationHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </destinationHost>
                </testParameters>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/conn-check/p2p:
    post:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchPingExecute
      description: "Test point-to-point connectivity.\n\nTest point-to-point connectivity\
        \ between two hosts connected to the\nspecified logical switch.\n\nParameter\
        \ **packetSizeMode** has one of the following values:\n* *0* - VXLAN standard\
        \ packet size\n* *1* - minimum packet size\n* *2* - customized packet size.\n\
        If you set **packetSizeMode** to *2*, you must specify the size using\nthe\
        \ **packetSize** parameter.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <testParameters>
                  <gateway></gateway>
                  <packetSizeMode></packetSizeMode>
                  <packetSize></packetSize>
                  <sourceHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </sourceHost>
                  <destinationHost>
                    <hostId></hostId>
                    <switchId></switchId>
                    <vlanId></vlanId>
                  </destinationHost>
                </testParameters>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/hardwaregateways:
    get:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchHardwareGatewayBindingsList
      description: |+
        Retrieve hardware gateway bindings for the specified logical switch.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/virtualwires/{virtualWireID}/hardwaregateways/{hardwareGatewayBindingId}:
    post:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchHardwareGatewayBindingCreate
      description: "Manage the connection between a hardware gateway and a logical\
        \ switch.\n\n### Attach a hardware gateway to a logical switch and create\
        \ a new binding with the information provided\n\n`POST /api/2.0/vdn/virtualwires/{virtualwireid}/hardwaregateways`\n\
        \n```\n<hardwareGatewayBinding>\n  <hardwareGatewayId>hardwarewgateway1</hardwareGatewayId>\n\
        \  <vlan>v1</vlan>\n  <switchName>s1</switchName>\n  <portName>s1</portName>\n\
        </hardwareGatewayBinding> \n```\n\n### Attach a hardware gateway to a logical\
        \ switch, specifying an existing binding by ID\n\n`POST /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/{bindingId}?action=attach`\n\
        \n```\n<virtualWire>\n  ...\n  <hardwareGatewayBindings>\n    <hardwareGatewayBinding>\n\
        \      <id>binding id</id>\n    </hardwareGatewayBinding>\n  </hardwareGatewayBindings>\n\
        </virtualWire>\n```\n\n### Detach a hardware gateway from a logical switch\n\
        \n`POST /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/{bindingId}?action=detach`\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.2.3 | Method introduced.\n\n\nParameters:\n\nhardwareGatewayBindingId: Hardware\
        \ Gateway Binding ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: virtualWireID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: hardwareGatewayBindingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<hardwareGatewayBinding>\n  <hardwareGatewayId>hardwarewgateway1</hardwareGatewayId>\n\
                \  <vlan>v1</vlan>\n  <switchName>s1</switchName>\n  <portName>s1</portName>\n\
                </hardwareGatewayBinding> \n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.0/vdn/scopes/{scopeId}/virtualwires:
    get:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchList
      description: "Retrieve information about all logical switches in the specified\n\
        transport zone (network scope).\n\n\nParameters:\n\nscopeId: A valid transport\
        \ zone ID (vdnScope objectId).\n\n\n"
      parameters:
      - name: startindex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pagesize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 2.0 > virtualwires
      summary: logicalSwitchCreate
      description: "Create a logical switch.\n\nTo create a universal logical switch\
        \ use *universalvdnscope* as the\nscopeId in the URI and send the request\
        \ to the primary NSX Manager.\nRequest body parameters:\n  * **name** - Optional.\
        \ The name of the logical switch.\n  * **description** - Optional. Description\
        \ of the logical switch.\n  * **tenantId** - Required.\n  * **controlPlaneMode**\
        \ - Optional. The control plane mode. If not\n    specified, the **controlPlaneMode**\
        \ of the transport zone is used. It\n    can be one of the following:\n  \
        \    * *UNICAST_MODE*\n      * *HYBRID_MODE*\n      * *MULTICAST_MODE*\n \
        \ * **guestVlanAllowed** - Optional. Default is *false*.\n\n\nParameters:\n\
        \nscopeId: A valid transport zone ID (vdnScope objectId).\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: scopeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <virtualWireCreateSpec>
                  <name>Web-Tier-01</name>
                  <description>Web tier network</description>
                  <tenantId>virtual wire tenant</tenantId>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                  <guestVlanAllowed>false</guestVlanAllowed>
                </virtualWireCreateSpec>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/excludelist:
    get:
      tags:
      - 2.1 > excludelist
      summary: dfwExclusionRead
      description: |+
        Retrieve the set of VMs in the exclusion list.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/excludelist/{memberID}:
    put:
      tags:
      - 2.1 > excludelist
      summary: dfwExclusionUpdate
      description: "Add a vm to the exclusion list.\n\nParameters:\n\nmemberID: vc-moref-id\
        \ of a virtual machine.\n\n"
      parameters:
      - name: memberID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 2.1 > excludelist
      summary: dfwExclusionDelete
      description: "Delete a vm from exclusion list.\n\nParameters:\n\nmemberID: vc-moref-id\
        \ of a virtual machine.\n\n"
      parameters:
      - name: memberID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/flowstats:
    get:
      tags:
      - 2.1 > flow
      summary: flowStatsRead
      description: "Retrieve flow statistics for a datacenter, port group, VM, or\
        \ vNIC.\n\nResponse values for flow statistics:\n* **blocked** - indicates\
        \ whether traffic is blocked:\n  * 0 - flow allowed\n  * 1 - flow blocked\n\
        \  * 2 - flow blocked by SpoofGuard\n* **protocol** - protocol in flow:\n\
        \  * 0 - TCP\n  * 1 - UDP\n  * 2 - ICMP\n* **direction** - direction of flow:\n\
        \  * 0 - to virtual machine\n  * 1 - from virtual machine\n* **controlDirection**\
        \ - control direction for dynamic TCP traffic:\n  * 0 - source -> destination\n\
        \  * 1 - destination -> source\n\n\nParameters:\n\n"
      parameters:
      - name: contextId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: flowType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endTime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startIndex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/flowstats/info:
    get:
      tags:
      - 2.1 > flow
      summary: flowStatsInfoRead
      description: |+
        Retrieve flow statistics meta-data.

        This method retrieves the following information for each flow type:
        * minimum start time
        * maximum end time
        * total flow count


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/config:
    get:
      tags:
      - 2.1 > flow
      summary: flowConfigRead
      description: |+
        Retrieve flow monitoring configuration.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 2.1 > flow
      summary: flowsConfigCreate
      description: |+
        Update flow monitoring configuration.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<FlowConfiguration>\n  <collectFlows>true</collectFlows>\n\
                \  <ignoreBlockedFlows>false</ignoreBlockedFlows>\n  <ignoreLayer2Flows>false</ignoreLayer2Flows>\n\
                \  <sourceIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</sourceIPs>\n\
                \  <sourceContainer>\n    <name>vm1 - Network adapter 1</name>\n \
                \   <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>\n    <type>Vnic</type>\n\
                \  </sourceContainer>\n  <sourceContainer>\n    <name>Large XP-1</name>\n\
                \    <id>vm-126</id>\n    <type>VirtualMachine</type>\n  </sourceContainer>\n\
                \  <destinationIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</destinationIPs>\n\
                \  <destinationContainer>\n    <name>vm2 - Network adapter 2</name>\n\
                \    <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>\n    <type>Vnic</type>\n\
                \  </destinationContainer>\n  <destinationContainer>\n    <name>Small\
                \ XP-2</name>\n    <id>vm-226</id>\n    <type>VirtualMachine</type>\n\
                \  </destinationContainer>\n  <destinationPorts>22, 40-50, 60</destinationPorts>\n\
                \  <service>\n    <name>VMware-VDM2.x-Ephemeral</name>\n    <id>application-161</id>\n\
                \  </service>\n</FlowConfiguration>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/2.1/app/flow/{contextId}:
    delete:
      tags:
      - 2.1 > flow
      summary: flowContextDelete
      description: "Delete flow records for the specified context.\n\nParameters:\n\
        \ncontextId: Context ID.\n\n"
      parameters:
      - name: contextId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/records:
    get:
      tags:
      - 3.0 > ai
      summary: userActivityRead
      description: "### View Outbound Activity\n\nYou can view what applications are\
        \ being run by a security group or\ndesktop pool and then drill down into\
        \ the report to find out which\nclient applications are making outbound connections\
        \ by a particular\ngroup of users. You can also discover all user groups and\
        \ users who are\naccessing a particular application, which can help you determine\
        \ if you\nneed to adjust identity firewall in your environment.\n\n* query=*resource*\n\
        * param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *dest* (required)\n    * *app*\n  * &lt;param-type&gt; is one of:\n    *\
        \ for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*\n    * for\
        \ dest: *VIRTUAL_MACHINE*\n    * for app: *SRC_APP*\n  * &lt;comma-separated-values&gt;\
        \ is a comma-separated numbers (optional). If none specified then no filter\
        \ is applied.\n  * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default\
        \ is *INCLUDE*).\n\n**Example:** View user activities to VM ID 1 originating\
        \ from application\nID 1  \n`GET /api/3.0/ai/records?query=resource&interval=60m&param=src:DIRECTORY_GROUP`\
        \  \n`&param=dest:VIRTUAL_MACHINE:1&param=app:SRC_APP:1`\n\n### View Inbound\
        \ Activity\n\nYou can view all inbound activity to a server by desktop pool,\
        \ security\ngroup, or AD group.\n\n* query=*sam*\n* param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *dest* (required)\n    * *app*\n  * &lt;param-type&gt; is one of:\n    *\
        \ for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*\n    * for\
        \ dest: *VIRTUAL_MACHINE*\n    * for app: *DEST_APP*\n  * &lt;comma-separated-values&gt;\
        \ is a comma-separated numbers (optional). If none specified then no filter\
        \ is applied.\n  * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, *NOT*\
        \ (default is *INCLUDE*).\n\n**Example:** View user activities to VM ID 1\
        \ originating from\napplication ID 1  \n`GET /api/3.0/ai/records?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`\
        \  \n`&param=src:SECURITY_GROUP:1`\n\n### View Interaction between Inventory\
        \ Containers\nYou can view the traffic passing between defined containers\
        \ such as AD\ngroups, security groups and/or desktop pools. This can help\
        \ you identify\nand configure access to shared services and to resolve misconfigured\n\
        relationships between Inventory container definitions, desktop pools and\n\
        AD groups.\n\n* query=*containers*\n* param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *dest* (required)\n  * &lt;param-type&gt; is one of:\n    * for src: *SECURITY_GROUP*,\
        \ *DIRECTORY_GROUP*, *DESKTOP_POOL*\n    * for dest: *SECURITY_GROUP*, * *DESKTOP_POOL*\
        \ \n  * &lt;comma-separated-values&gt; is a comma-separated numbers (optional).\
        \ If none specified then no filter is applied.\n  * &lt;operator&gt; is one\
        \ of *INCLUDE*, *EXCLUDE*, or *NOT* (default * is *INCLUDE*).\n\n**Example:**\
        \ View interaction between inventory containers  \n`GET /api/3.0/ai/records?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`\
        \  \n`&param=src:SECURITY_GROUP:1`\n\n### View Outbound AD Group Activity\n\
        \nYou can view the traffic between members of defined Active Directory\ngroups\
        \ and can use this data to fine tune your firewall rules.\n\n* query=*adg*\n\
        * param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *adg*\n  * &lt;param-type&gt; is one of:\n    * for src: *SECURITY_GROUP*,\
        \ *DESKTOP_POOL*\n    * for adg: *USER*\n  * &lt;comma-separated-values&gt;\
        \ is a comma-separated numbers (optional). If none specified then no filter\
        \ is applied.\n  * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default\
        \ * is *INCLUDE*).\n\n**Example:** View outbound AD group activity    \n`GET\
        \ https://NSX-Manager-IP-Address/api/3.0/ai/records?query=adg&interval=24h&param=adg:USER:1:INCLUDE`\
        \  \n`&param=src:SECURITY_GROUP:1:EXCLUDE`\n\n\nParameters:\n\n"
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: etime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: param
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pagesize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startindex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/userdetails:
    get:
      tags:
      - 3.0 > ai
      summary: userDetailsRead
      description: "### View Outbound Activity\nYou can view what applications are\
        \ being run by a security group or\ndesktop pool and then drill down into\
        \ the report to find out which\nclient applications are making outbound connections\
        \ by a particular\ngroup of users. You can also discover all user groups and\
        \ users who\nare accessing a particular application, which can help you determine\n\
        if you need to adjust identity firewall in your environment.\n\n* query=*resource*\n\
        * param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *dest* (required)\n    * *app*\n  * &lt;param-type&gt; is one of:\n    *\
        \ for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*\n    * for\
        \ dest: *IP* - a valid IP address in dot notation, xx.xx.xx.xx\n    * for\
        \ app: *SRC_APP*\n  * &lt;comma-separated-values&gt; is a comma-separated\
        \ numbers (optional). If none specified then no filter is applied.\n  * &lt;operator&gt;\
        \ is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).\n\n**Example:** View\
        \ user activities to VM ID 1 originating from application ID 1  \n`GET /api/3.0/ai/userdetails?query=resource&stime=2012-10-15T00:00:00&etime=2012-10-20T00:00:00`\
        \  \n`&param=src:DIRECTORY_GROUP:2&param=app:SRC_APP:16&param=dest:IP:172.16.4.52`\n\
        \n### View Inbound Activity\n\nYou can view all inbound activity to a server\
        \ by desktop pool, security\ngroup, or AD group.\n\n* query=*sam*\n* param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *dest* (required)\n    * *app* (required)\n  * &lt;param-type&gt; is one\
        \ of:\n    * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*\n\
        \    * for dest: *VIRTUAL_MACHINE*\n    * for app: *DEST_APP*\n  * &lt;comma-separated-values&gt;\
        \ is a comma-separated numbers (optional). If none specified then no filter\
        \ is applied.\n  * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, *NOT*\
        \ (default is *INCLUDE*).\n\n**Example:** View user activities to VM ID 1\
        \ originating from\napplication ID 1  \n`GET /api/3.0/userdetails?query=sam&interval=60m&param=app:DEST_APP:1:EXCLUDE`\
        \  \n`&param=dest:IP:1:EXCLUDE&param=src:SECURITY_GROUP:1:EXCLUDE`\n\n###\
        \ View Interaction between Inventory Containers\nYou can view the traffic\
        \ passing between defined containers such as AD\ngroups, security groups and/or\
        \ desktop pools. This can help you identify\nand configure access to shared\
        \ services and to resolve misconfigured\nrelationships between Inventory container\
        \ definitions, desktop pools and\nAD groups.\n\n* query=*containers*\n* param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *dest* (required)\n  * &lt;param-type&gt; is one of:\n    * for src: *SECURITY_GROUP*,\
        \ *DIRECTORY_GROUP*, *DESKTOP_POOL*\n    * for dest: *SECURITY_GROUP*, * *DESKTOP_POOL*\
        \ \n  * &lt;comma-separated-values&gt; is a comma-separated numbers (optional).\
        \ If none specified then no filter is applied.\n  * &lt;operator&gt; is one\
        \ of *INCLUDE*, *EXCLUDE*, or *NOT* (default * is *INCLUDE*).\n\n**Example:**\
        \ View interaction between inventory containers  \n`GET /api/3.0/ai/userdetails?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`\
        \  \n`&param=src:SECURITY_GROUP:1`\n\n### View Outbound AD Group Activity\n\
        \nYou can view the traffic between members of defined Active Directory\ngroups\
        \ and can use this data to fine tune your firewall rules.\n\n* query=*adg*\n\
        * param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src* (required)\n    *\
        \ *adg*\n  * &lt;param-type&gt; is one of:\n    * for src: *SECURITY_GROUP*,\
        \ *DESKTOP_POOL*\n    * for adg: *USER*\n  * &lt;comma-separated-values&gt;\
        \ is a comma-separated numbers (optional). If none specified then no filter\
        \ is applied.\n  * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default\
        \ is *INCLUDE*).\n\n**Example:** View outbound AD group activity    \n`GET\
        \ /api/3.0/ai/userdetails?query=adg&interval=24h&param=adg:USER:1:INCLUDE`\
        \  \n`&param=src:SECURITY_GROUP:1:EXCLUDE`\n\n### View Virtual Machine Activity\
        \ Report\n\n* query=*vma*\n* param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;,\
        \ where:\n  * &lt;param-name&gt; is one of:\n    * *src*\n    * *dst*\n  \
        \  * *app*\n    * If no parameters are passed, then this would show all SAM\n\
        \    activities\n  * &lt;param-type&gt; is one of:\n    * for src: *SECURITY_GROUP*,\
        \ *DESKTOP_POOL*\n    * for dst: *VIRTUAL_MACHINE*, *VM_UUID*\n    * for app\
        \ - *SRC_APP* or *DEST_APP*\n  * &lt;comma-separated-values&gt; is a comma-separated\
        \ numbers (optional). If none specified then no filter is applied.\n  * &lt;operator&gt;\
        \ is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).\n\n**Example:** View\
        \ outbound AD group activity    \n`GET /api/3.0/ai/userdetails?query=vma&interval=60m&param=dest:VIRTUAL_MACHINE:1\n\
        &param=app:DEST_APP:16`\n\n\nParameters:\n\n"
      parameters:
      - name: query
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: etime
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: param
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pagesize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: startindex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/user/{userID}:
    get:
      tags:
      - 3.0 > ai
      summary: specificUserDetailsRead
      description: "Retrieve details for a specific user.\n\nParameters:\n\nuserID:\
        \ User ID\n\n"
      parameters:
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/app:
    get:
      tags:
      - 3.0 > ai
      summary: appDetailsRead
      description: |+
        Retrieve app details.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/app/{appID}:
    get:
      tags:
      - 3.0 > ai
      summary: specificAppDetailsRead
      description: "Retrieve details for specific app.\n\nParameters:\n\nappID: Specified\
        \ app ID.\n\n"
      parameters:
      - name: appID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/host:
    get:
      tags:
      - 3.0 > ai
      summary: hostDetailsRead
      description: |+
        Retrieve list of all discovered hosts (both by agent introspection and
        LDAP Sync) and their detail.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/host/{hostID}:
    get:
      tags:
      - 3.0 > ai
      summary: specificHostDetailsRead
      description: "Get host details.\n\nParameters:\n\nhostID: Specified host ID.\n\
        \n"
      parameters:
      - name: hostID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/desktoppool:
    get:
      tags:
      - 3.0 > ai
      summary: desktopPoolRead
      description: |+
        Retrieve list of all discovered desktop pools by agent introspection.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/desktoppool/{desktoppoolID}:
    get:
      tags:
      - 3.0 > ai
      summary: specificDesktopPoolRead
      description: "Retrieve specific desktop pool details.\n\nParameters:\n\ndesktoppoolID:\
        \ Specified desktop pool.\n\n"
      parameters:
      - name: desktoppoolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/vm:
    get:
      tags:
      - 3.0 > ai
      summary: vmDetailsRead
      description: |+
        Retrieve list of all discovered VMs.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/vm/{vmID}:
    get:
      tags:
      - 3.0 > ai
      summary: specificVMDetailsRead
      description: "Retrieve details about a specific virtual machine.\n\nParameters:\n\
        \nvmID: VM ID\n\n"
      parameters:
      - name: vmID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/directorygroup:
    get:
      tags:
      - 3.0 > ai
      summary: dirGroupRead
      description: |+
        Retrieve list of all discovered (and configured) LDAP directory
        groups.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/directorygroup/{directorygroupID}:
    get:
      tags:
      - 3.0 > ai
      summary: specificDirGroupRead
      description: "Retrieve details about a specific directory group.\n\nParameters:\n\
        \ndirectorygroupID: Specified directory group.\n\n"
      parameters:
      - name: directorygroupID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/directorygroup/user/{userID}:
    get:
      tags:
      - 3.0 > ai
      summary: userDirGroupRead
      description: "Retrieve Active Directory groups that user belongs to.\n\nParameters:\n\
        \nuserID: User ID.\n\n"
      parameters:
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/securitygroup:
    get:
      tags:
      - 3.0 > ai
      summary: secgroupDetailsRead
      description: "Retrieve list of all observed security groups.\n\nObserved entities\
        \ are the ones that are reported by the agents. For\nexample, if a host activity\
        \ is reported by an agent and if that host\nbelongs to a security group then\
        \ that security group would reported as\nobserved in SAM database.\n\n\nParameters:\n\
        \n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/3.0/ai/securitygroup/{secgroupID}:
    get:
      tags:
      - 3.0 > ai
      summary: specificSecgroupDetailsRead
      description: "Retrieve details about specific security group.\n\nParameters:\n\
        \nsecgroupID: Specified security group.\n\n"
      parameters:
      - name: secgroupID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges:
    get:
      tags:
      - 4.0 > edges
      summary: nsxEdgesRead
      description: |+
        Retrieve a list of all NSX Edges in your inventory. You can use the query
        parameters to filter results.


        Parameters:

      parameters:
      - name: datacenter
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenant
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pg
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: nsxEdgesCreate
      description: "You can install NSX Edge as a services gateway or as a logical\
        \ router.\n\nThe **type** parameter determines which type of NSX Edge is deployed:\n\
        *distributedRouter* or *gatewayServices*. If no type is specified, the\ntype\
        \ is *gatewayServices*.\n\nOther parameters for this method will differ depending\
        \ on which type of\nNSX Edge you are deploying. See the examples and parameter\
        \ tables for\nmore information.\n\n### NSX Edge: Service Gateway\n\nThe NSX\
        \ Edge installation API copies the NSX Edge OVF from the Edge\nManager to\
        \ the specified datastore and deploys an NSX Edge on the given\ndatacenter.\
        \ After the NSX Edge is installed, the virtual machine powers\non and initializes\
        \ according to the given network configuration. If an\nappliance is added,\
        \ it is deployed with the specified configuration.\n\nInstalling an NSX Edge\
        \ instance adds a virtual machine to the vCenter\nServer inventory, you must\
        \ specify an IP address for the management\ninterface, and you may name the\
        \ NSX Edge instance.\n\nThe configuration you specify when you install an\
        \ NSX Edge is stored in\nthe database. If an appliance is added, the configuration\
        \ is applied to\nit and it is deployed.\n\nNOTE: Do not use hidden/system\
        \ resource pool IDs as they are not\nsupported on the UI.\n\n#### Request\
        \ Body to Create Edge Services Gateway\n\n    <edge>\n      <datacenterMoid>datacenter-2</datacenterMoid>\n\
        \      <name>org1-edge</name>\n      <description>Description for the edge\
        \ gateway</description>\n      <tenant>org1</tenant>\n      <fqdn>org1edge1</fqdn>\n\
        \      <vseLogLevel>info</vseLogLevel>\n      <enableAesni>false</enableAesni>\n\
        \      <enableFips>true</enableFips>\n      <appliances>\n        <applianceSize>compact</applianceSize>\n\
        \        <enableCoreDump>true</enableCoreDump>\n        <appliance>\n    \
        \      <resourcePoolId>resgroup-53</resourcePoolId>\n          <datastoreId>datastore-29</datastoreId>\n\
        \          <hostId>host-28</hostId> \n          <vmFolderId>group-v38</vmFolderId>\
        \ \n          <customField> \n            <key>system.service.vmware.vsla.main01</key>\n\
        \            <value>string</value>\n          </customField>\n          <cpuReservation>\
        \ \n            <limit>2399</limit>\n            <reservation>500</reservation>\n\
        \            <shares>500</shares>\n          </cpuReservation>\n         \
        \ <memoryReservation> \n            <limit>5000</limit>\n            <reservation>500</reservation>\n\
        \            <shares>20480</shares>\n          </memoryReservation>\n    \
        \    </appliance>\n      </appliances>\n      <vnics>\n        <vnic>\n  \
        \        <index>0</index>\n          <name>internal0</name>\n          <type>internal</type>\n\
        \          <portgroupId>dvportgroup-114</portgroupId>\n          <addressGroups>\n\
        \            <addressGroup>\n              <primaryAddress>192.168.3.1</primaryAddress>\n\
        \              <secondaryAddresses>\n                <ipAddress>192.168.3.2</ipAddress>\n\
        \                <ipAddress>192.168.3.3</ipAddress>\n              </secondaryAddresses>\n\
        \              <subnetMask>255.255.255.0</subnetMask>\n            </addressGroup>\n\
        \            <addressGroup>\n              <primaryAddress>192.168.4.1</primaryAddress>\n\
        \              <secondaryAddresses>\n                <ipAddress>192.168.4.2</ipAddress>\n\
        \                <ipAddress>192.168.4.3</ipAddress>\n              </secondaryAddresses>\n\
        \              <subnetPrefixLength>24</subnetPrefixLength>\n            </addressGroup>\n\
        \            <addressGroup>\n              <primaryAddress>ffff::1</primaryAddress>\n\
        \              <secondaryAddresses>\n                <ipAddress>ffff::2</ipAddress>\n\
        \              </secondaryAddresses>\n              <subnetPrefixLength>64</subnetPrefixLength>\n\
        \            </addressGroup>\n          </addressGroups>\n          <macAddress>\n\
        \            <edgeVmHaIndex>0</edgeVmHaIndex>\n            <value>00:50:56:01:03:23</value>\n\
        \          </macAddress>\n          <fenceParameter>\n            <key>ethernet0.filter1.param1</key>\n\
        \            <value>1</value>\n          </fenceParameter>\n          <mtu>1500</mtu>\n\
        \          <enableProxyArp>false</enableProxyArp>\n          <enableSendRedirects>true</enableSendRedirects>\n\
        \          <isConnected>true</isConnected>\n          <inShapingPolicy>\n\
        \            <averageBandwidth>200000000</averageBandwidth>\n            <peakBandwidth>200000000</peakBandwidth>\n\
        \            <burstSize>0</burstSize>\n            <enabled>true</enabled>\n\
        \            <inherited>false</inherited>\n          </inShapingPolicy>\n\
        \          <outShapingPolicy>\n            <averageBandwidth>400000000</averageBandwidth>\n\
        \            <peakBandwidth>400000000</peakBandwidth>\n            <burstSize>0</burstSize>\n\
        \            <enabled>true</enabled>\n            <inherited>false</inherited>\n\
        \          </outShapingPolicy>\n        </vnic>\n      </vnics>\n      <cliSettings>\n\
        \        <userName>test</userName>\n        <password>test123!</password>\n\
        \        <remoteAccess>false</remoteAccess>\n      </cliSettings>\n      <autoConfiguration>\n\
        \        <enabled>true</enabled>\n        <rulePriority>high</rulePriority>\n\
        \      </autoConfiguration>\n      <dnsClient>\n        <primaryDns>10.117.0.1</primaryDns>\n\
        \        <secondaryDns>10.117.0.2</secondaryDns>\n        <domainName>vmware.com</domainName>\n\
        \        <domainName>foo.com</domainName>\n      </dnsClient>\n      <queryDaemon>\n\
        \        <enabled>true</enabled>\n        <port>5666</port>\n      </queryDaemon>\n\
        \    </edge>\n\n### NSX Edge: Logical (Distributed) Router\n\nBefore installing\
        \ a logical router, you must prepare the hosts on the\nappropriate clusters.\
        \ \n\nThe user specified configuration is stored in the database\nand Edge\
        \ identifier is returned to the user. This identifier must be\nused for future\
        \ configurations on the given Edge.  If any appliance(s)\nare specified and\
        \ at least one connected interface/vnic is specified,\nthen the appliance(s)\
        \ are deployed and configuration is applied to them.\n\nIt is not possible\
        \ to set the <ecmp>true</ecmp> property upon creation\nof a distributed logicalrouter\
        \ Edge and a subsequent API call is\nrequired to enable ECMP.\n\nDHCP relay\
        \ settings are not able to be used when creating a distributed\nlogical router\
        \ Edge and a subsequent API call is required to configure\nDHCP relay properties.\n\
        \n#### Request Body to Create Logical (Distributed) Router\n\n    <edge>\n\
        \      <datacenterMoid>datacenter-2</datacenterMoid>\n      <type>distributedRouter</type>\n\
        \      <appliances>\n        <appliance>\n        <resourcePoolId>resgroup-20</resourcePoolId>\n\
        \        <datastoreId>datastore-23</datastoreId>\n        </appliance>\n \
        \     </appliances>\n      <mgmtInterface>\n        <connectedToId>dvportgroup-38</connectedToId>\n\
        \          <addressGroups> \n            <addressGroup>\n              <primaryAddress>10.112.196.165</primaryAddress>\n\
        \              <subnetMask>255.255.252.0</subnetMask>\n            </addressGroup>\n\
        \           </addressGroups>\n      </mgmtInterface>\n      <interfaces>\n\
        \        <interface>\n          <type>uplink</type>\n          <mtu>1500</mtu>\n\
        \          <isConnected>true</isConnected>\n          <addressGroups> \n \
        \           <addressGroup>\n              <primaryAddress>192.168.10.1</primaryAddress>\n\
        \              <subnetMask>255.255.255.0</subnetMask>\n            </addressGroup>\n\
        \          </addressGroups>\n          <connectedToId>dvportgroup-39</connectedToId>\n\
        \        </interface>\n        <interface>\n          <type>internal</type>\n\
        \          <mtu>1500</mtu>\n          <isConnected>true</isConnected>\n  \
        \        <addressGroups> \n            <addressGroup>\n              <primaryAddress>192.168.20.1</primaryAddress>\n\
        \              <subnetMask>255.255.255.0</subnetMask>\n            </addressGroup>\n\
        \          </addressGroups>\n          <connectedToId>dvportgroup-40</connectedToId>\n\
        \        </interface>\n      </interfaces>\n    </edge>\n### Request and Response\
        \ Body Parameters for NSX Edge\n\n#### General Request Body Parameters: Edge\
        \ Services Gateway and Logical (Distributed) Router\n\nParameter |  Description\
        \ | Comments \n---|---|---\n**datacenterMoid** |Specify vCenter Managed Object\
        \ Identifier of data center on which edge has to be deployed|Required. \n\
        **type** | Specify which kind of NSX Edge to deploy. Choice of *distributedRouter*\
        \ or *gatewayServices*. | Optional. Default is *gatewayServices*.\n**name**\
        \ |Specify a name for the new NSX Edge.|Optional. Default is *NSX-&lt;edgeId&gt;*.\
        \ Used as a VM name on vCenter appended by *-&lt;haIndex&gt;*. \n**description**\
        \ |NSX Edge description.|Optional. \n**tenant** |Specify the tenant. Used\
        \ for syslog messages.|Optional. \n**fqdn** |Fully Qualified Domain Name for\
        \ the edge.|Optional. Default is *NSX-&lt;edgeId&gt;* Used to set hostname\
        \ on the VM. Appended by *-&lt;haIndex&gt;*\n**vseLogLevel** |Defines the\
        \ log level for log messages captured in the log files.|Optional. Choice of:\
        \ *emergency*, *alert*, *critical*, *error*, *warning*, *notice*, *debug*.\
        \ Default is *info*.\n**enableAesni** |Enable support for Advanced Encryption\
        \ Standard New Instructions on the Edge.|Optional. True/False. Default is\
        \ *true*.\n**enableCoreDump** |Deploys a new NSX Edge for debug/core-dump\
        \ purpose.|Optional. Default is false. Enabling core-dump will deploy an extra\
        \ disk for core-dump files.\n\n#### Appliances Configuration: Edge Services\
        \ Gateway and Logical (Distributed) Router\n\nParameter |  Description | Comments\
        \ \n---|---|---\n**applianceSize** |Edge form factor, it determines the NSX\
        \ Edge size and capability. |Required. Choice of: *compact*, *large*, *quadlarge*,\
        \ *xlarge*. Default is *compact*.\n**deployAppliances** | Determine whether\
        \ to deploy appliances. | Default is *true*.\n**appliance** |Appliance configuration\
        \ details.|Required. Can configure a maximum of two appliances. Until one\
        \ appliance is configured and NSX Edge VM is deployed successfully, none of\
        \ the configured features will serve the network.\n**resourcePoolId** |Details\
        \ of resource pool on which to deploy NSX Edge. |Required. Can be resource\
        \ pool ID, e.g. *resgroup-15* or cluster ID, e.g. *domain-c41*.\n**datastoreId**\
        \ |Details of datastore on which to deploy NSX Edge.|Required. \n**hostId**\
        \ |ID of the host on which to deploy the NSX Edge.|Optional. \n**vmFolderId**\
        \ |The folder in which to save the NSX Edge.|Optional. \n**customField** |Custom\
        \ key-value attributes. |Optional. Use custom attributes to associate user-specific\
        \ meta-information with VMs and managed hosts, stored on vCenter Server.\n\
        **customField > key** |Meta information Key.|Required if customField is specified.\
        \ \n**customField > value** |Meta information Value.|Required if customField\
        \ is specified. \n**cpuReservation > limit** |Maximum CPU capacity the NSX\
        \ Edge can use, specified in MHz.|Optional. -1 (unlimited), any positive integer\n\
        **cpuReservation > reservation** |CPU capacity reserved for NSX Edge in MHz.|Optional.\
        \ \n**cpuReservation > shares** |Higher value implies NSX Edge has priority\
        \ when accessing resources.|Optional. \n**memoryReservation > limit** |Maximum\
        \ memory the NSX Edge can use, specified in MB.|Optional. -1 (unlimited),\
        \ any positive integer\n**memoryReservation > reservation** |Memory capacity\
        \ reserved for NSX Edge in MB.|Optional. \n**memoryReservation > shares**\
        \ |Higher value implies NSX Edge has priority when accessing resources.|Optional.\
        \ \n**cliSettings > userName** |User name.|Required. length 1-33.\n**cliSettings\
        \ > password** |Password.|Required. The password must be at least 12 characters\
        \ long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character\
        \ and 1 digit. In addition, a character cannot be repeated 3 or more times\
        \ consectively.\n**cliSettings > remoteAccess** |Enables or disables remote\
        \ access through SSH. |Required. Relevant firewall rules to allow traffic\
        \ on port 22 must be opened by user/client\n**autoConfiguration > enabled**\
        \ |Enable/Disable status of autoConfiguration|Optional. True/False. Default\
        \ is *true*. If autoConfiguration is enabled, firewall rules are automatically\
        \ created to allow control traffic. Rules to allow data traffic are not created.\
        \  For example, if you are using IPsec VPN, and **autoConfiguration** is *true*,\
        \ firewall rules will automatically be configured to allow IKE traffic. However,\
        \ you will need to add additional rules to allow the data traffic for the\
        \ IPsec tunnel. If HA is enabled, firewall rules are always created, even\
        \ if **autoConfiguration** is *false*, otherwise both HA appliances will become\
        \ active.\n**autoConfiguration > rulePriority** |Defines the priority of system-defined\
        \ rules over user-defined rules.|Optional. High, Low.  Default is *high*.\n\
        **queryDaemon > enabled** |Configure the communication between server load\
        \ balancer and NSX Edge VM.|Default is *false*.\n**queryDaemon > port** |Defines\
        \ the port through which the communication happens.|Integer 1-65535. Default\
        \ is *5666*.\n\n#### DNS Client: Edge Services Gateway and Logical (Distributed)\
        \ Router \n\nParameter |  Description | Comments \n---|---|---\n**dnsClient**\
        \ |Configures the DNS settings of the Edge Services Gateway.|Optional. If\
        \ the primary/secondary are specified and the DNS service is not specified,\
        \ the primary/secondary will be used as the default of the DNS service.\n\
        **primaryDns** |Primary DNS IP |\n**secondaryDns** |Secondary DNS IP |\n**domainName**\
        \ |Domain Name of Edge |\n**domainName** |Secondary Domain Name of Edge |\n\
        \n#### vNIC Parameters: Edge Services Gateway Only\n\nParameter |  Description\
        \ | Comments\n---|---|---\n**vnic** |Configure interface (vNic).|Required.\
        \ Until one connected vNic is configured, none of the configured features\
        \ will serve the network.\n**index** |Index of vNic to be configured. Value\
        \ varies from 0-9. 4094 sub-interfaces can be configured in trunk mode.|Required.\
        \ \n**name** |Name of the vNic.|Optional. System provides default names: vnic0...vnic9.\n\
        **label** |Label for the vNic.|Optional. System provides default labels: vNic_0...vNic_9.\n\
        **type** |Type of interface connected to vNic.|Optional. Choice of: *Uplink*,\
        \ *Internal*, *TRUNK*. Default is *Internal*. *TRUNK* should be specified\
        \ when sub-interfaces are configured.\n**portgroupId** |Connect NSX Edge to\
        \ the network through this port group.|Required. Choice of: *portgroupId*\
        \ or *virtualWireId*. *portgroupId* needs to be defined if *isConnected=true*\n\
        **addressGroup** |Address Group assigned to vNic.|Required. More than one\
        \ addressGroup/subnets can be assigned to the vNic.\n**primaryAddress** |Primary\
        \ Address of Edge Interface.|Required. IPv4 and IPv6 addresses are supported.\n\
        **secondaryAddresses > ipAddress** |IP assigned to interface.|Optional. One\
        \ or more **ipAddress** parameters are allowed, to enable assigning multiple\
        \ IP addresses to a vNic, for example, for load balancing, NAT, VPN. At least\
        \ one is required if **secondaryAddresses** is specified. \n**subnetMask**\
        \ or **subnetPrefixLength** |Subnet mask or prefix value.  |Required. Either\
        \ **subnetMask** or **subnetPrefixLength** should be provided. When both are\
        \ provided then **subnetprefixLength** is ignored.\n**macAddress** |Option\
        \ to manually specify the MAC address. |Optional.  Managed by vCenter if not\
        \ provided.\n**macAddress > edgeVmHaIndex** |HA index of the Edge VM. |Required.\
        \ 0 or 1.\n**macAddress > value** |Value of the MAC address.|Optional. Ensure\
        \ that MAC addresses provided are unique within the given layer 2 domain.\n\
        **vnic > mtu** |The maximum transmission value for the data packets.|Optional.\
        \  Default is *1500*.\n**enableProxyArp** |Enables proxy ARP. Do not use this\
        \ flag unless you want NSX Edge to proxy ARP for all configured subnets. \
        \ |Optional.  True/False. Default is *false*.\n**enableSendRedirects** |Enables\
        \ ICMP redirect. |Optional. True/False.  Default is *true*.\n**isConnected**\
        \ |Sets if the interface is connected to the port group network. |Optional.\
        \ True/False. Default is *false*. **portgroupId** needs to be defined if *isConnected=true*.\n\
        **inShapingPolicy** |Configure Incoming Traffic.|Optional. \n**outShapingPolicy**\
        \ |Configure Outgoing Traffic.|Optional. \n**averageBandwidth**<br>(inShapingPolicy\
        \ or outShapingPolicy) |Sets average bandwidth for traffic.|Optional. \n**peakBandwidth**<br>(inShapingPolicy\
        \ or outShapingPolicy) |Sets peak bandwidth for traffic.|Required. \n**burstSize**<br>(inShapingPolicy\
        \ or outShapingPolicy) |Sets the burst size of the interface.|Required. \n\
        **enabled**<br>(inShapingPolicy or outShapingPolicy) |Enable/disable status\
        \ of this traffic policy.|Required. \n**inherited**<br>(inShapingPolicy or\
        \ outShapingPolicy) |Determine whether properties should be inherited to the\
        \ vNic from the port group.|Required. \n\n#### HA (Management) Interfaces\
        \ and Interfaces Configuration: Logical (Distributed) Router Only\n\nParameter\
        \ |  Description | Comments \n---|---|---\n**mgmtInterface** | High availability\
        \ interface configuration. Interface index 0 is assigned. | Required.\n**interface**\
        \ | Interface configuration. 1-9 are reserved for uplinks, 10-999 are used\
        \ for internal interfaces. | Optional. Can be added after logical router creation.\n\
        **connectedToId**<br>(mgmtInterface or interface) | Managed Object ID of logical\
        \ switch or port group. | For example, *virtualwire-1* or *dvportgroup-50*.\
        \ Logical router interfaces do not support legacy port groups. \n**name**<br>(mgmtInterface\
        \ or interface) | Name assigned to interface. | Optional.\n**addressGroup**<br>(mgmtInterface\
        \ or interface) |Address Group assigned to interface. |Required. Only one\
        \ **addressGroup** can be configured on each logical router **mgmtInterface**\
        \ or **interface**.\n**primaryAddress**<br>(mgmtInterface or interface) |Primary\
        \ Address of interface. |Required. Secondary Addresses are not supported on\
        \ logical routers. Address must be IPv4.\n**subnetMask** or **subnetPrefixLength**<br>(mgmtInterface\
        \ or interface) |Subnet mask or prefix value.  |Required. Either **subnetMask**\
        \ or **subnetPrefixLength** should be provided. When both are provided then\
        \ **subnetprefixLength** is ignored.\n**mtu**<br>(mgmtInterface or interface)\
        \ |The maximum transmission value for the data packets. |Optional. Default\
        \ is 1500.\n**type** | Type of interface. | Required. Choice of *uplink* or\
        \ *internal*. \n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: isUniversal
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<edge>\n  <datacenterMoid>datacenter-2</datacenterMoid>\n\
                \  <name>org1-edge</name>\n  <description>Description for the edge\
                \ gateway</description>\n  <tenant>org1</tenant>\n  <fqdn>org1edge1</fqdn>\n\
                \  <vseLogLevel>info</vseLogLevel>\n  <enableAesni>false</enableAesni>\n\
                \  <enableFips>true</enableFips>\n  <appliances>\n    <applianceSize>compact</applianceSize>\n\
                \    <enableCoreDump>true</enableCoreDump>\n    <appliance>\n    \
                \  <resourcePoolId>resgroup-53</resourcePoolId>\n      <datastoreId>datastore-29</datastoreId>\n\
                \      <hostId>host-28</hostId> \n      <vmFolderId>group-v38</vmFolderId>\
                \ \n      <customField> \n        <key>system.service.vmware.vsla.main01</key>\n\
                \        <value>string</value>\n      </customField>\n      <cpuReservation>\
                \ \n        <limit>2399</limit>\n        <reservation>500</reservation>\n\
                \        <shares>500</shares>\n      </cpuReservation>\n      <memoryReservation>\
                \ \n        <limit>5000</limit>\n        <reservation>500</reservation>\n\
                \        <shares>20480</shares>\n      </memoryReservation>\n    </appliance>\n\
                \  </appliances>\n  <vnics>\n    <vnic>\n      <index>0</index>\n\
                \      <name>internal0</name>\n      <type>internal</type>\n     \
                \ <portgroupId>dvportgroup-114</portgroupId>\n      <addressGroups>\n\
                \        <addressGroup>\n          <primaryAddress>192.168.3.1</primaryAddress>\n\
                \          <secondaryAddresses>\n            <ipAddress>192.168.3.2</ipAddress>\n\
                \            <ipAddress>192.168.3.3</ipAddress>\n          </secondaryAddresses>\n\
                \          <subnetMask>255.255.255.0</subnetMask>\n        </addressGroup>\n\
                \        <addressGroup>\n          <primaryAddress>192.168.4.1</primaryAddress>\n\
                \          <secondaryAddresses>\n            <ipAddress>192.168.4.2</ipAddress>\n\
                \            <ipAddress>192.168.4.3</ipAddress>\n          </secondaryAddresses>\n\
                \          <subnetPrefixLength>24</subnetPrefixLength>\n        </addressGroup>\n\
                \        <addressGroup>\n          <primaryAddress>ffff::1</primaryAddress>\n\
                \          <secondaryAddresses>\n            <ipAddress>ffff::2</ipAddress>\n\
                \          </secondaryAddresses>\n          <subnetPrefixLength>64</subnetPrefixLength>\n\
                \        </addressGroup>\n      </addressGroups>\n      <macAddress>\n\
                \        <edgeVmHaIndex>0</edgeVmHaIndex>\n        <value>00:50:56:01:03:23</value>\n\
                \      </macAddress>\n      <fenceParameter>\n        <key>ethernet0.filter1.param1</key>\n\
                \        <value>1</value>\n      </fenceParameter>\n      <mtu>1500</mtu>\n\
                \      <enableProxyArp>false</enableProxyArp>\n      <enableSendRedirects>true</enableSendRedirects>\n\
                \      <isConnected>true</isConnected>\n      <inShapingPolicy>\n\
                \        <averageBandwidth>200000000</averageBandwidth>\n        <peakBandwidth>200000000</peakBandwidth>\n\
                \        <burstSize>0</burstSize>\n        <enabled>true</enabled>\n\
                \        <inherited>false</inherited>\n      </inShapingPolicy>\n\
                \      <outShapingPolicy>\n        <averageBandwidth>400000000</averageBandwidth>\n\
                \        <peakBandwidth>400000000</peakBandwidth>\n        <burstSize>0</burstSize>\n\
                \        <enabled>true</enabled>\n        <inherited>false</inherited>\n\
                \      </outShapingPolicy>\n    </vnic>\n  </vnics>\n  <cliSettings>\n\
                \    <userName>test</userName>\n    <password>test123!</password>\n\
                \    <remoteAccess>false</remoteAccess>\n  </cliSettings>\n  <autoConfiguration>\n\
                \    <enabled>true</enabled>\n    <rulePriority>high</rulePriority>\n\
                \  </autoConfiguration>\n  <dnsClient>\n    <primaryDns>10.117.0.1</primaryDns>\n\
                \    <secondaryDns>10.117.0.2</secondaryDns>\n    <domainName>vmware.com</domainName>\n\
                \    <domainName>foo.com</domainName>\n  </dnsClient>\n  <queryDaemon>\n\
                \    <enabled>true</enabled>\n    <port>5666</port>\n  </queryDaemon>\n\
                </edge>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}:
    get:
      tags:
      - 4.0 > edges
      summary: nsxEdgeRead
      description: "Retrieve information about the specified NSX Edge.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ updated. **haAdminState**, **configuredResourcePool**, **configuredDataStore**,\
        \ **configuredHost**, **configuredVmFolder** parameters added. \n\n\nParameters:\n\
        \nedgeId: Specify the ID of the edge in *edgeId*.\n\n"
      parameters:
      - name: isUniversal
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: nsxEdgeUpdate
      description: "Update the NSX Edge configuration.\n\n**Method history:**\n\n\
        Release | Modification\n--------|-------------\n6.2.3 | Method updated. **haAdminState**\
        \ parameter added.\n6.3.0 | Method updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**,\
        \ **dnatMatchSourcePort**, **snatMatchDestinationPort** parameters added.\
        \ <br>**protocol**, **originalPort**, and **translatedPort** now supported\
        \ in SNAT rules.\n\n\nParameters:\n\nedgeId: Specify the ID of the edge in\
        \ *edgeId*.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <edge>
                  <id></id>
                  <description></description>
                  <datacenterMoid></datacenterMoid>
                  <name></name>
                  <type></type>
                  <fqdn></fqdn>
                  <enableAesni></enableAesni>
                  <enableFips></enableFips>
                  <vseLogLevel></vseLogLevel>
                  <vnics>
                    <vnic>
                      <index></index>
                      <name></name>
                      <type></type>
                      <portgroupId></portgroupId>
                      <addressGroups>
                        <addressGroup>
                          <primaryAddress></primaryAddress>
                          <secondaryAddresses>
                            <ipAddress></ipAddress>
                          </secondaryAddresses>
                          <subnetMask></subnetMask>
                        </addressGroup>
                      </addressGroups>
                      <mtu></mtu>
                      <enableProxyArp></enableProxyArp>
                      <enableSendRedirects></enableSendRedirects>
                      <isConnected></isConnected>
                      <inShapingPolicy>
                        <averageBandwidth></averageBandwidth>
                        <peakBandwidth></peakBandwidth>
                        <burstSize></burstSize>
                        <enabled></enabled>
                        <inherited></inherited>
                      </inShapingPolicy>
                      <outShapingPolicy>
                        <averageBandwidth></averageBandwidth>
                        <peakBandwidth></peakBandwidth>
                        <burstSize></burstSize>
                        <enabled></enabled>
                        <inherited></inherited>
                      </outShapingPolicy>
                    </vnic>
                  </vnics>
                  <appliances>
                    <applianceSize></applianceSize>
                    <appliance>
                      <haAdminState></haAdminState>
                      <resourcePoolId></resourcePoolId>
                      <datastoreId></datastoreId>
                      <vmFolderId></vmFolderId>
                    </appliance>
                  </appliances>
                  <cliSettings>
                    <remoteAccess></remoteAccess>
                    <userName></userName>
                  </cliSettings>
                  <features>
                    <firewall>
                      <defaultPolicy>
                        <action></action>
                        <loggingEnabled></loggingEnabled>
                      </defaultPolicy>
                      <firewallRules>
                        <firewallRule>
                          <id></id>
                          <ruleTag></ruleTag>
                          <name></name>
                          <ruleType></ruleType>
                          <source>
                            <exclude></exclude>
                            <groupingObjectId></groupingObjectId>
                          </source>
                          <destination></destination>
                          <application>
                            <applicationId></applicationId>
                          </application>
                          <action></action>
                          <enabled></enabled>
                          <loggingEnabled></loggingEnabled>
                          <matchTranslated></matchTranslated>
                        </firewallRule>
                      </firewallRules>
                    </firewall>
                    <routing>
                      <staticRouting>
                        <defaultRoute>
                          <vnic></vnic>
                          <gatewayAddress></gatewayAddress>
                          <description></description>
                        </defaultRoute>
                        <staticRoutes>
                          <route>
                            <vnic></vnic>
                            <network></network>
                            <nextHop></nextHop>
                            <type></type>
                          </route>
                        </staticRoutes>
                      </staticRouting>
                      <ospf>
                        <enabled></enabled>
                      </ospf>
                    </routing>
                    <highAvailability>
                      <enabled></enabled>
                      <declareDeadTime></declareDeadTime>
                      <logging>
                        <enable></enable>
                        <logLevel></logLevel>
                      </logging>
                    </highAvailability>
                    <syslog>
                      <protocol></protocol>
                      <serverAddresses>
                        <ipAddress></ipAddress>
                      </serverAddresses>
                    </syslog>
                    <ipsec>
                      <enabled></enabled>
                      <logging>
                        <enable></enable>
                        <logLevel></logLevel>
                      </logging>
                      <sites>
                        <site>
                          <enabled></enabled>
                          <name></name>
                          <localId></localId>
                          <localIp></localIp>
                          <peerId></peerId>
                          <encryptionAlgorithm></encryptionAlgorithm>
                          <mtu></mtu>
                          <enablePfs></enablePfs>
                          <dhGroup></dhGroup>
                          <localSubnets>
                            <subnet></subnet>
                          </localSubnets>
                          <peerSubnets>
                            <subnet></subnet>
                          </peerSubnets>
                          <psk></psk>
                          <authenticationMode></authenticationMode>
                        </site>
                      </sites>
                      <global>
                        <caCertificates/>
                        <crlCertificates/>
                      </global>
                    </ipsec>
                    <dhcp>
                      <enabled></enabled>
                      <staticBindings>
                        <staticBinding>
                          <autoConfigureDNS></autoConfigureDNS>
                          <bindingId></bindingId>
                          <vmId></vmId>
                          <vnicId></vnicId>
                          <hostname></hostname>
                          <ipAddress></ipAddress>
                          <defaultGateway></defaultGateway>
                          <leaseTime></leaseTime>
                        </staticBinding>
                      </staticBindings>
                      <ipPools>
                        <ipPool>
                          <autoConfigureDNS></autoConfigureDNS>
                          <poolId></poolId>
                          <ipRange></ipRange>
                          <defaultGateway></defaultGateway>
                          <leaseTime></leaseTime>
                        </ipPool>
                      </ipPools>
                      <logging>
                        <enable></enable>
                        <logLevel></logLevel>
                      </logging>
                    </dhcp>
                    <nat>
                      <natRules>
                        <natRule>
                          <ruleId></ruleId>
                          <ruleTag></ruleTag>
                          <ruleType></ruleType>
                          <action>dnat</action>
                          <vnic></vnic>
                          <originalAddress></originalAddress>
                          <translatedAddress></translatedAddress>
                          <dnatMatchSourceAddress></dnatMatchSourceAddress>
                          <loggingEnabled></loggingEnabled>
                          <enabled></enabled>
                          <protocol></protocol>
                          <originalPort></originalPort>
                          <translatedPort></translatedPort>
                          <dnatMatchSourcePort></dnatMatchSourcePort>
                        </natRule>
                      </natRules>
                    </nat>
                  </features>
                  <autoConfiguration>
                    <enabled></enabled>
                    <rulePriority></rulePriority>
                  </autoConfiguration>
                </edge>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: nsxEdgeCreate
      description: "Manage NSX Edge.\n\nParameters:\n\nedgeId: Specify the ID of the\
        \ edge in *edgeId*.\n\n"
      parameters:
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: nsxEdgeDelete
      description: "Delete specified NSX Edge configuration. Associated appliances\
        \ are\nalso deleted.\n\n\nParameters:\n\nedgeId: Specify the ID of the edge\
        \ in *edgeId*.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dnsclient:
    put:
      tags:
      - 4.0 > edges
      summary: edgeDnsClientUpdate
      description: |+
        Update Edge DNS settings.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <dnsClient>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <domainName></domainName>
                </dnsClient>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/aesni:
    post:
      tags:
      - 4.0 > edges
      summary: aesniCreate
      description: |+
        Modify AESNI setting.

        Parameters:

      parameters:
      - name: enable
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/coredump:
    post:
      tags:
      - 4.0 > edges
      summary: coreDumpCreate
      description: |+
        Modify core dump setting.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/fips:
    post:
      tags:
      - 4.0 > edges
      summary: fipsCreate
      description: |+
        Modify FIPS setting.

        Parameters:

      parameters:
      - name: enable
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/logging:
    post:
      tags:
      - 4.0 > edges
      summary: loggingCreate
      description: |+
        Modify log setting.

        Parameters:

      parameters:
      - name: level
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/summary:
    get:
      tags:
      - 4.0 > edges
      summary: summaryRead
      description: |+
        Retrieve details about the specified NSX Edge.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method updated. **enableFips** parameter added to **appliancesSummary**.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/status:
    get:
      tags:
      - 4.0 > edges
      summary: statusRead
      description: "Retrieve the status of the specified Edge.\n\nThe **edgeStatus**\
        \ has the following possible states:\n* *GREEN*: Health checks are successful,\
        \ status is good.\n* *YELLOW*: Intermittent health check failure. If health\
        \ check fails\n  for five consecutive times for all appliances, status will\
        \ turn\n  *RED*.\n* *GREY*: unknown status.\n* *RED*: None of the appliances\
        \ for this NSX Edge are in a serving state.\n\n\nParameters:\n\n"
      parameters:
      - name: getlatest
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: detailed
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: preRulesStatus
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/techsupportlogs:
    get:
      tags:
      - 4.0 > edges
      summary: techSupportLogsRead
      description: |+
        Retrieve the tech support logs for Edge.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/clisettings:
    put:
      tags:
      - 4.0 > edges
      summary: cliSettingsUpdate
      description: |+
        Modify CLI credentials and enable/disable SSH for Edge.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <cliSettings>
                  <userName></userName>
                  <password></password>
                  <remoteAccess></remoteAccess>
                  <passwordExpiry></passwordExpiry>
                  <sshLoginBannerText></sshLoginBannerText>
                </cliSettings>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/cliremoteaccess:
    post:
      tags:
      - 4.0 > edges
      summary: cliRemoteCreate
      description: |+
        Change CLI remote access

        Parameters:

      parameters:
      - name: enable
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/systemcontrol/config:
    get:
      tags:
      - 4.0 > edges
      summary: nsxEdgeSystemControlRead
      description: "Retrieve all NSX Edge system control configuration.\n\nIf no system\
        \ control parameters are configured, the response is empty.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: nsxEdgeSystemControlUpdate
      description: |+
        Update the NSX Edge system control (sysctl) configuration.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <systemControl>
                  <property></property>
                </systemControl>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: nsxEdgeSystemControlDelete
      description: |+
        Delete all NSX Edge system control configuration.

        Deleting the system control configuration requires a reboot of the
        NSX Edge appliance.


        Parameters:

      parameters:
      - name: rebootNow
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config:
    get:
      tags:
      - 4.0 > edges
      summary: nsxEdgeFirewallConfigRead
      description: "Retrieve the NSX Edge firewall configuration.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method updated.\
        \ **enableSynFloodProtection** parameter added. \n6.3.0 | Method updated.\
        \ **logIcmpErrors** and **dropIcmpReplays** parameters added. \n\n\nParameters:\n\
        \n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: nsxEdgeFirewallConfigUpdate
      description: "Configure NSX Edge firewall.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method updated. **enableSynFloodProtection**\
        \ parameter added. Default value of **tcpTimeoutEstablished** increased from\
        \ 3600 to 21600 seconds (6 hours).\n6.3.0 | Method updated. **logIcmpErrors**\
        \ and **dropIcmpReplays** parameters added. \n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<firewall>\n  <defaultPolicy> \n    <action>deny</action>\n\
                \    <loggingEnabled>false</loggingEnabled>  \n  </defaultPolicy>\n\
                \  <globalConfig>  \n    <tcpPickOngoingConnections>false</tcpPickOngoingConnections>\
                \  \n    <tcpAllowOutOfWindowPackets>false</tcpAllowOutOfWindowPackets>\
                \  \n    <tcpSendResetForClosedVsePorts>true</tcpSendResetForClosedVsePorts>\
                \  \n    <dropInvalidTraffic>true</dropInvalidTraffic>  \n    <logInvalidTraffic>false</logInvalidTraffic>\
                \  \n    <tcpTimeoutOpen>30</tcpTimeoutOpen>  \n    <tcpTimeoutEstablished>21600</tcpTimeoutEstablished>\
                \  \n    <tcpTimeoutClose>30</tcpTimeoutClose>  \n    <udpTimeout>60</udpTimeout>\
                \  \n    <icmpTimeout>10</icmpTimeout>  \n    <icmp6Timeout>10</icmp6Timeout>\
                \  \n    <ipGenericTimeout>120</ipGenericTimeout>  \n    <enableSynFloodProtection>false</enableSynFloodProtection>\
                \ \n    <logIcmpErrors>false</logIcmpErrors>\n    <dropIcmpReplays>false</dropIcmpReplays>\n\
                \  </globalConfig>\n  <firewallRules>\n    <firewallRule>\n      <ruleTag>1</ruleTag>\
                \  \n      <name>rule1</name>  \n      <source>  \n        <vnicGroupId>vnic-index-5</vnicGroupId>\
                \  \n        <groupingObjectId>ipset-128</groupingObjectId>  \n  \
                \      <ipAddress>1.1.1.1</ipAddress>  \n      </source>\n      <destination>\
                \  \n        <groupingObjectId>ipset-126</groupingObjectId>  \n  \
                \      <vnicGroupId>vnic-index-5</vnicGroupId>  \n        <groupingObjectId>ipset-128</groupingObjectId>\
                \  \n        <ipAddress>192.168.10.0/24</ipAddress>  \n      </destination>\n\
                \      <application>  \n        <applicationId>application-155</applicationId>\
                \  \n        <service>  \n          <protocol>tcp</protocol>\n   \
                \       <port>80</port>  \n          <sourcePort>1500</sourcePort>\
                \  \n        </service>\n      </application>\n      <matchTranslated>true</matchTranslated>\
                \  \n      <direction>in</direction>  \n      <action>accept</action>\
                \  \n      <enabled>true</enabled>  \n      <loggingEnabled>true</loggingEnabled>\
                \  \n      <description>comments</description>  \n    </firewallRule>\n\
                \  </firewallRules>\n</firewall>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: nsxEdgeFirewallConfigDelete
      description: |+
        Delete NSX Edge firewall configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/rules:
    post:
      tags:
      - 4.0 > edges
      summary: firewallRulesCreate
      description: "Add one or more rules. You can add a rule above a specific rule\n\
        using the query parameter, indicating the desired ruleID.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: aboveRuleId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallRules>
                  <firewallRule>
                    <ruleTag></ruleTag>
                    <name></name>
                    <source>
                      <ipAddress></ipAddress>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                    </source>
                    <destination>
                      <ipAddress></ipAddress>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                    </destination>
                    <application>
                      <applicationId></applicationId>
                      <service>
                        <protocol></protocol>
                        <port></port>
                        <sourcePort></sourcePort>
                      </service>
                    </application>
                    <matchTranslated></matchTranslated>
                    <direction></direction>
                    <action></action>
                    <enabled></enabled>
                    <loggingEnabled></loggingEnabled>
                    <description></description>
                  </firewallRule>
                </firewallRules>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/rules/{ruleId}:
    get:
      tags:
      - 4.0 > edges
      summary: firewallRuleRead
      description: "Retrieve specific rule.\n\nParameters:\n\nruleId: Rule ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: firewallRuleUpdate
      description: "Modify a specific firewall rule.\n\nParameters:\n\nruleId: Rule\
        \ ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallRule>
                  <ruleTag></ruleTag>
                  <name></name>
                  <source>
                    <vnicGroupId></vnicGroupId>
                    <groupingObjectId></groupingObjectId>
                    <ipAddress></ipAddress>
                  </source>
                  <destination>
                    <groupingObjectId></groupingObjectId>
                    <vnicGroupId></vnicGroupId>
                    <ipAddress></ipAddress>
                  </destination>
                  <application>
                    <applicationId></applicationId>
                    <service>
                      <protocol></protocol>
                      <port></port>
                      <sourcePort></sourcePort>
                    </service>
                  </application>
                  <matchTranslated></matchTranslated>
                  <direction></direction>
                  <action></action>
                  <enabled></enabled>
                  <loggingEnabled></loggingEnabled>
                  <description></description>
                </firewallRule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: firewallRuleDelete
      description: "Delete firewall rule\n\nParameters:\n\nruleId: Rule ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/global:
    get:
      tags:
      - 4.0 > edges
      summary: globalFirewallConfigRead
      description: "Retrieve the firewall default policy for an Edge.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ updated. **enableSynFloodProtection** parameter added. \n6.3.0 | Method\
        \ updated. **logIcmpErrors** and **dropIcmpReplays** parameters added. \n\n\
        \nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: globalFirewallConfigUpdate
      description: "Configure firewall global config for an Edge.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.2.3 | Method updated.\
        \ **enableSynFloodProtection** parameter added. Default value of **tcpTimeoutEstablished**\
        \ increased from 3600 to 21600 seconds (6 hours).\n6.3.0 | Method updated.\
        \ **logIcmpErrors** and **dropIcmpReplays** parameters added. \n\n\nParameters:\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <globalConfig>
                  <tcpPickOngoingConnections></tcpPickOngoingConnections>
                  <tcpAllowOutOfWindowPackets></tcpAllowOutOfWindowPackets>
                  <tcpSendResetForClosedVsePorts></tcpSendResetForClosedVsePorts>
                  <dropInvalidTraffic></dropInvalidTraffic>
                  <logInvalidTraffic></logInvalidTraffic>
                  <tcpTimeoutOpen></tcpTimeoutOpen>
                  <tcpTimeoutEstablished></tcpTimeoutEstablished>
                  <tcpTimeoutClose></tcpTimeoutClose>
                  <udpTimeout></udpTimeout>
                  <icmpTimeout></icmpTimeout>
                  <icmp6Timeout></icmp6Timeout>
                  <ipGenericTimeout></ipGenericTimeout>
                  <enableSynFloodProtection></enableSynFloodProtection>
                  <logIcmpErrors></logIcmpErrors>
                  <dropIcmpReplays></dropIcmpReplays>
                </globalConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/config/defaultpolicy:
    get:
      tags:
      - 4.0 > edges
      summary: defaultFirewallPolicyRead
      description: |+
        Retrieve default firewall policy

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: defaultFirewallPolicyUpdate
      description: |+
        Configure default firewall policy

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDefaultPolicy>
                  <action></action>
                  <loggingEnabled></loggingEnabled>
                </firewallDefaultPolicy>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/statistics/firewall:
    get:
      tags:
      - 4.0 > edges
      summary: firewallStatisticsRead
      description: |+
        Retrieve number of ongoing connections for the firewall
        configuration.


        Parameters:

      parameters:
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/firewall/statistics/{ruleId}:
    get:
      tags:
      - 4.0 > edges
      summary: firewallRuleStatisticsRead
      description: "Retrieve stats for firewall rule.\n\nParameters:\n\nruleId: Specified\
        \ rule.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/nat/config:
    get:
      tags:
      - 4.0 > edges
      summary: edgeNatRead
      description: "Retrieve SNAT and DNAT rules for the specified NSX Edge.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.3.0 | Method\
        \ updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**,\
        \ **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**,\
        \ and **translatedPort** now supported in SNAT rules.\n\n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: edgeNatConfig
      description: "Configure SNAT and DNAT rules for an Edge.\n\nIf you use this\
        \ method to add new NAT rules, you must include all\nexisting rules in the\
        \ request body. Any rules that are omitted will\nbe deleted.\n\n**Method history:**\n\
        \nRelease | Modification\n--------|-------------\n6.3.0 | Method updated.\
        \ **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**,\
        \ **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**,\
        \ and **translatedPort** now supported in SNAT rules.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<nat>\n  <natRules>\n    <natRule>\n      <ruleTag>65537</ruleTag>\
                \   \n      <action>dnat</action>\n      <vnic>0</vnic> \n      <originalAddress>10.112.196.116</originalAddress>\n\
                \      <translatedAddress>172.16.1.10</translatedAddress>\n      <dnatMatchSourceAddress>any</dnatMatchSourceAddress>\n\
                \      <loggingEnabled>true</loggingEnabled>   \n      <enabled>true</enabled>\
                \   \n      <description>my comments</description>   \n      <protocol>tcp</protocol>\
                \   \n      <originalPort>3389</originalPort>   \n      <translatedPort>3389</translatedPort>\
                \   \n      <dnatMatchSourcePort>any</dnatMatchSourcePort>\n    </natRule>\n\
                \    <natRule>\n      <ruleTag>65538</ruleTag>   \n      <action>snat</action>\n\
                \      <vnic>1</vnic> \n      <originalAddress>172.16.1.10</originalAddress>\n\
                \      <translatedAddress>10.112.196.116</translatedAddress>\n   \
                \   <snatMatchDestinationAddress>any</snatMatchDestinationAddress>\n\
                \      <loggingEnabled>false</loggingEnabled>   \n      <enabled>true</enabled>\
                \   \n      <description>no comments</description>   \n      <snatMatchDestinationPort>any</snatMatchDestinationPort>\n\
                \    </natRule>\n  </natRules>\n</nat>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: edgeNatDelete
      description: |+
        Delete all NAT rules for the specified NSX Edge.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/nat/config/rules:
    post:
      tags:
      - 4.0 > edges
      summary: edgeNatRulesCreate
      description: "Add a NAT rule above a specific rule in the NAT rules table (using\n\
        **aboveRuleId** query parameter) or append NAT rules to the bottom.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.3.0 | Method\
        \ updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**,\
        \ **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**,\
        \ and **translatedPort** now supported in SNAT rules.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: aboveRuleId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <natRule>
                  <action>dnat</action>
                  <vnic>0</vnic>
                  <originalAddress>10.112.196.116</originalAddress>
                  <translatedAddress>172.16.1.10</translatedAddress>
                  <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                  <loggingEnabled>true</loggingEnabled>
                  <enabled>true</enabled>
                  <description>my comments</description>
                  <protocol>tcp</protocol>
                  <translatedPort>3389</translatedPort>
                  <originalPort>3389</originalPort>
                  <dnatMatchSourcePort>any</dnatMatchSourcePort>
                </natRule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/nat/config/rules/{ruleID}:
    put:
      tags:
      - 4.0 > edges
      summary: edgeNatRuleUpdate
      description: "Update the specified NAT rule.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.3.0 | Method updated. **dnatMatchSourceAddress**,\
        \ **snatMatchDestinationAddress**, **dnatMatchSourcePort**, **snatMatchDestinationPort**\
        \ parameters added. <br>**protocol**, **originalPort**, and **translatedPort**\
        \ now supported in SNAT rules.\n\n\nParameters:\n\nruleID: Specified rule\
        \ ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <natRule>
                  <action>dnat</action>
                  <vnic>0</vnic>
                  <originalAddress>10.112.196.116</originalAddress>
                  <translatedAddress>172.16.1.10</translatedAddress>
                  <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                  <loggingEnabled>true</loggingEnabled>
                  <enabled>true</enabled>
                  <description>my comments</description>
                  <protocol>tcp</protocol>
                  <translatedPort>3389</translatedPort>
                  <originalPort>3389</originalPort>
                  <dnatMatchSourcePort>any</dnatMatchSourcePort>
                </natRule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: edgeNatRuleDelete
      description: "Delete the specified NAT rule.\n\nParameters:\n\nruleID: Specified\
        \ rule ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config:
    get:
      tags:
      - 4.0 > edges
      summary: routingConfigRead
      description: "Retrieve routes.\n\n**Method history:**\n\nRelease | Modification\n\
        --------|-------------\n6.2.3 | Method updated. **isis** configuration section\
        \ removed. \n6.3.0 | Method updated. Parameter **defaultOriginate** removed\
        \ for logical router NSX Edges.  <br>Parameter **translateType7ToType5** added\
        \ to OSPF section. <br>Parameters **localASNumber** and **remoteASNumber**\
        \ added to BGP section.\n\n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: routingConfigUpdate
      description: "Configure NSX Edge global routing configuration, static routing,\
        \ and\ndynamic routing (OSPF and BGP).\n\n**Method history:**\n\nRelease |\
        \ Modification\n--------|-------------\n6.2.3 | Method updated. **isis** configuration\
        \ section removed. \n6.3.0 | Method updated. Parameter **defaultOriginate**\
        \ removed for logical router NSX Edges.  <br>Parameter **translateType7ToType5**\
        \ added to OSPF section. <br>Parameters **localASNumber** and **remoteASNumber**\
        \ added to BGP section.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<routing>\n  <routingGlobalConfig>\n    <routerId>1.1.1.1</routerId>\
                \   \n    <logging>   \n      <enable>false</enable>\n      <logLevel>info</logLevel>\n\
                \    </logging>\n    <ipPrefixes>   \n      <ipPrefix>\n        <name>a</name>\n\
                \        <ipAddress>192.168.10.0/24</ipAddress>\n      </ipPrefix>\n\
                \    </ipPrefixes>\n  </routingGlobalConfig>\n  <staticRouting>\n\
                \    <staticRoutes>   \n      <route>\n        <description>route1</description>\n\
                \        <vnic>0</vnic>\n        <network>3.1.1.0/22</network>\n \
                \       <nextHop>172.16.1.14</nextHop>\n        <mtu>1500</mtu>  \
                \ \n      </route>\n    </staticRoutes>\n    <defaultRoute>   \n \
                \   <description>defaultRoute</description>\n    <vnic>0</vnic>\n\
                \    <gatewayAddress>172.16.1.12</gatewayAddress>\n    <mtu>1500</mtu>\
                \   \n    </defaultRoute>\n  </staticRouting>\n  <ospf>    \n    <enabled>true</enabled>\
                \   \n    <forwardingAddress>192.168.10.2</forwardingAddress> \n \
                \   <protocolAddress>192.168.10.3</protocolAddress>\n    <ospfAreas>\n\
                \      <ospfArea>\n        <areaId>100</areaId> \n        <translateType7ToType5>true</translateType7ToType5>\n\
                \        <type>normal</type> \n        <authentication>    \n    \
                \      <type>password</type>   \n          <value>vmware123</value>\n\
                \        </authentication>\n      </ospfArea>\n    </ospfAreas>\n\
                \    <ospfInterfaces>\n      <ospfInterface>\n        <vnic>0</vnic>\n\
                \        <areaId>100</areaId>\n        <helloInterval>10</helloInterval>\
                \ \n        <deadInterval>40</deadInterval>  \n        <priority>128</priority>\
                \ \n        <cost>10</cost> \n        <mtuIgnore>false</mtuIgnore>\n\
                \      </ospfInterface>\n    </ospfInterfaces>\n    <redistribution>\n\
                \      <enabled>true</enabled>\n      <rules>\n        <rule>\n  \
                \        <prefixName>a</prefixName>   \n          <from>\n       \
                \     <ospf>false</ospf>       \n            <bgp>false</bgp>    \
                \    \n            <static>false</static> \n            <connected>true</connected>\n\
                \          </from>\n          <action>deny</action> \n        </rule>\n\
                \        <rule>\n          <prefixName>b</prefixName> \n         \
                \ <from>\n            <ospf>false</ospf>         \n            <bgp>true</bgp>\
                \           \n            <static>false</static>     \n          \
                \  <connected>false</connected>  \n          </from>\n          <action>permit</action>\
                \     \n        </rule>\n      </rules>\n    </redistribution>\n \
                \ </ospf> \n  <bgp>      \n    <enabled>true</enabled>     \n    <localAS>65535</localAS>\
                \          \n    <localASNumber>65535</localASNumber>          \n\
                \    <bgpNeighbours>\n      <bgpNeighbour>\n        <ipAddress>192.168.10.10</ipAddress>\
                \  \n        <forwardingAddress>192.168.1.10</forwardingAddress> \
                \  \n        <protocolAddress>192.168.1.11</protocolAddress>     \
                \ \n        <remoteAS>65500</remoteAS> \n        <remoteASNumber>65500</remoteASNumber>\
                \ \n        <weight>60</weight>  \n        <holdDownTimer>180</holdDownTimer>\
                \ \n        <keepAliveTimer>60</keepAliveTimer>     \n        <password>vmware123</password>\
                \   \n        <bgpFilters>              \n          <bgpFilter>\n\
                \            <direction>in</direction>  \n            <action>permit</action>\
                \ \n            <network>10.0.0.0/8</network> \n            <ipPrefixGe>17</ipPrefixGe>\
                \  \n            <ipPrefixLe>32</ipPrefixLe> \n          </bgpFilter>\n\
                \        </bgpFilters>\n      </bgpNeighbour>\n    </bgpNeighbours>\n\
                \    <redistribution>\n      <enabled>true</enabled> \n      <rules>\n\
                \        <rule>\n          <from>\n            <ospf>true</ospf> \n\
                \            <bgp>false</bgp> \n            <static>true</static>\n\
                \            <connected>false</connected> \n          </from>\n  \
                \        <action>deny</action> \n        </rule>\n      </rules>\n\
                \    </redistribution>\n  </bgp>\n</routing>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: routingConfigDelete
      description: |+
        Delete the routing config stored in the NSX Manager database and the
        default routes from the specified NSX Edge appliance.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/global:
    get:
      tags:
      - 4.0 > edges
      summary: routingGlobalConfigRead
      description: "Retrieve routing info from NSX Manager database (default route\n\
        settings, static route configurations).\n\n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: routingGlobalConfigUpdate
      description: |+
        Configure global route.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <routingGlobalConfig>
                  <routerId></routerId>
                  <ecmp></ecmp>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <ipPrefixes>
                    <ipPrefix>
                      <name></name>
                      <ipAddress></ipAddress>
                    </ipPrefix>
                  </ipPrefixes>
                </routingGlobalConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/static:
    get:
      tags:
      - 4.0 > edges
      summary: routingConfigStaticRead
      description: |+
        Read static and default routes.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: routingConfigStaticUpdate
      description: |+
        Configure static and default routes.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <staticRouting>
                  <staticRoutes>
                    <route>
                      <description></description>
                      <vnic></vnic>
                      <network></network>
                      <nextHop></nextHop>
                      <mtu></mtu>
                    </route>
                  </staticRoutes>
                  <defaultRoute>
                    <description></description>
                    <vnic></vnic>
                    <gatewayAddress></gatewayAddress>
                    <mtu></mtu>
                  </defaultRoute>
                </staticRouting>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: routingConfigStaticDelete
      description: |+
        Delete both static and default routing config stored in the NSX
        Manager database.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/ospf:
    get:
      tags:
      - 4.0 > edges
      summary: routingOSPFRead
      description: "Retrieve OSPF configuration.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method updated. **isis**\
        \ configuration section removed. \n6.3.0 | Method updated. Parameter **defaultOriginate**\
        \ removed for logical router NSX Edges.  <br>Parameter **translateType7ToType5**\
        \ added to OSPF section. \n\n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: routingOSPFUpdate
      description: "Configure OSPF.\n\n**Method history:**\n\nRelease | Modification\n\
        --------|-------------\n6.2.3 | Method updated. **isis** configuration section\
        \ removed. \n6.3.0 | Method updated. Parameter **defaultOriginate** removed\
        \ for logical router NSX Edges.  <br>Parameter **translateType7ToType5** added\
        \ to OSPF section. \n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ospf>
                  <enabled></enabled>
                  <ospfAreas>
                    <ospfArea>
                      <areaId></areaId>
                      <translateType7ToType5></translateType7ToType5>
                      <type></type>
                      <authentication>
                        <type></type>
                        <value></value>
                      </authentication>
                    </ospfArea>
                  </ospfAreas>
                  <ospfInterfaces>
                    <ospfInterface>
                      <vnic></vnic>
                      <areaId></areaId>
                      <helloInterval></helloInterval>
                      <deadInterval></deadInterval>
                      <priority></priority>
                      <cost></cost>
                    </ospfInterface>
                  </ospfInterfaces>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </ospf>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: routingOSPFDelete
      description: |+
        Delete OSPF routing.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/routing/config/bgp:
    get:
      tags:
      - 4.0 > edges
      summary: routingBGPRead
      description: "Retrieve BGP configuration.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method updated. **isis**\
        \ configuration section removed. \n6.3.0 | Method updated. Parameter **defaultOriginate**\
        \ removed for logical router NSX Edges.  <br>Parameters **localASNumber**\
        \ and **remoteASNumber** added to BGP section.\n\n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: routingBGPUpdate
      description: "Configure BGP.\n\n**Method history:**\n\nRelease | Modification\n\
        --------|-------------\n6.2.3 | Method updated. **isis** configuration section\
        \ removed. \n6.3.0 | Method updated. Parameter **defaultOriginate** removed\
        \ for logical router NSX Edges. <br>Parameters **localASNumber** and **remoteASNumber**\
        \ added to BGP section.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <bgp>
                  <enabled></enabled>
                  <localAS></localAS>
                  <localASNumber></localASNumber>
                  <bgpNeighbours>
                    <bgpNeighbour>
                      <ipAddress></ipAddress>
                      <remoteAS></remoteAS>
                      <remoteASNumber></remoteASNumber>
                      <weight></weight>
                      <holdDownTimer></holdDownTimer>
                      <keepAliveTimer></keepAliveTimer>
                      <password></password>
                      <bgpFilters>
                        <bgpFilter>
                          <direction></direction>
                          <action></action>
                          <network></network>
                          <ipPrefixGe></ipPrefixGe>
                          <ipPrefixLe></ipPrefixLe>
                        </bgpFilter>
                      </bgpFilters>
                    </bgpNeighbour>
                  </bgpNeighbours>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </bgp>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: routingBGPDelete
      description: |+
        Delete BGP Routing

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/bridging/config:
    get:
      tags:
      - 4.0 > edges
      summary: bridgingRead
      description: |+
        Retrieve bridge configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: bridingUpdate
      description: |+
        Configure a bridge.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <bridges>
                  <version></version>
                  <enabled></enabled>
                  <bridge>
                    <name></name>
                    <virtualWire></virtualWire>
                    <dvportGroup></dvportGroup>
                  </bridge>
                </bridges>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: bridgingDelete
      description: |+
        Delete bridges.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config:
    get:
      tags:
      - 4.0 > edges
      summary: loadBalancerRead
      description: |+
        Get load balancer configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: loadBalancerConfig
      description: "Configure load balancer.\n\nThe input contains five parts: application\
        \ profile, virtual server,\npool, monitor and application rule.\n\nFor the\
        \ data path to work, you need to add firewall rules to allow\nrequired traffic\
        \ as per the load balancer configuration.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <loadBalancer>
                  <enabled></enabled>
                  <enableServiceInsertion></enableServiceInsertion>
                  <accelerationEnabled></accelerationEnabled>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <virtualServer>
                    <virtualServerId></virtualServerId>
                    <name></name>
                    <description></description>
                    <enabled></enabled>
                    <ipAddress></ipAddress>
                    <protocol></protocol>
                    <port></port>
                    <connectionLimit></connectionLimit>
                    <connectionRateLimit></connectionRateLimit>
                    <applicationProfileId></applicationProfileId>
                    <defaultPoolId></defaultPoolId>
                    <enableServiceInsertion></enableServiceInsertion>
                    <accelerationEnabled></accelerationEnabled>
                    <applicationRuleId></applicationRuleId>
                  </virtualServer>
                  <applicationProfile>
                    <applicationProfileId></applicationProfileId>
                    <name></name>
                    <insertXForwardedFor></insertXForwardedFor>
                    <sslPassthrough></sslPassthrough>
                    <template></template>
                    <persistence>
                      <method></method>
                      <cookieName></cookieName>
                      <cookieMode></cookieMode>
                    </persistence>
                    <serverSslEnabled></serverSslEnabled>
                    <clientSsl>
                      <clientAuth></clientAuth>
                      <serviceCertificate></serviceCertificate>
                    </clientSsl>
                  </applicationProfile>
                  <pool>
                    <poolId></poolId>
                    <name></name>
                    <description></description>
                    <transparent></transparent>
                    <algorithm></algorithm>
                    <monitorId></monitorId>
                    <member>
                      <memberId></memberId>
                      <ipAddress></ipAddress>
                      <weight></weight>
                      <port></port>
                      <monitorPort></monitorPort>
                      <minConn></minConn>
                      <maxConn></maxConn>
                      <name></name>
                    </member>
                  </pool>
                  <monitor>
                    <monitorId></monitorId>
                    <type></type>
                    <interval></interval>
                    <timeout></timeout>
                    <maxRetries></maxRetries>
                    <method></method>
                    <url></url>
                    <name></name>
                  </monitor>
                  <applicationRule>
                    <name></name>
                    <script></script>
                  </applicationRule>
                </loadBalancer>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: loadBalancerDelete
      description: |+
        Delete load balancer configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationprofiles:
    get:
      tags:
      - 4.0 > edges
      summary: applicationProfilesRead
      description: |+
        Retrieve all application profiles on the specified Edge.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: applicationProfilesCreate
      description: |+
        Add an application profile.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationProfile>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                </applicationProfile>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: applicationProfilesDelete
      description: |+
        Delete all application profiles on the specified Edge.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationprofiles/{appProfileID}:
    get:
      tags:
      - 4.0 > edges
      summary: applicationProfileRead
      description: "Retrieve an application profile.\n\nParameters:\n\nappProfileID:\
        \ Specified application profile.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: appProfileID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: applicationProfileUpdate
      description: "Modify an application profile.\n\nParameters:\n\nappProfileID:\
        \ Specified application profile.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: appProfileID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationProfile>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                </applicationProfile>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: applicationProfileDelete
      description: "Delete an application profile.\n\nParameters:\n\nappProfileID:\
        \ Specified application profile.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: appProfileID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationrules:
    get:
      tags:
      - 4.0 > edges
      summary: appRulesRead
      description: |+
        Retrieve all application rules.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: appRulesCreate
      description: |+
        Add an application rule.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: appRulesDelete
      description: |+
        Delete all application rules.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/applicationrules/{appruleID}:
    get:
      tags:
      - 4.0 > edges
      summary: appRuleRead
      description: "Retrieve an application rule.\n\nParameters:\n\nappruleID: Specified\
        \ application rule.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: appruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: appRuleUpdate
      description: "Modify an application rule.\n\nParameters:\n\nappruleID: Specified\
        \ application rule.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: appruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: appRuleDelete
      description: "Delete an application rule.\n\nParameters:\n\nappruleID: Specified\
        \ application rule.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: appruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/monitors:
    get:
      tags:
      - 4.0 > edges
      summary: lbMonitorsRead
      description: |+
        Retrieve all load balancer monitors.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: lbMonitorsCreate
      description: |+
        Add a load balancer monitor.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <monitor>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: lbMonitorsDelete
      description: |+
        Delete all load balancer monitors.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/monitors/{monitorID}:
    get:
      tags:
      - 4.0 > edges
      summary: lbMonitorRead
      description: "Retrieve a load balancer monitor.\n\nParameters:\n\nmonitorID:\
        \ Specified monitor.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: monitorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: lbMonitorUpdate
      description: "Modify a load balancer monitor.\n\nParameters:\n\nmonitorID: Specified\
        \ monitor.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: monitorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <monitor>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: lbMonitorDelete
      description: "Delete a load balancer monitor.\n\nParameters:\n\nmonitorID: Specified\
        \ monitor.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: monitorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/virtualservers:
    get:
      tags:
      - 4.0 > edges
      summary: virtualServersRead
      description: |+
        Retrieve all virtual servers.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: virtualServersCreate
      description: "Add a virtual server.\n\nYou can add an NSX Edge internal or uplink\
        \ interface as a virtual\nserver.\n\nParameter |  Description | Comments\n\
        ---|---|---\n **name**      |Name of virtual server.|Required.\n **description**\
        \     |Description of virtual server.|Optional.\n **enabled**    |Whether\
        \ the virtual server is enabled.|Optional. Boolean. Options are *true* or\
        \ *false*. Default is *true*.\n **ipAddress**      |IP address that the load\
        \ balancer is listening on. |Required. A valid NSX Edge vNic IP address (IPv4\
        \ or IPv6).\n **protocol**      |Virtual server protocol.|Required. Options\
        \ are: *HTTP*, *HTTPS*, *TCP*, *UDP*.\n **port**      |Port number or port\
        \ range.|Required. Port number such as *80*, port range such as *80,443* or\
        \ *1234-1238*, or a combination such as *443,6000-7000*.\n **connectionLimit**\
        \      |Maximum concurrent connections.|Optional. Long.\n **connectionRateLimit**\
        \      |Maximum incoming new connection requests per second.|Optional. Long.\n\
        \ **defaultPoolId**      |Default backend server pool identifier.|Optional.\n\
        \ **applicationProfileId**      |Application profile identifier.|Optional.\n\
        \ **accelerationEnabled**      |Use the faster L4 load balancer  engine rather\
        \ than L7 load  balancer engine.|Optional. Boolean. Options are *true* or\
        \ *false*. If a virtual server configuration such as application rules, HTTP\
        \ type, or cookie persistence, is using the L7 load balancer engine, then\
        \ the L7 load balancer engine is used, even if **accelerationEnabled** is\
        \ not set to true.\n **applicationRuleId**      |Application rule identifier\
        \ list.|Optional. Each item should be a valid **applicationRuleId**.\n\n\n\
        Parameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<virtualServer>\n  <name>http_vip_2</name>\n  <description>http\
                \ virtualServer 2</description>\n  <enabled>true</enabled>\n  <ipAddress>10.117.35.172</ipAddress>\n\
                \  <protocol>http</protocol>\n  <port>443,6000-7000</port>\n  <connectionLimit>123</connectionLimit>\n\
                \  <connectionRateLimit>123</connectionRateLimit>\n  <applicationProfileId>applicationProfile-1</applicationProfileId>\n\
                \  <defaultPoolId>pool-1</defaultPoolId>\n  <enableServiceInsertion>false</enableServiceInsertion>\n\
                \  <accelerationEnabled>true</accelerationEnabled>\n</virtualServer>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: virtualServersDelete
      description: |+
        Delete all virtual servers.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/virtualservers/{virtualserverID}:
    get:
      tags:
      - 4.0 > edges
      summary: virtualServerRead
      description: "Retrieve details for the specified virtual server.\n\nParameters:\n\
        \nvirtualserverID: Specified virtual server ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: virtualserverID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: virtualServerDelete
      description: "Delete the specified virtual server.\n\nParameters:\n\nvirtualserverID:\
        \ Specified virtual server ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: virtualserverID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/pools:
    get:
      tags:
      - 4.0 > edges
      summary: poolsRead
      description: |+
        Get all server pools on the specified NSX Edge.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: poolsCreate
      description: |+
        Add a load balancer server pool to the Edge.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method updated. Member **condition** can be set to *drain*.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <pool>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <port></port>
                    <minConn></minConn>
                    <maxConn></maxConn>
                    <name></name>
                    <monitorPort></monitorPort>
                  </member>
                </pool>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: poolsDelete
      description: |+
        Delete all server pools configured on the specified NSX Edge.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/pools/{poolID}:
    get:
      tags:
      - 4.0 > edges
      summary: poolRead
      description: "Retrieve information about the specified server pool.\n\nParameters:\n\
        \npoolID: Specified pool ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: poolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: poolUpdate
      description: "Update the specified server pool.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.3.0 | Method updated. Member **condition**\
        \ can be set to *drain*.\n\n\nParameters:\n\npoolID: Specified pool ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: poolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <pool>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <monitorPort></monitorPort>
                    <port></port>
                    <maxConn></maxConn>
                    <minConn></minConn>
                    <condition>enabled</condition>
                    <name></name>
                  </member>
                </pool>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: poolDelete
      description: "Delete the specified server pool.\n\nParameters:\n\npoolID: Specified\
        \ pool ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: poolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/config/members/{memberID}:
    post:
      tags:
      - 4.0 > edges
      summary: lbMemberCondToggle
      description: "Update enabled status of the specified member.\n\nParameters:\n\
        \nmemberID: Member ID.\n\n"
      parameters:
      - name: enable
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: memberID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/statistics:
    get:
      tags:
      - 4.0 > edges
      summary: lbStatisticsRead
      description: |+
        Retrieve load balancer statistics.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/loadbalancer/acceleration:
    post:
      tags:
      - 4.0 > edges
      summary: undefined
      description: |2+


        Parameters:

      parameters:
      - name: enable
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dns/config:
    get:
      tags:
      - 4.0 > edges
      summary: edgeDnsRead
      description: |+
        Retrieve DNS configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: edgeDnsUpdate
      description: |+
        Configure DNS servers.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <dns>
                  <version>2</version>
                  <enabled>true</enabled>
                  <cacheSize>128</cacheSize>
                  <listeners>
                    <ipAddress>192.168.100.1</ipAddress>
                    <ipAddress>192.168.100.2</ipAddress>
                  </listeners>
                  <dnsViews>
                    <dnsView>
                      <viewId>view-0</viewId>
                      <name>vsm-default-view</name>
                      <enabled>true</enabled>
                      <viewMatch>
                        <ipAddress>any</ipAddress>
                        <vnic>any</vnic>
                      </viewMatch>
                      <recursion>false</recursion>
                      <forwarders>
                        <ipAddress>10.117.0.1</ipAddress>
                      </forwarders>
                    </dnsView>
                  </dnsViews>
                  <logging>
                    <enable>true</enable>
                    <logLevel>info</logLevel>
                  </logging>
                </dns>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: edgeDnsDelete
      description: |+
        Delete DNS configuration

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dns/statistics:
    get:
      tags:
      - 4.0 > edges
      summary: edgeDnsStatsRead
      description: |+
        Get DNS server statistics

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config:
    get:
      tags:
      - 4.0 > edges
      summary: dhcpRead
      description: |+
        Get DHCP configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: dhcpUpdate
      description: |+
        Configure DHCP service.

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. DHCP options added.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<dhcp>\n  <enabled>true</enabled>\n  <staticBindings>\n  \
                \  <staticBinding> \n      <macAddress>12:34:56:78:90:AB</macAddress>\
                \ \n      <vmId>vm-111</vmId> \n      <vnicId>1</vnicId>\n      <hostname>abcd</hostname>\n\
                \      <ipAddress>192.168.4.2</ipAddress> \n      <subnetMask>255.255.255.0</subnetMask>\
                \ \n      <defaultGateway>192.168.4.1</defaultGateway> \n      <domainName>eng.vmware.com</domainName>\
                \ \n      <primaryNameServer>192.168.4.1</primaryNameServer> \n  \
                \    <secondaryNameServer>4.2.2.4</secondaryNameServer> \n      <leaseTime>infinite</leaseTime>\
                \ \n      <autoConfigureDNS>true</autoConfigureDNS> \n    </staticBinding>\n\
                \  </staticBindings>\n  <ipPools>\n    <ipPool>\n      <ipRange>192.168.4.192-192.168.4.220</ipRange>\
                \ \n      <defaultGateway>192.168.4.1</defaultGateway> \n      <subnetMask>255.255.255.0</subnetMask>\
                \ \n      <domainName>eng.vmware.com</domainName> \n      <primaryNameServer>192.168.4.1</primaryNameServer>\
                \ \n      <secondaryNameServer>4.2.2.4</secondaryNameServer> \n  \
                \    <leaseTime>3600</leaseTime> \n      <autoConfigureDNS>true</autoConfigureDNS>\
                \ \n      <nextServer>11.11.18.105</nextServer>  \n      <dhcpOptions>\
                \ \n        <option121> \n          <staticRoute> \n            <destinationSubnet>1.1.1.4/30</destinationSubnet>\
                \  \n            <router>10.10.10.254</router> \n          </staticRoute>\
                \  \n          <staticRoute> \n            <destinationSubnet>2.2.2.4/30</destinationSubnet>\
                \  \n            <router>10.10.10.210</router> \n          </staticRoute>\
                \ \n        </option121>  \n        <option66>boot.tftp.org</option66>\
                \  \n        <option67>/opt/tftpServer</option67>  \n        <option150>\
                \ \n          <server>10.10.10.1</server>  \n          <server>100.100.100.1</server>\
                \ \n        </option150>  \n        <option26>2048</option26>  \n\
                \        <other> \n          <code>80</code>  \n          <value>2F766172</value>\
                \ \n        </other>  \n        <other> \n          <code>85</code>\
                \  \n          <value>01010101</value> \n        </other> \n     \
                \ </dhcpOptions> \n    </ipPool>\n  </ipPools>\n  <logging> \n   \
                \ <enable>false</enable> \n    <logLevel>info</logLevel> \n  </logging>\n\
                </dhcp>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: dhcpDelete
      description: "Delete the DHCP configuration, restoring it to factory default.\n\
        \n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/ippools:
    post:
      tags:
      - 4.0 > edges
      summary: dhcpPoolCreate
      description: |+
        Add an IP pool to the DHCP configuration. Returns a pool ID within
        a Location HTTP header.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. DHCP options added.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<ipPool>\n  <ipRange>192.168.5.2-192.168.5.20</ipRange>\n\
                \  <defaultGateway>192.168.5.1</defaultGateway>\n  <domainName>eng.vmware.com</domainName>\n\
                \  <primaryNameServer>1.2.3.4</primaryNameServer>\n  <secondaryNameServer>4.3.2.1</secondaryNameServer>\n\
                \  <leaseTime>3600</leaseTime>\n  <autoConfigureDNS>true</autoConfigureDNS>\n\
                \  <nextServer>11.11.18.105</nextServer>  \n  <dhcpOptions> \n   \
                \ <option121> \n      <staticRoute> \n        <destinationSubnet>1.1.1.4/30</destinationSubnet>\
                \  \n        <router>10.10.10.254</router> \n      </staticRoute>\
                \  \n      <staticRoute> \n        <destinationSubnet>2.2.2.4/30</destinationSubnet>\
                \  \n        <router>10.10.10.210</router> \n      </staticRoute>\
                \ \n    </option121>  \n    <option66>boot.tftp.org</option66>  \n\
                \    <option67>/opt/tftpServer</option67>  \n    <option150> \n  \
                \    <server>10.10.10.1</server>  \n      <server>100.100.100.1</server>\
                \ \n    </option150>  \n    <option26>2048</option26>  \n    <other>\
                \ \n      <code>80</code>  \n      <value>2F766172</value> \n    </other>\
                \  \n    <other> \n      <code>85</code>  \n      <value>01010101</value>\
                \ \n    </other> \n  </dhcpOptions> \n</ipPool>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/ippools/{poolID}:
    delete:
      tags:
      - 4.0 > edges
      summary: dhcpPoolIDDelete
      description: "Delete a pool specified by pool ID\n\nParameters:\n\npoolID: Specified\
        \ DHCP IP pool\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: poolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/bindings:
    post:
      tags:
      - 4.0 > edges
      summary: dhcpStaticBindingCreate
      description: |+
        Append a static-binding to DHCP config. A static-binding ID is
        returned within a Location HTTP header.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. DHCP options added.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "<staticBinding>\n  <vmId></vmId>\n  <vnicId></vnicId>\n  <hostname></hostname>\n\
                \  <ipAddress></ipAddress>\n  <defaultGateway></defaultGateway>\n\
                \  <domainName></domainName>\n  <primaryNameServer></primaryNameServer>\n\
                \  <secondaryNameServer></secondaryNameServer>\n  <leaseTime></leaseTime>\n\
                \  <autoConfigureDNS></autoConfigureDNS>\n  <nextServer>11.11.18.105</nextServer>\
                \  \n  <dhcpOptions> \n    <option121> \n      <staticRoute> \n  \
                \      <destinationSubnet>1.1.1.4/30</destinationSubnet>  \n     \
                \   <router>10.10.10.254</router> \n      </staticRoute>  \n     \
                \ <staticRoute> \n        <destinationSubnet>2.2.2.4/30</destinationSubnet>\
                \  \n        <router>10.10.10.210</router> \n      </staticRoute>\
                \ \n    </option121>  \n    <option66>boot.tftp.org</option66>  \n\
                \    <option67>/opt/tftpServer</option67>  \n    <option150> \n  \
                \    <server>10.10.10.1</server>  \n      <server>100.100.100.1</server>\
                \ \n    </option150>  \n    <option26>2048</option26>  \n    <other>\
                \ \n      <code>80</code>  \n      <value>2F766172</value> \n    </other>\
                \  \n    <other> \n      <code>85</code>  \n      <value>01010101</value>\
                \ \n    </other> \n  </dhcpOptions> \n</staticBinding>\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/bindings/{bindingID}:
    delete:
      tags:
      - 4.0 > edges
      summary: dhcpStaticBindingIDDelete
      description: "Delete the static-binding by ID\n\nParameters:\n\nbindingID: Specified\
        \ static-binding ID\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: bindingID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/config/relay:
    get:
      tags:
      - 4.0 > edges
      summary: dhcpRelayRead
      description: |+
        Query DHCP relay

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: dhcpRelayUpdate
      description: |+
        Configure DHCP relay

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <relay>
                  <relayServer>
                    <groupingObjectId></groupingObjectId>
                    <groupingObjectId></groupingObjectId>
                    <ipAddress></ipAddress>
                    <fqdn></fqdn>
                  </relayServer>
                  <relayAgents>
                    <relayAgent>
                      <vnicIndex></vnicIndex>
                      <giAddress></giAddress>
                    </relayAgent>
                  </relayAgents>
                </relay>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: dhcpRelayDelete
      description: |+
        Delete DHCP relay configuration

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/dhcp/leaseInfo:
    get:
      tags:
      - 4.0 > edges
      summary: dhcpLeaseRead
      description: |+
        Get DHCP lease information.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/highavailability/config:
    get:
      tags:
      - 4.0 > edges
      summary: highAvailabilityRead
      description: |+
        Get high availability configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: highAvailabilityCreate
      description: |+
        Configure high availability.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <highAvailability>
                  <vnic></vnic>
                  <ipAddresses>
                    <ipAddress></ipAddress>
                  </ipAddresses>
                  <declareDeadTime></declareDeadTime>
                  <enabled></enabled>
                </highAvailability>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: highAvailabilityDelete
      description: |+
        Delete high availability configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/syslog/config:
    get:
      tags:
      - 4.0 > edges
      summary: syslogRead
      description: |+
        Retrieve syslog servers information.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: syslogUpdate
      description: |+
        Configure syslog servers.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <syslog>
                  <protocol></protocol>
                  <serverAddresses>
                    <ipAddress></ipAddress>
                  </serverAddresses>
                </syslog>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: syslogDelete
      description: |+
        Delete syslog servers.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config:
    get:
      tags:
      - 4.0 > edges
      summary: sslVPNRead
      description: |+
        Retrieve SSL VPN details.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: sslVPNUpdate
      description: |+
        Update the entire SSL VPN configuration to the specified NSX Edge in a single call.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: sslVPNCreate
      description: |+
        Enable or disable SSL VPN on the NSX Edge appliance.


        Parameters:

      parameters:
      - name: enableService
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: sslVPNDelete
      description: |+
        Delete the SSL VPN configurations on the Edge.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/server:
    get:
      tags:
      - 4.0 > edges
      summary: serverSettingsRead
      description: |+
        Retrieve server settings.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: serverSettingsUpdate
      description: |+
        Update server settings.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <serverSettings>
                  <serverAddresses>
                    <ipAddress>10.112.243.109</ipAddress>
                  </serverAddresses>
                  <port>443</port>
                  <certificateId>certificate-1</certificateId>
                  <cipherList>
                    <cipher>AES128-SHA</cipher>
                    <cipher>AES256-SHA</cipher>
                  </cipherList>
                </serverSettings>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/privatenetworks:
    get:
      tags:
      - 4.0 > edges
      summary: privateNetworksRead
      description: |+
        Retrieve all private network profiles in the SSL VPN instance.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: privateNetworksUpdate
      description: "Update all private network configs of NSX Edge with the given\
        \ list\nof private network configs. If the config is present, it is\nupdated;\
        \ otherwise, a new private network config is created.\nExisting configs not\
        \ included in the call body are deleted.\n\n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: privateNetworksCreate
      description: |+
        Configure a private network.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <privateNetwork>
                  <description></description>
                  <network></network>
                  <sendOverTunnel>
                    <ports></ports>
                    <optimize></optimize>
                  </sendOverTunnel>
                  <enabled></enabled>
                </privateNetwork>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: privateNetworksDelete
      description: |+
        Delete all private networks from the SSL VPN instance.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/privatenetworks/{networkID}:
    get:
      tags:
      - 4.0 > edges
      summary: privateNetworkRead
      description: "Retrieve the specified private network in the SSL VPN service.\n\
        \n\nParameters:\n\nnetworkID: Specified private network\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: networkID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: privateNetworkUpdate
      description: "Update the specified private network in the SSL VPN service.\n\
        \n\nParameters:\n\nnetworkID: Specified private network\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: networkID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <privateNetwork>
                  <description></description>
                  <network></network>
                  <sendOverTunnel>
                    <ports></ports>
                    <optimize></optimize>
                  </sendOverTunnel>
                  <enabled></enabled>
                </privateNetwork>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: privateNetworkDelete
      description: "Delete private network\n\nParameters:\n\nnetworkID: Specified\
        \ private network\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: networkID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/ippools:
    get:
      tags:
      - 4.0 > edges
      summary: netExtipPoolsRead
      description: |+
        Retrieve all IP pools configured on SSL VPN.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: netExtipPoolsUpdate
      description: "Update all IP pools with the given list of pools. If the pool\
        \ is\npresent, it is updated; otherwise, a new pool is created. Existing\n\
        pools not in the body are deleted.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: netExtipPoolsCreate
      description: |+
        Create an IP pool.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: netExtipPoolsDelete
      description: |+
        Delete all IP pools configured on SSL VPN

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/ippools/{ippoolID}:
    get:
      tags:
      - 4.0 > edges
      summary: netExtipPoolRead
      description: "Retrieve details of specified IP pool.\n\nParameters:\n\nippoolID:\
        \ Specified IP pool ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ippoolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: netExtipPoolUpdate
      description: "Update specified IP pool.\n\nParameters:\n\nippoolID: Specified\
        \ IP pool ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ippoolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipAddressPool>
                  <description>description</description>
                  <ipRange>10.112.243.11-10.112.243.57</ipRange>
                  <netmask>255.0.0.0</netmask>
                  <gateway>192.168.1.1</gateway>
                  <primaryDns>192.168.10.1</primaryDns>
                  <secondaryDns>4.2.2.2</secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer>10.112.243.201</winsServer>
                  <enabled>true</enabled>
                </ipAddressPool>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: netExtipPoolDelete
      description: "Delete the specified IP pool.\n\nParameters:\n\nippoolID: Specified\
        \ IP pool ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ippoolID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/clientconfig:
    get:
      tags:
      - 4.0 > edges
      summary: clientConfigRead
      description: |+
        Retrieve client configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: clientConfigUpdate
      description: "Set advanced parameters for full access client configurations,\n\
        such as whether client should auto-reconnect in case of network\nfailures\
        \ or network unavailability, or whether the client should be\nuninstalled\
        \ after logout.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clientConfiguration>
                  <autoReconnect>true</autoReconnect>
                  <fullTunnel>
                    <excludeLocalSubnets>false</excludeLocalSubnets>
                    <gatewayIp>10.112.243.11</gatewayIp>
                  </fullTunnel>
                  <upgradeNotification>false</upgradeNotification>
                </clientConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/installpackages:
    get:
      tags:
      - 4.0 > edges
      summary: installPackagesRead
      description: |+
        Retrieve information about all installation packages.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: installPackagesUpdate
      description: "Update all installation packages with the given list. If the\n\
        package is present, it is updated; otherwise a new installation\npackage is\
        \ created. Existing packages not included in the body are\ndeleted.\n\n\n\
        Parameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: installPackagesCreate
      description: "Creates setup executables (installers) for full access network\n\
        clients. These setup binaries are later downloaded by remote\nclients and\
        \ installed on their systems. The primary parameters\nneeded to configure\
        \ this setup are hostname of the gateway, and\nits port and a profile name\
        \ which is shown to the user to identify\nthis connection. Administrator can\
        \ also set few other parameters\nsuch as whether to automatically start the\
        \ application on windows\nlogin, hide the system tray icon etc.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clientInstallPackage>
                  <profileName></profileName>
                  <gatewayList>
                    <gateway>
                      <hostName></hostName>
                      <port></port>
                    </gateway>
                  </gatewayList>
                  <startClientOnLogon></startClientOnLogon>
                  <hideSystrayIcon></hideSystrayIcon>
                  <rememberPassword></rememberPassword>
                  <silentModeOperation></silentModeOperation>
                  <silentModeInstallation></silentModeInstallation>
                  <hideNetworkAdaptor></hideNetworkAdaptor>
                  <createDesktopIcon></createDesktopIcon>
                  <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                  <createLinuxClient></createLinuxClient>
                  <createMacClient></createMacClient>
                  <description></description>
                  <enabled></enabled>
                </clientInstallPackage>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: installPackagesDelete
      description: |+
        Delete all client installation packages.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/client/networkextension/installpackages/{packageID}:
    get:
      tags:
      - 4.0 > edges
      summary: installPackageRead
      description: "Get information about the specified installation package.\n\n\n\
        Parameters:\n\npackageID: Specified installation package ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: packageID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: installPackageUpdate
      description: "Modify the specified installation package.\n\nParameters:\n\n\
        packageID: Specified installation package ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: packageID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <clientInstallPackage>
                  <profileName></profileName>
                  <gatewayList>
                    <gateway>
                      <hostName></hostName>
                      <port></port>
                    </gateway>
                  </gatewayList>
                  <startClientOnLogon></startClientOnLogon>
                  <hideSystrayIcon></hideSystrayIcon>
                  <rememberPassword></rememberPassword>
                  <silentModeOperation></silentModeOperation>
                  <silentModeInstallation></silentModeInstallation>
                  <hideNetworkAdaptor></hideNetworkAdaptor>
                  <createDesktopIcon></createDesktopIcon>
                  <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                  <createLinuxClient></createLinuxClient>
                  <createMacClient></createMacClient>
                  <description></description>
                  <enabled></enabled>
                </clientInstallPackage>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: installPackageDelete
      description: "Delete the specified installation package.\n\nParameters:\n\n\
        packageID: Specified installation package ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: packageID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/layout:
    get:
      tags:
      - 4.0 > edges
      summary: layoutRead
      description: |+
        Retrieve layout configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: layoutUpdate
      description: |+
        Update the portal layout.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <layout>
                  <portalTitle></portalTitle>
                  <companyName></companyName>
                  <logoBackgroundColor></logoBackgroundColor>
                  <titleColor></titleColor>
                  <topFrameColor></topFrameColor>
                  <menuBarColor></menuBarColor>
                  <rowAlternativeColor></rowAlternativeColor>
                  <bodyColor></bodyColor>
                  <rowColor></rowColor>
                </layout>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/layout/images/{imageType}:
    post:
      tags:
      - 4.0 > edges
      summary: layoutIconsUpload
      description: "Upload images for use with SSL VPN portal and client.\n\nYou can\
        \ upload a logo to use in the SSL VPN portal, and a banner\nand icons to use\
        \ in the SSL VPN client.\n\nYou must upload the image files using the form-data\
        \ content-type.\nConsult the documentation for your REST client for instructions.\
        \ \n\nDo not set other Content-type headers in your request, for\nexample,\
        \ *Content-type: application/xml*.\n\nWhen you upload a file as form-data,\
        \ you must provide a **key**\nand a **value** for the file. See the table\
        \ below for the\nform-data **key** to use for each image type. The **value**\
        \ is the\npath to the image file.\n\nImage Type | form-data key | Image format\
        \ requirements\n----|------|----\nportallogo | layoutFile | n/a\nphatbanner\
        \ | banner | bmp\nconnecticon | icon | ico\ndisconnecticon | icon | ico\n\
        erroricon | icon | ico\ndesktopicon | icon | ico\n\n**Example using curl**\n\
        \n```\n/usr/bin/curl -v -k -i -F layoutFile=@/tmp/portalLogo.jpg -H 'Authorization:\
        \ Basic YWRtaW46ZGXXXXXXXX==' \nhttps://192.168.110.42/api/4.0/edges/edge-3/sslvpn/config/layout/images/portallogo\n\
        ```\n\n\nParameters:\n\nimageType: Type of image to upload. Choice of *portallogo*,\
        \ *phatbanner*,\n*connecticon*, *disconnecticon*, *desktopicon*, or *erroricon*.\n\
        \n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: imageType
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/localserver/users:
    put:
      tags:
      - 4.0 > edges
      summary: usersUpdate
      description: |+
        Modify the portal user specified in the request body.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: usersCreate
      description: |+
        Add a new portal user.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: usersDelete
      description: |+
        Delete all users on the specifed SSL VPN instance

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/localserver/users/{userID}:
    get:
      tags:
      - 4.0 > edges
      summary: userRead
      description: "Get information about the specified user.\n\nParameters:\n\nuserID:\
        \ User ID.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: userDelete
      description: "Delete the specified user.\n\nParameters:\n\nuserID: User ID.\n\
        \n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/settings:
    get:
      tags:
      - 4.0 > edges
      summary: authSettingsRead
      description: |+
        Retrieve information about authentication settings.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: authSettingsUpdate
      description: "Update authentication settings for remote users. Specify\nusername/password\
        \ authentication, active directory, ldap, radius,\nclient certificate based\
        \ authentication.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <authenticationConfig>
                  <passwordAuthentication>
                  <authenticationTimeout></authenticationTimeout>
                    <primaryAuthServers>
                      <com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <enableSsl></enableSsl>
                        <searchBase></searchBase>
                        <bindDomainName></bindDomainName>
                        <bindPassword></bindPassword>
                        <loginAttributeName></loginAttributeName>
                        <searchFilter></searchFilter>
                        <enabled></enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <secret></secret>
                        <nasIp></nasIp>
                        <retryCount></retryCount>
                      </com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                        <enabled></enabled>
                        <passwordPolicy>
                          <minLength></minLength>
                          <maxLength></maxLength>
                          <minAlphabets></minAlphabets>
                          <minDigits></minDigits>
                          <minSpecialChar></minSpecialChar>
                          <allowUserIdWithinPassword></allowUserIdWithinPassword>
                          <passwordLifeTime></passwordLifeTime>
                          <expiryNotification></expiryNotification>
                        </passwordPolicy>
                        <accountLockoutPolicy>
                          <retryCount></retryCount>
                          <retryDuration></retryDuration>
                          <lockoutDuration></lockoutDuration>
                        </accountLockoutPolicy>
                      </com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                        <timeOut></timeOut>
                        <sourceIp></sourceIp>
                      </com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                    </primaryAuthServers>
                    <secondaryAuthServer>
                      <com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                        <ip>1.1.1.1</ip>
                        <port>90</port>
                        <timeOut>20</timeOut>
                        <enableSsl>false</enableSsl>
                        <searchBase>searchbasevalue</searchBase>
                        <bindDomainName>binddnvalue</bindDomainName>
                        <bindPassword>password</bindPassword>
                        <loginAttributeName>cain</loginAttributeName>
                        <searchFilter>found</searchFilter>
                        <terminateSessionOnAuthFails>false</terminateSessionOnAuthFails>
                        <enabled>true</enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                    </secondaryAuthServer>
                  </passwordAuthentication>
                </authenticationConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/auth/settings/rsaconfigfile:
    post:
      tags:
      - 4.0 > edges
      summary: rsaConfigCreate
      description: |+
        Upload RSA config file (See "Generate the Authentication Manager
        Configuration File" section of the RSA Authentication Manager
        Administrator's guide for instructions on how to configure and
        download the RSA config file from RSA Authentication Manager).


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/advancedconfig:
    get:
      tags:
      - 4.0 > edges
      summary: advancedConfigRead
      description: |+
        Retrieve SSL VPN advanced configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: advancedConfigUpdate
      description: |+
        Update SSL VPN advanced configuration.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <advancedConfig>
                  <enableCompression></enableCompression>
                  <forceVirtualKeyboard></forceVirtualKeyboard>
                  <preventMultipleLogon></preventMultipleLogon>
                  <randomizeVirtualkeys></randomizeVirtualkeys>
                  <timeout>
                    <forcedTimeout></forcedTimeout>
                    <sessionIdleTimeout></sessionIdleTimeout>
                  </timeout>
                  <clientNotification></clientNotification>
                  <enableLogging></enableLogging>
                </advancedConfig>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/script:
    get:
      tags:
      - 4.0 > edges
      summary: scriptRead
      description: |+
        Retrieve all script configurations.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: scriptUpdate
      description: "Update all script configurations with the given list of\nconfigurations.\
        \ If the config is present, its is updated;\notherwise, a new config is created.\
        \ Existing configs not included\nin the body are deleted.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: scriptCreate
      description: |+
        Configure parameters associated with the uploaded script file.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: scriptDelete
      description: |+
        Delete all script configurations

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/script/{fileID}:
    get:
      tags:
      - 4.0 > edges
      summary: scriptFileIDRead
      description: "Retrieve parameters associated with the specified script file.\n\
        \n\nParameters:\n\nfileID: Specified script file.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: fileID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: scriptFileIDUpdate
      description: "Update parameters associated with the specified script file.\n\
        \n\nParameters:\n\nfileID: Specified script file.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: fileID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: scriptFileIDDelete
      description: "Delete script parameters.\n\nParameters:\n\nfileID: Specified\
        \ script file.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: fileID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/config/script/file/:
    post:
      tags:
      - 4.0 > edges
      summary: scriptFileCreate
      description: "You can add multiple login or logoff scripts. For example, you\
        \ can\nbind a login script for starting Internet Explorer with gmail.com.\n\
        When the remote user logs in to the SSL client, Internet Explorer\nopens up\
        \ gmail.com. This method returns a *scriptFileId* which\ncan be used to update\
        \ parameters associated with the script file.\n\nYou must upload the script\
        \ files using the form-data content-type.\nConsult the documentation for your\
        \ REST client for instructions.\n\nDo not set other Content-type headers in\
        \ your request, for\nexample, *Content-type: application/xml*.\n\nWhen you\
        \ upload a file as form-data, you must provide a **key**\nand a **value**\
        \ for the file. The **key** is *file*, and the\n**value** is the location\
        \ of the script file.\n\n**Example using curl**\n```\n/usr/bin/curl -v -k\
        \ -i -F file=@/tmp/script.sh -H 'Authorization: Basic YWRtaW46ZGXXXXXXXX=='\n\
        https://192.168.110.42/api/4.0/edges/edge-3/sslvpn/config/script/file/\n```\n\
        \n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/auth/localusers/users:
    put:
      tags:
      - 4.0 > edges
      summary: allUsersUpdate
      description: "Update all users with the given list of users. If the user is\n\
        present, it is updated. Otherwise, and new user is created. Existing\nusers\
        \ not included in the body are deleted.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <users>
                  <user>
                    <userId></userId>
                    <password></password>
                    <firstName></firstName>
                    <lastName></lastName>
                    <description></description>
                    <disableUserAccount></disableUserAccount>
                    <passwordNeverExpires></passwordNeverExpires>
                    <allowChangePassword>
                      <changePasswordOnNextLogin></changePasswordOnNextLogin>
                    </allowChangePassword>
                  </user>
                </users>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/activesessions:
    get:
      tags:
      - 4.0 > edges
      summary: sslVPNActiveClientsRead
      description: |+
        Retrieve a list of active clients for the SSL VPN session.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/sslvpn/activesessions/{sessionID}:
    delete:
      tags:
      - 4.0 > edges
      summary: sessionDelete
      description: "Disconnect an active client.\n\nParameters:\n\nsessionID: Specified\
        \ client session.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: sessionID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/dashboard/sslvpn:
    get:
      tags:
      - 4.0 > edges
      summary: sslVPNStatsRead
      description: |+
        Retrieve SSL VPN statistics on the specified NSX Edge.

        Parameters:

      parameters:
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/dashboard/ipsec:
    get:
      tags:
      - 4.0 > edges
      summary: ipsecTrafficStatsRead
      description: |+
        Retrieve tunnel traffic statistics for specified time interval.


        Parameters:

      parameters:
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/dashboard/interface:
    get:
      tags:
      - 4.0 > edges
      summary: vnicDashStatsRead
      description: "Retrieves dashboard statistics between the specified start and\
        \ end\ntimes. When start and end time are not specified, all statistics\n\
        since the Edge deployed are displayed. When no end time is specified,\nthe\
        \ current Edge Manager time is set as endTime. Each record has the\nstats\
        \ of 5 minutes granularity.\n\n\nParameters:\n\n"
      parameters:
      - name: interval
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/interfaces:
    get:
      tags:
      - 4.0 > edges
      summary: vnicStatsRead
      description: |+
        Retrieve interface statistics.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/interfaces/uplink:
    get:
      tags:
      - 4.0 > edges
      summary: uplinkVNICStatsRead
      description: |+
        Retrieve uplink interface statistics.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/statistics/interfaces/internal:
    get:
      tags:
      - 4.0 > edges
      summary: internalVNICStatsRead
      description: |+
        Retrieve internal interface statistics.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/l2vpn/config:
    get:
      tags:
      - 4.0 > edges
      summary: l2VPNRead
      description: |+
        Retrieve the current L2VPN configuration for NSX Edge.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: l2VPNUpdate
      description: |+
        Configure L2VPN for server or client.

        You first enable the L2 VPN service on the NSX Edge instance and then
        configure a server and a client.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <l2Vpn>
                  <enabled>true</enabled>
                  <logging>
                    <enable>false</enable>
                    <logLevel>info</logLevel>
                    </logging>
                    <l2VpnSites>
                    <l2VpnSite>
                      <server>
                        <configuration>
                          <listenerIp></listenerIp>
                          <listenerPort></listenerPort>
                          <encryptionAlgorithm></encryptionAlgorithm>
                          <serverCertificate></serverCertificate>
                          <peerSites>
                            <peerSite>
                              <name></name>
                              <description></description>
                              <l2VpnUser>
                                <userId></userId>
                                <password></password>
                              </l2VpnUser>
                              <vnics>
                                <index></index>
                              </vnics>
                              <egressOptimization>
                                <gatewayIpAddress></gatewayIpAddress>
                              </egressOptimization>
                              <enabled></enabled>
                            </peerSite>
                          </peerSites>
                        </configuration>
                      </server>
                    </l2VpnSite>
                  </l2VpnSites>
                </l2Vpn>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: l2VPNCreate
      description: |+
        Enable or disable L2 VPN service.


        Parameters:

      parameters:
      - name: enableService
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: l2VPNDelete
      description: |+
        Delete the L2 VPN configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/l2vpn/config/statistics:
    get:
      tags:
      - 4.0 > edges
      summary: statisticsRead
      description: "Retrieve L2 VPN statistics, which has information such as tunnel\
        \ status,\nsent bytes, received bytes for the specified Edge.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/ipsec/config:
    get:
      tags:
      - 4.0 > edges
      summary: ipsecConfigRead
      description: |+
        Retrieve IPsec configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: ipsecConfigUpdate
      description: |+
        Update IPsec VPN configuration.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipsec>
                  <enabled></enabled>
                  <logLevel></logLevel>
                  <enable></enable>
                  <global>
                    <psk></psk>
                    <serviceCertificate></serviceCertificate>
                    <caCertificates>
                      <caCertificate></caCertificate>
                    </caCertificates>
                    <crlCertificates>
                      <crlCertificate></crlCertificate>
                    </crlCertificates>
                  </global>
                  <sites>
                    <site>
                      <enabled></enabled>
                      <name></name>
                      <description></description>
                      <localId></localId>
                      <localIp></localIp>
                      <peerId></peerId>
                      <peerIp></peerIp>
                      <encryptionAlgorithm></encryptionAlgorithm>
                      <authenticationMode>psk</authenticationMode>
                      <psk></psk>
                      <enablePfs></enablePfs>
                      <dhGroup></dhGroup>
                      <localSubnets>
                        <subnet></subnet>
                      </localSubnets>
                      <peerSubnets>
                        <subnet></subnet>
                      </peerSubnets>
                    </site>
                  </sites>
                </ipsec>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: ipsecConfigDelete
      description: |+
        Delete the IPsec configuration.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/ipsec/statistics:
    get:
      tags:
      - 4.0 > edges
      summary: ipsecStatsRead
      description: |+
        Retrieve IPsec statistics.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/autoconfiguration:
    get:
      tags:
      - 4.0 > edges
      summary: autoConfigRead
      description: |+
        Retrieve the auto configuration settings for the NSX Edge.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: autoConfigUpdate
      description: |+
        Update the auto configuration settings for the NSX Edge.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <autoConfiguration>
                  <enabled></enabled>
                  <rulePriority></rulePriority>
                </autoConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/appliances:
    get:
      tags:
      - 4.0 > edges
      summary: appliancesRead
      description: "Retrieve appliance configuration.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.2.3 | Method updated. **haAdminState**,\
        \ **configuredResourcePool**, **configuredDataStore**, **configuredHost**,\
        \ **configuredVmFolder** parameters added. \n\n\nParameters:\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: appliancesUpdate
      description: "You can retrieve the configuration of both appliances by using\
        \ the\nGET call and replace the size, resource pool, datastore, and custom\n\
        parameters of the appliances by using a PUT call. If there were two\nappliances\
        \ earlier and you PUT only one appliance, the other\nappliance is deleted.\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.2.3 | Method updated. **haAdminState** parameter added.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: appliancesCreate
      description: |+
        Change the size of both appliances.


        Parameters:

      parameters:
      - name: size
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/appliances/{haIndex}:
    get:
      tags:
      - 4.0 > edges
      summary: applianceRead
      description: "Retrieve the configuration of the specified appliance.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ updated. **haAdminState**, **configuredResourcePool**, **configuredDataStore**,\
        \ **configuredHost**, **configuredVmFolder** parameters added. \n\n\nParameters:\n\
        \nhaIndex: Specified appliance HA index\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: haIndex
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: applianceUpdate
      description: "Update the configuration of the specified appliance.\n\n**Method\
        \ history:**\n\nRelease | Modification\n--------|-------------\n6.2.3 | Method\
        \ updated. **haAdminState** parameter added.\n\n\nParameters:\n\nhaIndex:\
        \ Specified appliance HA index\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: haIndex
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <appliance>
                  <haAdminState>up</haAdminState>
                  <resourcePoolId>domain-c41</resourcePoolId>
                  <datastoreId>datastore-29</datastoreId>
                  <hostId>host-203</hostId>
                  <vmFolderId>group-v242</vmFolderId>
                  <cpuReservation>
                    <limit>-1</limit>
                    <reservation>1000</reservation>
                  </cpuReservation>
                  <memoryReservation>
                    <limit>-1</limit>
                    <reservation>512</reservation>
                  </memoryReservation>
                  <edgeId>edge-3</edgeId>
                </appliance>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: applianceExecute
      description: "Used to send CLI Commands to the Edge Gw. To use CLI commands\
        \ you also\nneed to add an additional Accept Header with type text\\plain,\
        \ as well as\nthe query parameter action=execute\n\n\nParameters:\n\nhaIndex:\
        \ Specified appliance HA index\n\n"
      parameters:
      - name: Accept
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: haIndex
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <cliCmd>
                  <cmdStr>show ip ospf neighbours</cmdStr>
                </cliCmd>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: applianceDelete
      description: "Delete the appliance\n\nParameters:\n\nhaIndex: Specified appliance\
        \ HA index\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: haIndex
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/vnics:
    get:
      tags:
      - 4.0 > edges
      summary: vnicsRead
      description: |+
        Retrieve all interfaces for the specified Edge Services Gateway.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: vnicsCreate
      description: |+
        Add an interface or sub interface.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vnics>
                  <vnic>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <secondaryAddresses>
                          <ipAddress></ipAddress>
                        </secondaryAddresses>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <index></index>
                    <portgroupId></portgroupId>
                    <portgroupName></portgroupName>
                    <macAddress>
                      <edgeVmHaIndex></edgeVmHaIndex>
                      <value></value>
                    </macAddress>
                    <fenceParameter>
                      <key></key>
                      <value></value>
                    </fenceParameter>
                    <enableProxyArp></enableProxyArp>
                    <enableSendRedirects></enableSendRedirects>
                    <enableBridgeMode></enableBridgeMode>
                    <isConnected></isConnected>
                    <inShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </inShapingPolicy>
                    <outShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </outShapingPolicy>
                  </vnic>
                </vnics>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/vnics/{index}:
    get:
      tags:
      - 4.0 > edges
      summary: vnicRead
      description: "Retrieve the specified interface.\n\nParameters:\n\nindex: Specified\
        \ interface\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: index
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: vnicUpdate
      description: "Update the specified interface.\n\nParameters:\n\nindex: Specified\
        \ interface\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: index
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <vnics>
                  <vnic>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <secondaryAddresses>
                          <ipAddress></ipAddress>
                        </secondaryAddresses>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <index></index>
                    <portgroupId></portgroupId>
                    <portgroupName></portgroupName>
                    <macAddress>
                      <edgeVmHaIndex></edgeVmHaIndex>
                      <value></value>
                    </macAddress>
                    <fenceParameter>
                      <key></key>
                      <value></value>
                    </fenceParameter>
                    <enableProxyArp></enableProxyArp>
                    <enableSendRedirects></enableSendRedirects>
                    <enableBridgeMode></enableBridgeMode>
                    <isConnected></isConnected>
                    <inShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </inShapingPolicy>
                    <outShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </outShapingPolicy>
                  </vnic>
                </vnics>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: vnicDelete
      description: "Delete interface\n\nParameters:\n\nindex: Specified interface\n\
        \n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: index
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/mgmtinterface:
    get:
      tags:
      - 4.0 > edges
      summary: mgmtInterfaceRead
      description: |+
        Retrieve the management interface configuration for the logical
        router.


        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: mgmtInterfaceUpdate
      description: |+
        Configure high availability (management) interface for logical
        (distributed) router.  See *Working with NSX Edge* for descriptions
        of parameters used to configure the logical router HA interface.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <mgmtInterface>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <connectedToId></connectedToId>
                </mgmtInterface>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/interfaces:
    get:
      tags:
      - 4.0 > edges
      summary: interfacesRead
      description: |+
        Retrieve all interfaces on the logical router.

        Parameters:

      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > edges
      summary: interfacesCreate
      description: "Add interfaces for a logical router. \n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <interfaces>
                  <interface>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <isConnected></isConnected>
                    <connectedToId></connectedToId>
                  </interface>
                </interfaces>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: interfacesDelete
      description: |+
        Delete all interfaces on the logical router.

        Parameters:

      parameters:
      - name: index
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/{edgeId}/interfaces/{index}:
    get:
      tags:
      - 4.0 > edges
      summary: interfaceRead
      description: "Retrieve information about the specified logical router interface.\n\
        \n\nParameters:\n\nindex: Specified router interface.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: index
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edges
      summary: interfaceUpdate
      description: "Update interface configuration for the specified logical router\n\
        interface.\n\n\nParameters:\n\nindex: Specified router interface.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: index
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > edges
      summary: interfaceDelete
      description: "Delete interface configuration and reset to factory default.\n\
        \n\nParameters:\n\nindex: Specified router interface.\n\n"
      parameters:
      - name: edgeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: index
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/jobs:
    get:
      tags:
      - 4.0 > edges
      summary: nsxEdgeJobsRead
      description: |+
        Retrieve NSX Edge job status.


        Parameters:

      parameters:
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edges/jobs/{jobId}:
    get:
      tags:
      - 4.0 > edges
      summary: nsxEdgeJobRead
      description: "Retrieve job status for the specified job.\n\n\nParameters:\n\n\
        jobId: Job ID\n\n"
      parameters:
      - name: jobId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/edgePublish/tuningConfiguration:
    get:
      tags:
      - 4.0 > edgePublish
      summary: nsxEdgePublishTuningRead
      description: |+
        Retrieve the NSX Edge tuning configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > edgePublish
      summary: nsxEdgePublishTuningUpdate
      description: |+
        Update the NSX Edge tuning configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <tuningConfiguration>
                  <lockUpdatesOnEdge>false</lockUpdatesOnEdge>
                  <aggregatePublishing>true</aggregatePublishing>
                  <edgeVMHealthCheckIntervalInMin>0</edgeVMHealthCheckIntervalInMin>
                  <healthCheckCommandTimeoutInMs>120000</healthCheckCommandTimeoutInMs>
                  <maxParallelVixCallsForHealthCheck>25</maxParallelVixCallsForHealthCheck>
                  <publishingTimeoutInMs>1200000</publishingTimeoutInMs>
                  <edgeVCpuReservationPercentage>0</edgeVCpuReservationPercentage>
                  <edgeMemoryReservationPercentage>0</edgeMemoryReservationPercentage>
                  <megaHertzPerVCpu>1000</megaHertzPerVCpu>
                </tuningConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/defaultconfig:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwConfigDefaultRead
      description: "Retrieve the default firewall configuration.\n\nThe output of\
        \ this method can be used to restore the firewall config\nback to default.\
        \ For example, to replace the layer 2 or layer 3\ndefault section, use the\
        \ relevant default section from the `GET\n/api/4.0/firewall/globalroot-0/defaultconfig`\
        \ response body to create\nthe request body of `PUT\n/api/4.0/firewall/globalroot-0/config/layer2sections|layer3sections/{sectionId}`.\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.3.0 | Method introduced.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwConfigShow
      description: "Retrieve distributed firewall rule configuration.\n\nIf no query\
        \ parameters are used, all rule configuration is retrieved.\nUse the query\
        \ parameters to filter the rule configuration information.\n\n\nParameters:\n\
        \n"
      parameters:
      - name: ruleType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: source
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: destination
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ruleId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: comment
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: siProfile
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: edgeId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwConfigUpdate
      description: "Update the complete firewall configuration in all sections.\n\n\
        * Retrieve the configuration with `GET /api/4.0/firewall/globalroot-0/config`.\n\
        * Retrieve the Etag value from the response headers.\n* Extract and modify\
        \ the configuration from the response body as needed.\n* Set the If-Match\
        \ header to the Etag value, and submit the request.\n\nNot all fields are\
        \ required while sending the request. All the optional fields\nare safe to\
        \ be ignored while sending the configuration to server. For example,\nif an\
        \ IP set is referenced in the rule only IPSet and Type is needed in the\n\
        Source/Destination objects and not Name and isValid tags.\n\nWhen updating\
        \ the firewall configuration:\n* IDs for new objects (rule/section) should\
        \ be removed or set to zero.\n* If new entities (sections/rules) have been\
        \ sent in the request, the response\n  will contain the system-generated IDs,\
        \ which are assigned to these new\n  entities.\n* **appliedTo** can be any\
        \ valid firewall rule element.\n* **action** can be *ALLOW*, *BLOCK*, or *REJECT*.\
        \ REJECT sends reject message for\n  unaccepted packets; RST packets are sent\
        \ for TCP connections and ICMP\n  unreachable code packets are sent for UDP,\
        \ ICMP, and other IP connections\n* source and destination can have an exclude\
        \ flag. For example, if you add an\n  exclude tag for 1.1.1.1 in the source\
        \ parameter, the rule looks for traffic\n  originating from all IPs other\
        \ than 1.1.1.1.\n\n\nParameters:\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallConfiguration timestamp="1359979620727">
                  <contextId>globalroot-0</contextId>
                  <layer3Sections>
                    <section id="2" name="defaultSectionLayer3" generationNumber="1359979620727" timestamp="1359979620727">
                      <rule disabled="false" logged="true">
                        <name>okn-1</name>
                        <action>ALLOW</action>
                        <sources excluded="false">
                          <source>
                            <value>datacenter-57</value>
                            <type>Datacenter</type>
                          </source>
                          <source>
                            <value>domain-c62</value>
                            <type>ClusterComputeResource</type>
                          </source>
                          <source>
                            <value>10.112.1.1</value>
                            <type>Ipv4Address</type>
                          </source>
                        </sources>
                        <services>
                          <service>
                            <destinationPort>80</destinationPort>
                            <protocol>6</protocol>
                            <subProtocol>6</subProtocol>
                          </service>
                          <service>
                            <value>application-161</value>
                            <type>Application</type>
                          </service>
                        </services>
                        <appliedToList>
                          <appliedTo>
                            <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                            <type>Vnic</type>
                          </appliedTo>
                          <appliedTo>
                            <value>vm-126</value>
                            <type>VirtualMachine</type>
                          </appliedTo>
                        </appliedToList>
                      </rule>
                      <rule disabled="true" logged="true">
                        <name>Matru-1</name>
                        <action>ALLOW</action>
                        <sectionId>2</sectionId>
                      </rule>
                      <rule disabled="true" logged="true">
                        <name>Matru-2</name>
                        <action>ALLOW</action>
                        <sectionId>2</sectionId>
                      </rule>
                      <rule disabled="true" logged="true">
                        <name>Matru-3</name>
                        <action>ALLOW</action>
                        <sectionId>2</sectionId>
                      </rule>
                      <rule id="2" disabled="true" logged="false">
                        <name>Default Rule</name>
                        <action>DENY</action>
                        <sectionId>2</sectionId>
                      </rule>
                    </section>
                  </layer3Sections>
                  <layer2Sections>
                    <section id="1" name="defaultSectionLayer2" generationNumber="1359979620727" timestamp="1359979620727">
                      <rule id="1" disabled="false" logged="false">
                        <name>Default Rule</name>
                        <action>ALLOW</action>
                        <sectionId>1</sectionId>
                      </rule>
                    </section>
                  </layer2Sections>
                </firewallConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwConfigDelete
      description: "Restores default configuration, which means one defaultLayer3\
        \ section\nwith three default allow rules and one defaultLayer2Section with\
        \ one\ndefault allow rule.\n\n\nParameters:\n\n"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwL3SectionRead
      description: |+
        Retrieve rules from the layer 3 section specified by section
        **name**.


        Parameters:

      parameters:
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > firewall
      summary: dfwL3SectionCreate
      description: "Create a layer 3 distributed firewall section.\n\nBy default,\
        \ the section is created at the top of the firewall table.\nYou can specify\
        \ a location for the section with the **operation**\nand **anchorId** query\
        \ parameters.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: operation
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: anchorId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section name="TestSection">
                  <rule disabled="false" logged="true">
                    <name>okn-2</name>
                    <action>ALLOW</action>
                    <appliedToList>
                      <appliedTo>
                        <name>vm1 - Network adapter 1</name>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                        <isValid>true</isValid>
                      </appliedTo>
                      <appliedTo>
                        <name>Small XP-2</name>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sources excluded="false">
                      <source>
                        <name>5.1 ESX</name>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <name>5.1</name>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                        <isValid>true</isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <name>VMware-VDM2.x-Ephemeral</name>
                        <value>application-161</value>
                        <isValid>true</isValid>
                      </service>
                    </services>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>ALLOW</action>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>test-3</name>
                    <action>ALLOW</action>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>test-2</name>
                    <action>ALLOW</action>
                  </rule>
                  <rule disabled="true" logged="false">
                    <name>test-1</name>
                    <action>DENY</action>
                  </rule>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections/{sectionId}:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwL3SectionIdRead
      description: "Retrieve information about the specified layer 3 section.\n\n\
        Parameters:\n\nsectionId: The ID of the section to modify.\n\n"
      parameters:
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwL3SectionIdUpdate
      description: "Update the specified layer 3 section in distributed firewall.\n\
        \n* Retrieve the configuration for the specified section.\n* Retrieve the\
        \ Etag value from the response headers.\n* Extract and modify the configuration\
        \ from the response body as needed.\n* Set the If-Match header to the Etag\
        \ value, and submit the request.\n\nNot all fields are required while sending\
        \ the request. All the optional fields\nare safe to be ignored while sending\
        \ the configuration to server. For example,\nif an IP set is referenced in\
        \ the rule only IPSet and Type is needed in the\nSource/Destination objects\
        \ and not Name and isValid tags.\n\nWhen updating the firewall configuration:\n\
        * IDs for new objects (rule/section) should be removed or set to zero.\n*\
        \ If new entities (sections/rules) have been sent in the request, the response\n\
        \  will contain the system-generated IDs, which are assigned to these new\n\
        \  entities.\n* **appliedTo** can be any valid firewall rule element.\n* **action**\
        \ can be *ALLOW*, *BLOCK*, or *REJECT*. REJECT sends reject message for\n\
        \  unaccepted packets; RST packets are sent for TCP connections and ICMP\n\
        \  unreachable code packets are sent for UDP, ICMP, and other IP connections\n\
        * source and destination can have an exclude flag. For example, if you add\
        \ an\n  exclude tag for 1.1.1.1 in the source parameter, the rule looks for\
        \ traffic\n  originating from all IPs other than 1.1.1.1.\n\nWhen Distributed\
        \ Firewall is used with Service Composer, firewall\nsections created by Service\
        \ Composer contain an additional attribute\nin the XML called managedBy. You\
        \ should not modify Service Composer\nfirewall sections using Distributed\
        \ Firewall REST APIs. If you do, you\nmust synchronize firewall rules from\
        \ Service Composer using the `GET\n/api/2.0/services/policy/serviceprovider/firewall`\
        \ API.\n\n\nParameters:\n\nsectionId: The ID of the section to modify.\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section id="4" name="TestSectionRenamed" generationNumber="1336034461743" timestamp="1360149234572">
                  <rule id="16" disabled="false" logged="false">
                    <name>okn-2</name>
                    <action>ALLOW</action>
                    <appliedToList>
                      <appliedTo>
                        <name>vm1 - Network adapter 1</name>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                        <isValid>true</isValid>
                      </appliedTo>
                      <appliedTo>
                        <name>Small XP-2</name>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>4</sectionId>
                    <sources excluded="false">
                      <source>
                        <name>5.1 ESX</name>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <name>5.1</name>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                        <isValid>true</isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <name>VMware-VDM2.x-Ephemeral</name>
                        <value>application-161</value>
                        <isValid>true</isValid>
                      </service>
                    </services>
                  </rule>
                  <rule id="15" disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="14" disabled="true" logged="true">
                    <name>test-3</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="13" disabled="true" logged="true">
                    <name>test-2</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="12" disabled="true" logged="false">
                    <name>test-1</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > firewall
      summary: dfwL3SectionIdAction
      description: "Move the specified layer 3 section.\n\nUse the **action**, **operation**,\
        \ and optionally **achorId**\nquery parameters to specify the destination\
        \ for the section.\n\n`POST /api/4.0/firewall/globalroot-0/config/layer3sections/1007\n\
        ?action=revise&operation=insert_before&anchorId=1006`\n\n`If-Match: 1477989118875`\
        \ \n\n```\n<section id=\"1007\" name=\"Web Section\" generationNumber=\"1477989118875\"\
        \ timestamp=\"1477989118875\" type=\"LAYER3\">\n  ...\n</section>\n```\n\n\
        \nParameters:\n\nsectionId: The ID of the section to modify.\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: operation
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: anchorId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwL3SectionIdDelete
      description: "Delete the specified layer 3 distributed firewall section.\n\n\
        If the default layer 3 firewall section is selected, the request is\nrejected.\
        \ See `GET /api/4.0/firewall/globalroot-0/defaultconfig`\nfor information\
        \ on resetting the default firewall section.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.3.0 | Method updated. When deleting\
        \ the default firewall rule section, the method previously removed all rules\
        \ except for the default rule. The method now returns status 400 and the message\
        \ `Cannot delete default section <sectionId>`.\n\n\nParameters:\n\nsectionId:\
        \ The ID of the section to modify.\n\n"
      parameters:
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections/{sectionId}/rules:
    post:
      tags:
      - 4.0 > firewall
      summary: dfwL3RulesAdd
      description: "Add rules to the specified layer 2 section in distributed firewall.\n\
        \nYou add firewall rules at the global scope. You can then narrow down the\
        \ scope\n(datacenter, cluster, distributed virtual port group, network, virtual\
        \ machine,\nvNIC, or logical switch) at which you want to apply the rule.\
        \ Firewall allows\nyou to add multiple objects at the source and destination\
        \ levels for each rule,\nwhich helps reduce the total number of firewall rules\
        \ to be added.  To add a\nidentity based firewall rule, first create a security\
        \ group based on Directory\nGroup objects. Then create a firewall rule with\
        \ the security group as the\nsource or destination.  Rules that direct traffic\
        \ to a third part service are\nreferred to as layer3 redirect rules, and are\
        \ displayed in the layer3 redirect\ntab.\n\nWhen Distributed Firewall is used\
        \ with Service Composer, firewall\nrules created by Service Composer contain\
        \ an additional attribute\nin the XML called managedBy.\n\nFollow this procedure\
        \ to add a rule:\n\n* Retrieve the configuration for the specified section.\n\
        * Retrieve the Etag value from the response headers.\n  **Note**: Each section\
        \ contains its own Etag, generationNumber, and\n  timestamp. When adding a\
        \ new rule, you must use the Etag value of the\n  firewall section to which\
        \ you wish to add the rule.\n* Extract and modify the configuration from the\
        \ response body as needed.\n* Set the If-Match header to the section Etag\
        \ value, and submit the request.\n\nNot all fields are required while sending\
        \ the request. All the optional fields\nare safe to be ignored while sending\
        \ the configuration to server. For example,\nif an IP set is referenced in\
        \ the rule only IPSet and Type is needed in the\nSource/Destination objects\
        \ and not Name and isValid tags.\n\nWhen updating the firewall configuration:\n\
        \n* IDs for new rules should be removed or set to zero.\n* If new rules have\
        \ been sent in the request, the response\n  will contain the system-generated\
        \ IDs, which are assigned to these new\n  entities.\n* **appliedTo** can be\
        \ any valid firewall rule element.\n* **action** can be *ALLOW*, *BLOCK*,\
        \ or *REJECT*. REJECT sends reject message for\n  unaccepted packets; RST\
        \ packets are sent for TCP connections and ICMP\n  unreachable code packets\
        \ are sent for UDP, ICMP, and other IP connections\n* source and destination\
        \ can have an exclude flag. For example, if you add an\n  exclude tag for\
        \ 1.1.1.1 in the source parameter, the rule looks for traffic\n  originating\
        \ from all IPs other than 1.1.1.1.\n\n\nParameters:\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule disabled="false" logged="false">
                  <name>AddRuleTest</name>
                  <action>allow</action>
                  <notes></notes>
                  <appliedToList>
                    <appliedTo>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </appliedTo>
                  </appliedToList>
                  <sectionId>2</sectionId>
                  <sources excluded="true">
                    <source>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </source>
                  </sources>
                  <services>
                    <service>
                      <value>application-216</value>
                    </service>
                  </services>
                </rule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3sections/{sectionId}/rules/{ruleId}:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwL3RuleRead
      description: "Retrieve information about the specified distributed firewall\
        \ rule.\n\n\nParameters:\n\nruleId: The ID of the rule beeing read, updated\
        \ or deleted\n\n"
      parameters:
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwL3RuleUpdate
      description: "Update a distributed firewall rule in a layer 3 section.\n\n*\
        \ Retrieve the configuration for the section that contains the rule you want\n\
        \  to modify.\n* Retrieve the Etag value from the response headers.\n  **Note**:\
        \ This is the Etag value of the firewall section to which you want\n  to add\
        \ the rule. If you are keeping this rule in the same section, you must\n \
        \ keep the same Etag number.\n* Extract and modify the rule configuration\
        \ from the response body as needed.\n* Set the If-Match header to the section\
        \ Etag value, and submit the request.\n\nNot all fields are required while\
        \ sending the request. All the optional fields\nare safe to be ignored while\
        \ sending the configuration to server. For example,\nif an IP set is referenced\
        \ in the rule only IPSet and Type is needed in the\nSource/Destination objects\
        \ and not Name and isValid tags.\n\n\nParameters:\n\nruleId: The ID of the\
        \ rule beeing read, updated or deleted\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule id="23" disabled="enabled" logged="true">
                  <name>AddRuleTestUpdated</name>
                  <action>allow</action>
                  <notes></notes>
                  <appliedToList>
                    <appliedTo>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </appliedTo>
                  </appliedToList>
                  <sectionId>2</sectionId>
                  <sources excluded="true">
                    <source>
                      <value>datacenter-26</value>
                      <type>Datacenter</type>
                    </source>
                  </sources>
                  <services>
                    <service>
                      <value>application-216</value>
                    </service>
                  </services>
                </rule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwL3RuleDelete
      description: "Delete the specified distributed firewall rule.\n\nParameters:\n\
        \nruleId: The ID of the rule beeing read, updated or deleted\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwL2SectionRead
      description: |+
        Retrieve rules from the layer 2 section specified by section
        **name**.


        Parameters:

      parameters:
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > firewall
      summary: dfwL2SectionCreate
      description: "Create a layer 2 distributed firewall section.\n\nBy default,\
        \ the section is created at the top of the firewall table.\nYou can specify\
        \ a location for the section with the **operation**\nand **anchorId** query\
        \ parameters.\n\n\nParameters:\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: operation
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: anchorId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section name="" managedBy="" type="">
                  <rule disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <destinations excluded="">
                      <destination>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </destination>
                    </destinations>
                    <services>
                      <service>
                        <destinationPort></destinationPort>
                        <protocol></protocol>
                        <subProtocol></subProtocol>
                      </service>
                    </services>
                  </rule>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections/{sectionId}:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwL2SectionIdRead
      description: "Retrieve information about the specified layer 2 section.\n\n\
        Parameters:\n\nsectionId: The ID of the section to modify.\n\n"
      parameters:
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwL2SectionIdUpdate
      description: "Update the specified layer 2 section in distributed firewall.\n\
        \n* Retrieve the configuration for the specified section.\n* Retrieve the\
        \ Etag value from the response headers.\n* Extract and modify the configuration\
        \ from the response body as needed.\n* Set the If-Match header to the Etag\
        \ value, and submit the request.\n\nNot all fields are required while sending\
        \ the request. All the optional fields\nare safe to be ignored while sending\
        \ the configuration to server. For example,\nif an IP set is referenced in\
        \ the rule only IPSet and Type is needed in the\nSource/Destination objects\
        \ and not Name and isValid tags.\n\nWhen updating the firewall configuration:\n\
        * IDs for new objects (rule/section) should be removed or set to zero.\n*\
        \ If new entities (sections/rules) have been sent in the request, the response\n\
        \  will contain the system-generated IDs, which are assigned to these new\n\
        \  entities.\n* **appliedTo** can be any valid firewall rule element.\n* **action**\
        \ can be *ALLOW*, *BLOCK*, or *REJECT*. REJECT sends reject message for\n\
        \  unaccepted packets; RST packets are sent for TCP connections and ICMP\n\
        \  unreachable code packets are sent for UDP, ICMP, and other IP connections\n\
        * source and destination can have an exclude flag. For example, if you add\
        \ an\n  exclude tag for 1.1.1.1 in the source parameter, the rule looks for\
        \ traffic\n  originating from all IPs other than 1.1.1.1.\n\nWhen Distributed\
        \ Firewall is used with Service Composer, firewall\nsections created by Service\
        \ Composer contain an additional attribute\nin the XML called managedBy. You\
        \ should not modify Service Composer\nfirewall sections using Distributed\
        \ Firewall REST APIs. If you do, you\nmust synchronize firewall rules from\
        \ Service Composer using the `GET\n/api/2.0/services/policy/serviceprovider/firewall`\
        \ API.\n\n\nParameters:\n\nsectionId: The ID of the section to modify.\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort></destinationPort>
                        <protocol></protocol>
                        <subProtocol></subProtocol>
                      </service>
                    </services>
                  </rule>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > firewall
      summary: dfwL2SectionIdAction
      description: "Move the specified layer 2 section.\n\nUse the **action**, **operation**,\
        \ and optionally **achorId**\nquery parameters to specify the destination\
        \ for the section.\n\n`POST /api/4.0/firewall/globalroot-0/config/layer2sections/1009\n\
        ?action=revise&operation=insert_before&anchorId=1008`\n\n`If-Match: 1478307787160`\n\
        \n```\n<section id=\"1009\" name=\"Test Section\" generationNumber=\"1478307787160\"\
        \ timestamp=\"1478307787160\" type=\"LAYER2\">\n  ...\n</section>\n```\n\n\
        \nParameters:\n\nsectionId: The ID of the section to modify.\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: operation
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: anchorId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwL2SectionIdDelete
      description: "Delete the specified layer 2 section and its contents.\n\nIf the\
        \ default layer 2 firewall section is selected, the request is\nrejected.\
        \ See `GET /api/4.0/firewall/globalroot-0/defaultconfig`\nfor information\
        \ on resetting the default firewall section.\n\n**Method history:**\n\nRelease\
        \ | Modification\n--------|-------------\n6.3.0 | Method updated. When deleting\
        \ the default firewall rule section, the method previously removed all rules\
        \ except for the default rule. The method now returns status 400 and the message\
        \ `Cannot delete default section <sectionId>`.\n\n\nParameters:\n\nsectionId:\
        \ The ID of the section to modify.\n\n"
      parameters:
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections/{sectionId}/rules:
    post:
      tags:
      - 4.0 > firewall
      summary: dfwL2RulesAdd
      description: "Add rules to the specified layer 2 section in distributed firewall.\n\
        \nYou add firewall rules at the global scope. You can then narrow down the\
        \ scope\n(datacenter, cluster, distributed virtual port group, network, virtual\
        \ machine,\nvNIC, or logical switch) at which you want to apply the rule.\
        \ Firewall allows\nyou to add multiple objects at the source and destination\
        \ levels for each rule,\nwhich helps reduce the total number of firewall rules\
        \ to be added.  To add a\nidentity based firewall rule, first create a security\
        \ group based on Directory\nGroup objects. Then create a firewall rule with\
        \ the security group as the\nsource or destination.  Rules that direct traffic\
        \ to a third part service are\nreferred to as layer3 redirect rules, and are\
        \ displayed in the layer3 redirect\ntab.\n\nWhen Distributed Firewall is used\
        \ with Service Composer, firewall\nrules created by Service Composer contain\
        \ an additional attribute\nin the XML called managedBy.\n\nFollow this procedure\
        \ to add a rule:\n\n* Retrieve the configuration for the specified section.\n\
        * Retrieve the Etag value from the response headers.\n  **Note**: Each section\
        \ contains its own Etag, generationNumber, and\n  timestamp. When adding a\
        \ new rule, you must use the Etag value of the\n  firewall section to which\
        \ you wish to add the rule.\n* Extract and modify the configuration from the\
        \ response body as needed.\n* Set the If-Match header to the section Etag\
        \ value, and submit the request.\n\nNot all fields are required while sending\
        \ the request. All the optional fields\nare safe to be ignored while sending\
        \ the configuration to server. For example,\nif an IP set is referenced in\
        \ the rule only IPSet and Type is needed in the\nSource/Destination objects\
        \ and not Name and isValid tags.\n\nWhen updating the firewall configuration:\n\
        \n* IDs for new rules should be removed or set to zero.\n* If new rules have\
        \ been sent in the request, the response\n  will contain the system-generated\
        \ IDs, which are assigned to these new\n  entities.\n* **appliedTo** can be\
        \ any valid firewall rule element.\n* **action** can be *ALLOW*, *BLOCK*,\
        \ or *REJECT*. REJECT sends reject message for\n  unaccepted packets; RST\
        \ packets are sent for TCP connections and ICMP\n  unreachable code packets\
        \ are sent for UDP, ICMP, and other IP connections\n* source and destination\
        \ can have an exclude flag. For example, if you add an\n  exclude tag for\
        \ 1.1.1.1 in the source parameter, the rule looks for traffic\n  originating\
        \ from all IPs other than 1.1.1.1.\n\n\nParameters:\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule disabled="" logged="">
                  <name></name>
                  <action></action>
                  <notes></notes>
                  <appliedToList>
                    <appliedTo>
                      <value></value>
                      <type></type>
                    </appliedTo>
                  </appliedToList>
                  <sources excluded="">
                    <source>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </source>
                  </sources>
                  <destinations excluded="">
                    <destination>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </destination>
                  </destinations>
                  <services>
                    <service>
                      <value></value>
                    </service>
                  </services>
                </rule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer2sections/{sectionId}/rules/{ruleId}:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwL2RuleRead
      description: "Retrieve the configuration of the specified rule.\n\n\nParameters:\n\
        \nruleId: The ID of the rule.\n\n\n"
      parameters:
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwL2RuleUpdate
      description: "Update a distributed firewall rule in a layer 2 section.\n\n*\
        \ Retrieve the configuration for the section that contains the rule you want\n\
        \  to modify.\n* Retrieve the Etag value from the response headers.\n  **Note**:\
        \ This is the Etag value of the firewall section to which you want\n  to add\
        \ the rule. If you are keeping this rule in the same section, you must\n \
        \ keep the same Etag number.\n* Extract and modify the rule configuration\
        \ from the response body as needed.\n* Set the If-Match header to the section\
        \ Etag value, and submit the request.\n\nNot all fields are required while\
        \ sending the request. All the optional fields\nare safe to be ignored while\
        \ sending the configuration to server. For example,\nif an IP set is referenced\
        \ in the rule only IPSet and Type is needed in the\nSource/Destination objects\
        \ and not Name and isValid tags.\n\n\nParameters:\n\nruleId: The ID of the\
        \ rule.\n\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule id="" disabled="" logged="">
                  <name></name>
                  <action></action>
                  <notes></notes>
                  <sources excluded="">
                    <source>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </source>
                  </sources>
                  <destinations excluded="">
                    <destination>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </destination>
                  </destinations>
                  <services>
                    <service>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </service>
                  </services>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                </rule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwL2RuleDelete
      description: "Delete the specified distributed firewall rule.\n\nParameters:\n\
        \nruleId: The ID of the rule.\n\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: sectionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections:
    post:
      tags:
      - 4.0 > firewall
      summary: layer3RedirectSectionsCreate
      description: |+
        Add L3 redirect section

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections/{section}:
    get:
      tags:
      - 4.0 > firewall
      summary: sectionRead
      description: "Get L3 redirect section configuration\n\nParameters:\n\nsection:\
        \ Specify section by ID or name\n\n"
      parameters:
      - name: section
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: sectionUpdate
      description: "Modify layer 3 redirect section. You will need to get the Etag\n\
        value out of the GET first. Then pass the modified version of the\nwhole redirect\
        \ section configuration in the GET body.\n\n\nParameters:\n\nsection: Specify\
        \ section by ID or name\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: section
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                  </rule>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: sectionDelete
      description: "Delete specified L3 redirect section\n\nParameters:\n\nsection:\
        \ Specify section by ID or name\n\n"
      parameters:
      - name: section
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections/{section}/rules:
    post:
      tags:
      - 4.0 > firewall
      summary: rulesCreate
      description: |+
        Add L3 redirect rule

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: section
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirectsections/{section}/rules/{ruleID}:
    get:
      tags:
      - 4.0 > firewall
      summary: ruleRead
      description: "Get L3 redirect rule\n\nParameters:\n\nruleID: Specified redirect\
        \ rule\n\n"
      parameters:
      - name: section
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: ruleUpdate
      description: "Modify L3 redirect rule. You will need Etag value from the\nresponse\
        \ header of GET call. Then, pass Etag value as the\nif-match header in PUT\
        \ call\n\n\nParameters:\n\nruleID: Specified redirect rule\n\n"
      parameters:
      - name: If-Match
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: section
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <rule id="" disabled="" logged="">
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                </rule>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: ruleDelete
      description: "Delete specified L3 redirect rule\n\nParameters:\n\nruleID: Specified\
        \ redirect rule\n\n"
      parameters:
      - name: section
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ruleID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/config/layer3redirect/profiles:
    get:
      tags:
      - 4.0 > firewall
      summary: serviceInsertionProfilesRead
      description: |+
        Retrieve the Service Insertion profiles that can be applied to
        layer3 redirect rules.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/state:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwUpgradeRead
      description: |+
        Retrieve current state of firewall functioning after NSX upgrade.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwUpgradeEnable
      description: |+
        Enable distributed firewall.

        Parameters:

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/status:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwStatusRead
      description: |+
        Get firewall configuration status

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters not configured for firewall are excluded from the status output.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/status/layer3sections/{sectionID}:
    get:
      tags:
      - 4.0 > firewall
      summary: L3SectionStatusRead
      description: "Retrieve status of the last publish action for the specified layer\
        \ 3 section.\n\n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters\
        \ not configured for firewall are excluded from the status output.\n\n\nParameters:\n\
        \nsectionID: Section ID\n\n"
      parameters:
      - name: sectionID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/status/layer2sections/{sectionID}:
    get:
      tags:
      - 4.0 > firewall
      summary: L2SectionStatusRead
      description: "Retrieve status of the last publish action for the specified layer\
        \ 2 section.\n\n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters\
        \ not configured for firewall are excluded from the status output.\n\n\nParameters:\n\
        \nsectionID: Section ID\n\n"
      parameters:
      - name: sectionID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwSaveConfigRead
      description: |+
        Displays the draft IDs of all saved configurations.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > firewall
      summary: dfwDraftsCreate
      description: |+
        Save a firewall configuration.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDraft name="">
                  <description></description>
                  <preserve></preserve>
                  <mode></mode>
                  <config>
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" >
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                  </config>
                </firewallDraft>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts/{draftID}:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwDraftRead
      description: "Get a saved firewall configuration.\n\nParameters:\n\ndraftID:\
        \ Specified draft ID. Use `GET /4.0/firewall/globalroot-0/drafts` to\nretrieve\
        \ all drafts.\n\n\n"
      parameters:
      - name: draftID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwDraftUpdate
      description: "Update a saved firewall configuration.\n\nParameters:\n\ndraftID:\
        \ Specified draft ID. Use `GET /4.0/firewall/globalroot-0/drafts` to\nretrieve\
        \ all drafts.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: draftID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDraft name="">
                  <description></description>
                  <preserve></preserve>
                  <mode></mode>
                  <config>
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" >
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                  </config>
                </firewallDraft>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwDraftDelete
      description: "Delete a configuration.\n\nParameters:\n\ndraftID: Specified draft\
        \ ID. Use `GET /4.0/firewall/globalroot-0/drafts` to\nretrieve all drafts.\n\
        \n\n"
      parameters:
      - name: draftID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts/{draftID}/action/export:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwConfigExportRead
      description: |+
        Export a configuration.

        Parameters:

      parameters:
      - name: getLatestForUniversal
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: draftID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/drafts/{draftID}/action/import:
    post:
      tags:
      - 4.0 > firewall
      summary: dfwConfigImportCreate
      description: |+
        Import a configuration.

        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: draftID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallDraft id="" name="" timestamp="">
                  <description></description>
                  <preserve></preserve>
                  <user></user>
                  <mode></mode>
                  <config timestamp="">
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                    <generationNumber></generationNumber>
                  </config>
                </firewallDraft>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/timeouts:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwTimeoutsList
      description: |+
        Retrieve Distributed Firewall session timer configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > firewall
      summary: dfwTimeoutCreate
      description: |+
        Create a Distributed Firewall session timer configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallTimeoutConfiguration>
                  <name>new VM timeout</name>
                  <appliedToList>
                    <appliedTo>
                      <value>vm-217</value>
                      <type>VirtualMachine</type>
                    </appliedTo>
                  </appliedToList>
                  <isDefault>false</isDefault>
                  <tcpFirstPacket>180</tcpFirstPacket>
                  <tcpOpen>30</tcpOpen>
                  <tcpEstablished>43200</tcpEstablished>
                  <tcpClosing>180</tcpClosing>
                  <tcpFinWait>45</tcpFinWait>
                  <tcpClosed>40</tcpClosed>
                  <udpFirstPacket>60</udpFirstPacket>
                  <udpSingle>30</udpSingle>
                  <udpMultiple>60</udpMultiple>
                  <icmpFirstPacket>30</icmpFirstPacket>
                  <icmpErrorReply>15</icmpErrorReply>
                </firewallTimeoutConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/globalroot-0/timeouts/{configId}:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwTimeoutConfigIdRead
      description: "Retrieve the specified Distributed Firewall session timer configuration.\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.3.0 | Method introduced.\n\n\nParameters:\n\nconfigId: Session timer configuration\
        \ ID (**firewallTimeoutConfiguration**\nid). For example, *1004*.\n\n\n"
      parameters:
      - name: configId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwTimeoutConfigIdUpdate
      description: "Update the specified Distributed Firewall session timer configuration.\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.3.0 | Method introduced.\n\n\nParameters:\n\nconfigId: Session timer configuration\
        \ ID (**firewallTimeoutConfiguration**\nid). For example, *1004*.\n\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: configId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <firewallTimeoutConfiguration id="1004">
                  <name>new VM timeout</name>
                  <appliedToList>
                    <appliedTo>
                      <value>vm-217</value>
                      <type>VirtualMachine</type>
                      <isValid>true</isValid>
                    </appliedTo>
                    <appliedTo>
                      <value>vm-218</value>
                      <type>VirtualMachine</type>
                      <isValid>true</isValid>
                    </appliedTo>
                  </appliedToList>
                  <generationNumber>1490768692562</generationNumber>
                  <isDefault>false</isDefault>
                  <tcpFirstPacket>180</tcpFirstPacket>
                  <tcpOpen>30</tcpOpen>
                  <tcpEstablished>43200</tcpEstablished>
                  <tcpClosing>180</tcpClosing>
                  <tcpFinWait>45</tcpFinWait>
                  <tcpClosed>40</tcpClosed>
                  <udpFirstPacket>60</udpFirstPacket>
                  <udpSingle>30</udpSingle>
                  <udpMultiple>60</udpMultiple>
                  <icmpFirstPacket>30</icmpFirstPacket>
                  <icmpErrorReply>15</icmpErrorReply>
                </firewallTimeoutConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwTimeoutConfigIdDelete
      description: "Delete the specified Distributed Firewall session timer configuration.\n\
        \n**Method history:**\n\nRelease | Modification\n--------|-------------\n\
        6.3.0 | Method introduced.\n\n\nParameters:\n\nconfigId: Session timer configuration\
        \ ID (**firewallTimeoutConfiguration**\nid). For example, *1004*.\n\n\n"
      parameters:
      - name: configId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/stats/eventthresholds:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwThresholdsRead
      description: |+
        Retrieve threshold configuration for distributed firewall.


        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwThresholdsUpdate
      description: |+
        Update threshold configuration for distributed firewall.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <eventThresholds>
                  <cpu>
                    <percentValue>80</percentValue>
                  </cpu>
                  <memory>
                    <percentValue>90</percentValue>
                  </memory>
                  <connectionsPerSecond>
                    <value>250000</value>
                  </connectionsPerSecond>
                </eventThresholds>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/config/globalconfiguration:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwPerformanceRead
      description: |+
        Retrieve performance configuration for distributed firewall.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwPerformanceUpdate
      description: |+
        Update the distributed firewall performance configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method updated. **autoDraftDisabled** parameter added.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <globalConfiguration>
                  <layer3RuleOptimize>false</layer3RuleOptimize>
                  <layer2RuleOptimize>true</layer2RuleOptimize>
                  <tcpStrictOption>false</tcpStrictOption>
                  <autoDraftDisabled>true</autoDraftDisabled>
                </globalConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/forceSync/{ID}:
    post:
      tags:
      - 4.0 > firewall
      summary: dfwSyncExecute
      description: "Force sync host or cluster.\n\nParameters:\n\nID: Specified host\
        \ or cluster to synchronize\n\n"
      parameters:
      - name: ID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/{domainID}/enable/{truefalse}:
    post:
      tags:
      - 4.0 > firewall
      summary: dfwEnableDisableToggle
      description: "Enable or disable firewall components on a cluster\n\nParameters:\n\
        \ndomainID: Specified cluster\n\ntruefalse: Set parameter to true/false to\
        \ enable/disable\n\n"
      parameters:
      - name: domainID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: truefalse
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/firewall/{contextId}/config/ipfix:
    get:
      tags:
      - 4.0 > firewall
      summary: dfwIPFixRead
      description: "Query IPFIX configuration.\n\nParameters:\n\ncontextId: Specified\
        \ context\n\n"
      parameters:
      - name: contextId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > firewall
      summary: dfwIPFixUpdate
      description: "Configure IPFIX.\n\nParameters:\n\ncontextId: Specified context\n\
        \n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: contextId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <ipfixConfiguration>
                  <contextId></contextId>
                  <ipfixEnabled></ipfixEnabled>
                  <observationDomainId></observationDomainId>
                  <flowTimeout></flowTimeout>
                  <collector>
                    <ip></ip>
                    <port></port>
                  </collector>
                </ipfixConfiguration>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > firewall
      summary: dfwIPFixDelete
      description: "Deleting IPFIX configuration resets the config to default values\n\
        \n\nParameters:\n\ncontextId: Specified context\n\n"
      parameters:
      - name: contextId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/services/spoofguard/policies:
    get:
      tags:
      - 4.0 > spoofguard
      summary: spoofGuardPoliciesList
      description: |+
        Retrieve information about all SpoofGuard policies.

        Parameters:

      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > spoofguard
      summary: spoofGuardPoliciesCreate
      description: |+
        Create a SpoofGuard policy to specify the operation mode for networks.


        Parameters:

      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <spoofguardPolicy>
                  <name></name>
                  <description></description>
                  <operationMode></operationMode>
                  <enforcementPoint>
                    <id></id>
                    <name></name>
                    <type></type>
                  </enforcementPoint>
                  <allowLocalIPs></allowLocalIPs>
                </spoofguardPolicy>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/services/spoofguard/policies/{policyID}:
    get:
      tags:
      - 4.0 > spoofguard
      summary: spoofGuardPolicyRead
      description: "Retrieve information about the specified SpoofGuard policy.\n\n\
        \nParameters:\n\npolicyID: SpoofGuard policy ID.\n\n"
      parameters:
      - name: policyID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - 4.0 > spoofguard
      summary: spoofGuardPolicyUpdate
      description: "Modify the specified SpoofGuard policy.\n\nParameters:\n\npolicyID:\
        \ SpoofGuard policy ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: policyID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <spoofguardPolicy>
                  <policyId></policyId>
                  <name></name>
                  <description></description>
                  <operationMode></operationMode>
                  <enforcementPoint>
                    <id></id>
                    <name></name>
                    <type></type>
                  </enforcementPoint>
                  <allowLocalIPs></allowLocalIPs>
                </spoofguardPolicy>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - 4.0 > spoofguard
      summary: spoofGuardPolicyDelete
      description: "Delete the specified SpoofGuard policy.\n\nParameters:\n\npolicyID:\
        \ SpoofGuard policy ID.\n\n"
      parameters:
      - name: policyID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/4.0/services/spoofguard/{policyID}:
    get:
      tags:
      - 4.0 > spoofguard
      summary: spoofGuardPolicyIPRead
      description: "Retrieve IP addresses for the specified state.\n\n\nParameters:\n\
        \npolicyID: SpoofGuard policy ID.\n\n"
      parameters:
      - name: list
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: policyID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - 4.0 > spoofguard
      summary: spoofGuardPolicyIPAction
      description: "Approve or publish IP addresses.\n\nParameters:\n\npolicyID: SpoofGuard\
        \ policy ID.\n\n"
      parameters:
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/xml
      - name: vnicId
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: action
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: policyID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |
                <spoofguardList>
                  <spoofguard>
                    <id></id>
                    <vnicUuid></vnicUuid>
                    <approvedIpAddress>
                      <ipAddress></ipAddress>
                    </approvedIpAddress>
                    <approvedMacAddress></approvedMacAddress>
                    <approvedBy></approvedBy>
                    <approvedOn></approvedOn>
                    <publishedIpAddress>
                      <ipAddress></ipAddress>
                    </publishedIpAddress>
                    <publishedMacAddress></publishedMacAddress>
                    <publishedBy></publishedBy>
                    <publishedOn></publishedOn>
                  </spoofguard>
                </spoofguardList>
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
components: {}
